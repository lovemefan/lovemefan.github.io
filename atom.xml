<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lovemefan的博客</title>
  
  <subtitle>梦里花落知多少</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="lovemefan.win/"/>
  <updated>2020-04-15T03:19:22.582Z</updated>
  <id>lovemefan.win/</id>
  
  <author>
    <name>lovemefan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Algorithm</title>
    <link href="lovemefan.win/post/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/index.html%20%202020/04/14/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/"/>
    <id>lovemefan.win/post/算法/算法导论笔记/index.html  2020/04/14/算法/算法导论笔记/</id>
    <published>2020-04-14T01:27:21.000Z</published>
    <updated>2020-04-15T03:19:22.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《Introduction-to-Algorithms》-Notes"><a href="#《Introduction-to-Algorithms》-Notes" class="headerlink" title="《Introduction to Algorithms》 Notes"></a>《Introduction to Algorithms》 Notes</h1><h2 id="Asymptotic-notation"><a href="#Asymptotic-notation" class="headerlink" title="Asymptotic notation"></a>Asymptotic notation</h2><p>How we measure a Algorithms performance on computer?</p><ul><li>relative speed(on same machine)</li><li>absolute speed(on different machine)</li></ul><ol><li>Ignore machine dependent constants</li><li>Look at growth of T(n) as $n \rightarrow \infty$</li></ol><p>so we need introduce the asymptotic notation to understand performance of algorithm</p><ul><li>$\theta $  notation is pretty easy to master because all you do is  from  a formula,just drop low order terms and ignore leading constants . for example , here is a formula like: $f(x)=3n^3+90n^2+6064$  well,we drop low terms and left $n^3$ ,so $\theta(f(x))=\theta(n^3)$</li><li>O notation</li><li>$\Omega$  notation</li></ul><h2 id="Sorting-Algorithm"><a href="#Sorting-Algorithm" class="headerlink" title="Sorting Algorithm"></a>Sorting Algorithm</h2><p>We have sequence $a_1$ ,$a_2$ up to $a_n$ of numbers as input, and our output is a permutation of  those numbers.</p><p>such that   $a_1 \leq a_2 \leq a_3 \leq  … \leq a_n$ </p><p>we will write those algorithm in what we call pseudocode(伪代码)</p><h3 id="1-insertion-sort"><a href="#1-insertion-sort" class="headerlink" title="1. insertion sort"></a>1. insertion sort</h3><p>$\underbrace{□□□□}_{sorted}\overbrace{□}^{key}□□□□□□$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> key = a[i];</div><div class="line">        <span class="keyword">int</span> j;</div><div class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;<span class="number">0</span>&amp;&amp;a[j]&gt;key;j--)</div><div class="line">        &#123;</div><div class="line">            a[j+<span class="number">1</span>] = a[j];</div><div class="line">        &#125;</div><div class="line">        a[j+<span class="number">1</span>] = key;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;《Introduction-to-Algorithms》-Notes&quot;&gt;&lt;a href=&quot;#《Introduction-to-Algorithms》-Notes&quot; class=&quot;headerlink&quot; title=&quot;《Introduction to Algorit
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="lovemefan.win/tags/Algorithm/"/>
    
      <category term="算法" scheme="lovemefan.win/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《统计学习方法》笔记(一)</title>
    <link href="lovemefan.win/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E7%AC%94%E8%AE%B0/index.html%20%202020/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>lovemefan.win/post/机器学习/统计学习方法笔记/index.html  2020/04/02/机器学习/统计学习方法笔记/</id>
    <published>2020-04-02T07:27:21.000Z</published>
    <updated>2020-04-17T13:32:28.809Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="统计学习"><a href="#统计学习" class="headerlink" title="统计学习"></a>统计学习</h1><h2 id="1-1-统计学习"><a href="#1-1-统计学习" class="headerlink" title="1.1 统计学习"></a>1.1 统计学习</h2><p>​        统计学习(statistical learning)是关于计算机数据构建概率统计模型并运用模型对数据进行预测与分析的一门学科的一门学科,统计学习也成为统计机器学习(statistical machine learning)</p><h3 id="1-统计学习的特点"><a href="#1-统计学习的特点" class="headerlink" title="1. 统计学习的特点:"></a>1. 统计学习的特点:</h3><ul><li>建立在计算机及网络上</li><li>以数据为研究对象,是数据驱动的学科</li><li>目的是对数据进行预测与分析</li><li>以方法为中心统计学习方法构建模型并应用模型进行预测与分析</li><li>统计学习是概率论,统计学,信息论,计算理论,最优化理论级计算机科学等多个领域的交叉学科,并在发展中逐步形成度独自的理论体系与方法论<h3 id="2-统计学习的方法"><a href="#2-统计学习的方法" class="headerlink" title="2. 统计学习的方法"></a>2. 统计学习的方法</h3>​        统计学习基于数据构建概率统计模型从而对数据进行预测和分析.<br>​        统计学习由 <code>监督学习(superevised learning)</code>,<code>无监督学习(unsupervised learning)</code>,和<code>加强学习(reinforcement learning)</code>等组成.<br>​        统计学习方法包括模型的假设空间,模型选择的准则以及模型学习的算法.<br>​        统称为统计学习方法三要素,简称<code>模型(model)</code>,<code>策略(strategy)</code>,<code>算法(algorithm)</code></li></ul><h2 id="1-2-统计学习方法分类"><a href="#1-2-统计学习方法分类" class="headerlink" title="1.2 统计学习方法分类"></a>1.2 统计学习方法分类</h2><h3 id="1-2-1-基本分类"><a href="#1-2-1-基本分类" class="headerlink" title="1.2.1 基本分类"></a>1.2.1 基本分类</h3><p>​        统计学习方法一般包括监督学习,无监督学习,强化学习.有时候包括半监督学习,<br>主动学习</p><h4 id="1-监督学习"><a href="#1-监督学习" class="headerlink" title="1.监督学习"></a>1.监督学习</h4><p>​        <code>监督学习(supervised learning)</code>是指从标注数据中学习预测模型的机器学习问题.<br>​        监督学习的本质是学习输入到输出的映射的统计规律</p><h5 id="输入空间-特征空间和输出空间"><a href="#输入空间-特征空间和输出空间" class="headerlink" title="输入空间,特征空间和输出空间"></a>输入空间,特征空间和输出空间</h5><p>​        在监督学习中,将输入与输出所有可能取值的集合分别称为输入空间(input space)与输出空间(output space).输入与输出空间可以是有限元素的集合,也可以是整个欧式空间.输入空间与输出空间可以是同一空间,也可以是不同的空间,但通常输出空间远远小于输入空间<br>​        每个具体的输入是一个实例(instance) ，通常由特征向量 (feature vector) 表示。<br>​        这时，所有特征向量存在的空间称为特征空间 (feature space) 。特征空间的每一维对应于一个特征。有时假设输入空间与特征空间为相同的空间，对它们不予区分:有时假设输入空间与特征空间为不同的空间，将实例从输入空间映射到特征空间。模型实际上都是定义在特征空间上的.</p><h4 id="2-无监督学习"><a href="#2-无监督学习" class="headerlink" title="2.无监督学习"></a>2.无监督学习</h4><p>​        <code>无监督学习(unsupervised learning)</code>是指从无标注数据中许学习预测模型的机器学习问题.无标注数据是自然得到的数据,预测模型表示数据的类别,转换或者概率.无监督学习的本质是是学习数据中的统计规律或潜在结构.</p><p>​        同理,模型的输入和输出为输入空间和输出空间,他们都可以是有限和无限的.<br>​        每一个输入是一个实例,由特征向量表示,,每一个输出是对输入的分析结果,由输入的类别,转换或概率.模型可以实现对数据的聚类,降维,概率估计.</p><h4 id="3-强化学习"><a href="#3-强化学习" class="headerlink" title="3.强化学习"></a>3.强化学习</h4><p>​         <code>强化学习(reinforcement learning)</code>是指智能系统在与环境的连续互动中许学习最优行为策略的机器学习问题.假设智能系统与环境的互动基于<code>马尔可夫决策过程</code></p><p>​        强化学习的马尔可夫决策过程是状态,奖励,动作序列上的随机过程,以后五元组<s,a,p,r,γ>组成</s,a,p,r,γ></p><ul><li>S 是有限状态(state)的集合</li><li>A 是有限动作(action)的集合</li><li><p>P是状态转移概率(transition probability) 函数:</p><script type="math/tex; mode=display">P(s'|s,a)=P(s_t = s'|s_t=s,a_t=a)</script></li><li><p>r是奖励函数(reward function): </p><script type="math/tex; mode=display">r(s,a)=E(r_{t+1}|s_t=s,a_t=a)</script></li><li><p>γ是衰减系数(discount factor) $γ∈[0,1]$</p><p>未完待续…</p></li></ul><h4 id="4-半监督学习与主动学习"><a href="#4-半监督学习与主动学习" class="headerlink" title="4.半监督学习与主动学习"></a>4.半监督学习与主动学习</h4><p>​        半监督学习(semi-supervised learning)是指利用标注数据和未标注数据学习预测模型的机器学习问题。通常有少量标注数据、大量未标注数据，因为标注数据的构建往往需要人工，成本较高未标注数据的收集不需太多成本。半监督学习旨在利用未标注数据中的信息，辅助标注数据，进行监督学习，以较低的成本达到较好的学习效果。</p><p>​        主动学习(active learning)是指机器不断主动给出实例让教师进行标注，然后利用标注数据学习预测模型的机器学习问题。通常的监督学习使用给定的标注数据，往 往是随机得到的 ，可以看作是”被动学习” 主动学习的目标是找出对学习最有帮助的实例让教师标注，以较小的标注代价，达到较好的学习效果。</p><h3 id="1-2-2-按模型分类"><a href="#1-2-2-按模型分类" class="headerlink" title="1.2.2 按模型分类"></a>1.2.2 按模型分类</h3><h4 id="1-概率模型与非概率模型"><a href="#1-概率模型与非概率模型" class="headerlink" title="1.概率模型与非概率模型"></a>1.概率模型与非概率模型</h4><p>​        统计学习的模型可以分为概率模型(probabilistic model)和非概率模型(non-probabilistic model)或者确定性模型。</p><p>​        在监督学习中，概率模型取条件概率分布形式$P(y|x)$,非概率模型取函数形式$y=f(x)$,其中x是输入,y是输出。概率模型是生成模型，非概率模型是判别模型。</p><p>​        在无监督学习中,概率模型取条件概率分布形式$P(z|x)$或$P(x|z)$,非概率模型取函数形式$z=g(x)$,其中x是输入,z是输出</p><p>​        所以，概率模型和非概率模型的区别不在于输入与输出之间的映射关系，而在于模型的内在结构。 </p><h4 id="2-线性模型和非线性模型"><a href="#2-线性模型和非线性模型" class="headerlink" title="2.线性模型和非线性模型"></a>2.线性模型和非线性模型</h4><p>​        统计学习中,特别是非概率模型,可以和非为线性模型(linear model)和非线性模型(non-linear model).如果函数$y=f(x)$或$z=g(x)$是线性函数,则称模型是线性模型,否者称为非线性模型.</p><p>深度学习(deep learning)是复杂神经网络的学习,也是复杂的非线性模型的学习</p><h4 id="3-参数化模型与非参数化模型"><a href="#3-参数化模型与非参数化模型" class="headerlink" title="3.参数化模型与非参数化模型"></a>3.参数化模型与非参数化模型</h4><p>​        统计学习模型又可以分为参数化模型(parametric model)和非参数化模型(non-parametric model)。参数化模型假设模型参数的维度固定，模型可以由有限维参数完全刻画:非参数化模型假设模型参数的维度不固定或者说无穷大，随着训练数据量的增加而不断增大。</p><h3 id="1-2-3-按算法分类"><a href="#1-2-3-按算法分类" class="headerlink" title="1.2.3 按算法分类"></a>1.2.3 按算法分类</h3><p>​        统计学习根据算法,可以分为在线学习 (online learning) 与批量学习 (batch learning) 。在线学习是指每次接受个样本，进行预测，之后学习模型，并不断重复该操作的机器学习。与之对应，批量学习 次接受所有数据，学习模型，之后进行预测。有些实际应用的场景要求学习必须是在线的。比如，数据依次达到无法存储，系统需要及时做出处理数据规模很大，不可能次处理所有数据;数据的模式随时间 动态变化，需要算法快速适应新的模式(不满足独立同分布假设)。 在线学习可以是监督学习，也可以是无监督学习，强化学习本身就拥有在线学习 的特点。以下只考虑在线的监督学习。</p><h3 id="1-2-3-按技巧分类"><a href="#1-2-3-按技巧分类" class="headerlink" title="1.2.3 按技巧分类"></a>1.2.3 按技巧分类</h3><ol><li><p>贝叶斯学习</p><p>​        贝叶斯学习(Bayesian learning),又称贝叶斯推理(Bayesian inference)(<a href="https://www.bilibili.com/video/BV1R7411a76r" target="_blank" rel="external">B站推荐</a>),是统计学习,机器学习钟重要的方法.其主要发想法是在概率模型中的学习和推理中,利用贝叶斯定理,计算在给定数据条件下模型的条件概率,级后验概率,并应用这个原理进行模型的估计,以及对数据的预测.将模型,未观测要素级其参数用变量表示,使用模型的先验分布是贝叶斯学习的特点.贝叶斯学习中页使用基本概率公式</p><p>假设随机变量 表示数据，随机变量$\theta$表示模型参数。根据贝叶斯定理，可以用以下公式计算后验概率 $P(\theta|D)$:</p><p>$p(\theta|D)=\frac{P(\theta)P(D|\theta)}{p(D)}$</p><p>其中 $P(D)$ 是先验概率,$ P(D|\theta) $是似然函数。</p><p>$P(x|D)=\int P(x|\theta,D)P(\theta|D)d\theta$</p><p>x为样本</p><p>​        贝叶斯估计与极大似然估计在思想上有很大的不同，代表着统计学中频率学派和贝叶斯学派对统计的不同认识。其实，可以简单地把两者联系起来，假设先验分布是均匀分布，取后验概率最大，就能从贝叶斯估计得到极大似然估计。</p></li><li><p>核方法</p><p>​        核方法 (kernel method) 是使用核函数表示和学习非线性模型的一种机器学习方法，可以用于监督学习和无监督学习。有一些线性模型的学习方法基于相似度计算， 更具体地，向量内积计算。核方法可以把它们扩展到非线性模型的学习，使其应用范 围更广泛。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;统计学习&quot;&gt;&lt;a href=&quot;#统计学习&quot; class=&quot;headerlink&quot; title=&quot;统计学习&quot;&gt;&lt;/a&gt;统计学习&lt;/h1&gt;&lt;h2 id=&quot;1-1-统计学习&quot;&gt;&lt;a href=&quot;#1-1-统计学习&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="机器学习" scheme="lovemefan.win/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>豆瓣接口分析</title>
    <link href="lovemefan.win/post/%E5%85%B6%E4%BB%96/%E8%B1%86%E7%93%A3%E6%8E%A5%E5%8F%A3%E5%88%86%E6%9E%90/index.html%20%202020/03/26/%E5%85%B6%E4%BB%96/%E8%B1%86%E7%93%A3%E6%8E%A5%E5%8F%A3%E5%88%86%E6%9E%90/"/>
    <id>lovemefan.win/post/其他/豆瓣接口分析/index.html  2020/03/26/其他/豆瓣接口分析/</id>
    <published>2020-03-26T06:22:29.000Z</published>
    <updated>2020-04-03T16:07:38.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="豆瓣接口"><a href="#豆瓣接口" class="headerlink" title="豆瓣接口"></a>豆瓣接口</h1><h2 id="1-豆瓣接口-sig签名算法"><a href="#1-豆瓣接口-sig签名算法" class="headerlink" title="1.豆瓣接口_sig签名算法"></a>1.豆瓣接口_sig签名算法</h2><p>豆瓣签名使用HMAC-SHA1的签名算法<br><code>HMAC-SHA1(key,data)</code>包含两个参数<br>key为密钥,data为加密信息<br>豆瓣接口的key值可以通过抓豆瓣登录的数据包,获得client_secret的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://$host$url?os_rom=android&amp;apikey=0dad那个你懂得&amp;channel=Douban&amp;_sig=$sig&amp;_ts=$ts&quot;</div></pre></td></tr></table></figure><p>分为登录状态和非登录状态</p><h3 id="非登录状态"><a href="#非登录状态" class="headerlink" title="非登录状态"></a>非登录状态</h3><p>非登录状态下的<code>data=&quot;GET&amp;&quot; + URLEncoder.encode(url) + &quot;&amp;&quot; + ts</code>  </p><p>ts为当前时间戳,url按照上面提示的格式截取<br>如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET frodo.douban.com/api/v2/subject_collection/movie_hot_gaia/items?start=0&amp;count=20&amp;udid=a4684a67c5db66436da276d582163766f927d703&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=Douban</div></pre></td></tr></table></figure><p>其中<code>data = GET&amp;%2Fapi%2Fv2%2Fskynet%2Fnew_playlists&amp;1585718766</code></p><h3 id="登录状态"><a href="#登录状态" class="headerlink" title="登录状态"></a>登录状态</h3><p>登录状态下http的头部会多出一个参数,如下:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Authorization</span>: Bearer 9931b7883f68a4dbcb952698be39ee91</div></pre></td></tr></table></figure><p>登录状态下的<code>data=&quot;GET&amp;&quot; + URLEncoder.encode(url) + &quot;&amp;9931b7883f68a4dbcb952698be39ee91&quot;  +&quot;&amp;&quot; + ts</code>  </p><p>此时的<code>data = GET&amp;%2Fapi%2Fv2%2Fskynet%2Fnew_playlists&amp;9931b7883f68a4dbcb952698be39ee91&amp;1585718766</code></p><p>算法js代码实现在TZVideo项目中<a href="https://github.com/lovemefan/TZVideo/blob/master/utils/util.js" target="_blank" rel="external">点这里</a></p><p>==注意哦==<code>header一定要加User-agent</code></p><p>最后得到的加密签名为<code>encodeURIComponent(HMAC-SHA1(key,sigString))</code></p><h2 id="2-豆瓣热播电影"><a href="#2-豆瓣热播电影" class="headerlink" title="2.豆瓣热播电影"></a>2.豆瓣热播电影</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GET frodo.douban.com/api/v2/subject_collection/movie_hot_gaia/items?start=0&amp;count=20&amp;udid=a4684a67c5db66436da276d582163766f927d703&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=Douban</div><div class="line"></div><div class="line">HTTP/1.1</div><div class="line">User-Agent: Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/6.32.0(180) Android/22 product/R11 vendor/OPPO model/OPPO R11  rom/android  network/wifi  platform/mobile com.douban.frodo/6.32.0(180) Rexxar/1.2.151  platform/mobile 1.2.151</div><div class="line">Host: frodo.douban.com</div><div class="line">Connection: Keep-Alive</div><div class="line">Accept-Encoding: gzip</div></pre></td></tr></table></figure><h2 id="2-豆瓣热门电视剧"><a href="#2-豆瓣热门电视剧" class="headerlink" title="2.豆瓣热门电视剧"></a>2.豆瓣热门电视剧</h2><h3 id="热门-综合"><a href="#热门-综合" class="headerlink" title="热门 综合"></a>热门 综合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET frodo.douban.com/api/v2/subject_collection/tv_hot/items?start=0&amp;count=20&amp;udid=a4684a67c5db66436da276d582163766f927d703&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=Douban</div><div class="line">HTTP/1.1</div><div class="line">User-Agent: Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/6.32.0(180) Android/22 product/R11 vendor/OPPO model/OPPO R11  rom/android  network/wifi  platform/mobile com.douban.frodo/6.32.0(180) Rexxar/1.2.151  platform/mobile 1.2.151</div><div class="line">Host: frodo.douban.com</div><div class="line">Connection: Keep-Alive</div><div class="line">Accept-Encoding: gzip</div></pre></td></tr></table></figure><h3 id="热门-国产剧"><a href="#热门-国产剧" class="headerlink" title="热门 国产剧"></a>热门 国产剧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET frodo.douban.com/api/v2/subject_collection/tv_domestic/items?start=0&amp;count=20&amp;udid=a4684a67c5db66436da276d582163766f927d703&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=Douban</div><div class="line">HTTP/1.1</div><div class="line">User-Agent: Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/6.32.0(180) Android/22 product/R11 vendor/OPPO model/OPPO R11  rom/android  network/wifi  platform/mobile com.douban.frodo/6.32.0(180) Rexxar/1.2.151  platform/mobile 1.2.151</div><div class="line">Host: frodo.douban.com</div><div class="line">Connection: Keep-Alive</div><div class="line">Accept-Encoding: gzip</div></pre></td></tr></table></figure><h3 id="热门-美剧"><a href="#热门-美剧" class="headerlink" title="热门 美剧"></a>热门 美剧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET frodo.douban.com/api/v2/subject_collection/tv_american/items?start=0&amp;count=20&amp;udid=a4684a67c5db66436da276d582163766f927d703&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=Douban</div><div class="line">HTTP/1.1</div><div class="line">User-Agent: Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/6.32.0(180) Android/22 product/R11 vendor/OPPO model/OPPO R11  rom/android  network/wifi  platform/mobile com.douban.frodo/6.32.0(180) Rexxar/1.2.151  platform/mobile 1.2.151</div><div class="line">Host: frodo.douban.com</div><div class="line">Connection: Keep-Alive</div><div class="line">Accept-Encoding: gzip</div></pre></td></tr></table></figure><h3 id="热门-日剧"><a href="#热门-日剧" class="headerlink" title="热门 日剧"></a>热门 日剧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET frodo.douban.com/api/v2/subject_collection/tv_japanese/items?start=0&amp;count=20&amp;udid=a4684a67c5db66436da276d582163766f927d703&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=Douban</div><div class="line">HTTP/1.1</div><div class="line">User-Agent: Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/6.32.0(180) Android/22 product/R11 vendor/OPPO model/OPPO R11  rom/android  network/wifi  platform/mobile com.douban.frodo/6.32.0(180) Rexxar/1.2.151  platform/mobile 1.2.151</div><div class="line">Host: frodo.douban.com</div><div class="line">Connection: Keep-Alive</div><div class="line">Accept-Encoding: gzip</div></pre></td></tr></table></figure><h3 id="热门-韩剧"><a href="#热门-韩剧" class="headerlink" title="热门 韩剧"></a>热门 韩剧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET frodo.douban.com/api/v2/subject_collection/tv_korean/items?start=0&amp;count=20&amp;udid=a4684a67c5db66436da276d582163766f927d703&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=Douban</div><div class="line">HTTP/1.1</div><div class="line">User-Agent: Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/6.32.0(180) Android/22 product/R11 vendor/OPPO model/OPPO R11  rom/android  network/wifi  platform/mobile com.douban.frodo/6.32.0(180) Rexxar/1.2.151  platform/mobile 1.2.151</div><div class="line">Host: frodo.douban.com</div><div class="line">Connection: Keep-Alive</div><div class="line">Accept-Encoding: gzip</div></pre></td></tr></table></figure><h3 id="热门-动漫"><a href="#热门-动漫" class="headerlink" title="热门 动漫"></a>热门 动漫</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET frodo.douban.com/api/v2/subject_collection/tv_animation/items?start=0&amp;count=20&amp;udid=a4684a67c5db66436da276d582163766f927d703&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=Douban</div><div class="line">HTTP/1.1</div><div class="line">User-Agent: Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/6.32.0(180) Android/22 product/R11 vendor/OPPO model/OPPO R11  rom/android  network/wifi  platform/mobile com.douban.frodo/6.32.0(180) Rexxar/1.2.151  platform/mobile 1.2.151</div><div class="line">Host: frodo.douban.com</div><div class="line">Connection: Keep-Alive</div><div class="line">Accept-Encoding: gzip</div></pre></td></tr></table></figure><h2 id="33"><a href="#33" class="headerlink" title="33."></a>33.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET /api/v2/subject_collection/show_foreign/items?start=0&amp;count=20&amp;udid=a4684a67c5db66436da276d582163766f927d703&amp;rom=android&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;s=rexxar_new&amp;channel=Douban&amp;device_id=a4684a67c5db66436da276d582163766f927d703&amp;os_rom=android&amp;apple=49db722f1873da2794d1345d984636c2&amp;icecream=f19780352d2a7036d216fad19e8ebee3&amp;mooncake=65316193bbe4cb682856b448f447a4a7&amp;sugar=46007&amp;loc_id=118215&amp;_sig=peOCRQGOKWrxlsy9%2F%2BYSq6RPmFk%3D&amp;_ts=1585240659 HTTP/1.1</div><div class="line">User-Agent: Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/6.32.0(180) Android/22 product/R11 vendor/OPPO model/OPPO R11  rom/android  network/wifi  platform/mobile com.douban.frodo/6.32.0(180) Rexxar/1.2.151  platform/mobile 1.2.151</div><div class="line">Host: frodo.douban.com</div><div class="line">Connection: Keep-Alive</div><div class="line">Accept-Encoding: gzip</div></pre></td></tr></table></figure><h2 id="4-片单接口"><a href="#4-片单接口" class="headerlink" title="4.片单接口"></a>4.片单接口</h2><p><strong>getc参数只需要保留start,count,category,apikey,channel</strong></p><h3 id="1-豆瓣片单-全部"><a href="#1-豆瓣片单-全部" class="headerlink" title="1. 豆瓣片单 全部"></a>1. 豆瓣片单 全部</h3><p><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200326/230347863.png" alt="mark"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET frodo.douban.com/api/v2/skynet/new_playlists?start=0&amp;count=20&amp;category=all&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=Douban</div><div class="line">HTTP/1.1</div><div class="line">User-Agent: Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/6.32.0(180) Android/22 product/R11 vendor/OPPO model/OPPO R11  rom/android  network/wifi  platform/mobile com.douban.frodo/6.32.0(180) Rexxar/1.2.151  platform/mobile 1.2.151</div><div class="line">Host: frodo.douban.com</div><div class="line">Connection: Keep-Alive</div><div class="line">Accept-Encoding: gzip</div></pre></td></tr></table></figure></p><h3 id="2-豆瓣片单-精选"><a href="#2-豆瓣片单-精选" class="headerlink" title="2. 豆瓣片单 精选"></a>2. 豆瓣片单 精选</h3><p><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200326/230414200.png" alt="mark"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET frodo.douban.com/api/v2/skynet/new_playlists?start=0&amp;count=20&amp;category=selected&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=Douban</div><div class="line"> HTTP/1.1</div><div class="line">User-Agent: Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/6.32.0(180) Android/22 product/R11 vendor/OPPO model/OPPO R11  rom/android  network/wifi  platform/mobile com.douban.frodo/6.32.0(180) Rexxar/1.2.151  platform/mobile 1.2.151</div><div class="line">Host: frodo.douban.com</div><div class="line">Connection: Keep-Alive</div><div class="line">Accept-Encoding: gzip</div></pre></td></tr></table></figure></p><h3 id="3-豆瓣片单-经典"><a href="#3-豆瓣片单-经典" class="headerlink" title="3 .豆瓣片单 经典"></a>3 .豆瓣片单 经典</h3><p><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200326/230530634.png" alt="mark"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET frodo.douban.com/api/v2/skynet/new_playlists?start=0&amp;count=20&amp;category=classical&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=Douban</div><div class="line">HTTP/1.1</div><div class="line">User-Agent: Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/6.32.0(180) Android/22 product/R11 vendor/OPPO model/OPPO R11  rom/android  network/wifi  platform/mobile com.douban.frodo/6.32.0(180) Rexxar/1.2.151  platform/mobile 1.2.151</div><div class="line">Host: frodo.douban.com</div><div class="line">Connection: Keep-Alive</div><div class="line">Accept-Encoding: gzip</div></pre></td></tr></table></figure></p><h3 id="4-豆瓣片单-豆瓣片单"><a href="#4-豆瓣片单-豆瓣片单" class="headerlink" title="4 .豆瓣片单 豆瓣片单"></a>4 .豆瓣片单 豆瓣片单</h3><p><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200326/233628279.png" alt="mark"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET frodo.douban.com/api/v2/skynet/new_playlists?start=0&amp;count=20&amp;category=official&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=Douban</div><div class="line">HTTP/1.1</div><div class="line">User-Agent: Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/6.32.0(180) Android/22 product/R11 vendor/OPPO model/OPPO R11  rom/android  network/wifi  platform/mobile com.douban.frodo/6.32.0(180) Rexxar/1.2.151  platform/mobile 1.2.151</div><div class="line">Host: frodo.douban.com</div><div class="line">Connection: Keep-Alive</div><div class="line">Accept-Encoding: gzip</div></pre></td></tr></table></figure></p><h3 id="5-豆瓣片单-高分"><a href="#5-豆瓣片单-高分" class="headerlink" title="5 .豆瓣片单 高分"></a>5 .豆瓣片单 高分</h3><p><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200326/233628279.png" alt="mark"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET frodo.douban.com/api/v2/skynet/new_playlists?start=0&amp;count=20&amp;category=official&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=Douban</div><div class="line">HTTP/1.1</div><div class="line">User-Agent: Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/6.32.0(180) Android/22 product/R11 vendor/OPPO model/OPPO R11  rom/android  network/wifi  platform/mobile com.douban.frodo/6.32.0(180) Rexxar/1.2.151  platform/mobile 1.2.151</div><div class="line">Host: frodo.douban.com</div><div class="line">Connection: Keep-Alive</div><div class="line">Accept-Encoding: gzip</div></pre></td></tr></table></figure></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>根据category的参返回不同的片单,category的 参数为下面key值<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">categories": [</div><div class="line">    &#123;</div><div class="line">      "items": [</div><div class="line">        &#123;</div><div class="line">          "key": "all",</div><div class="line">          "title": "全部"</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          "key": "official",</div><div class="line">          "title": "豆瓣片单"</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          "key": "selected",</div><div class="line">          "title": "精选"</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          "key": "classical",</div><div class="line">          "title": "经典"</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          "key": "prize",</div><div class="line">          "title": "获奖"</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          "key": "high_score",</div><div class="line">          "title": "高分"</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          "key": "movie_list",</div><div class="line">          "title": "榜单"</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          "key": "dark_horse",</div><div class="line">          "title": "冷门佳片"</div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      "name": "全部"</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      "items": [</div><div class="line">        &#123;</div><div class="line">          "key": "chinese",</div><div class="line">          "title": "华语"</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          "key": "western",</div><div class="line">          "title": "欧美"</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          "key": "japanese",</div><div class="line">          "title": "日本"</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          "key": "korea",</div><div class="line">          "title": "韩国"</div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      "name": "地域"</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      "items": [</div><div class="line">        &#123;</div><div class="line">          "key": "comedy",</div><div class="line">          "title": "喜剧"</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          "key": "love",</div><div class="line">          "title": "爱情"</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          "key": "science_fiction",</div><div class="line">          "title": "科幻"</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          "key": "cartoon",</div><div class="line">          "title": "动画"</div><div class="line">        &#125;,</div><div class="line">        ]</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;豆瓣接口&quot;&gt;&lt;a href=&quot;#豆瓣接口&quot; class=&quot;headerlink&quot; title=&quot;豆瓣接口&quot;&gt;&lt;/a&gt;豆瓣接口&lt;/h1&gt;&lt;h2 id=&quot;1-豆瓣接口-sig签名算法&quot;&gt;&lt;a href=&quot;#1-豆瓣接口-sig签名算法&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="接口分析" scheme="lovemefan.win/tags/%E6%8E%A5%E5%8F%A3%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序项目</title>
    <link href="lovemefan.win/post/%E5%85%B6%E4%BB%96/tita%E6%90%9C%E7%B4%A2%E7%A0%94%E7%A9%B6/index.html%20%202020/03/25/%E5%85%B6%E4%BB%96/tita%E6%90%9C%E7%B4%A2%E7%A0%94%E7%A9%B6/"/>
    <id>lovemefan.win/post/其他/tita搜索研究/index.html  2020/03/25/其他/tita搜索研究/</id>
    <published>2020-03-25T14:16:11.000Z</published>
    <updated>2020-03-25T14:10:48.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TZVideo"><a href="#TZVideo" class="headerlink" title="TZVideo"></a>TZVideo</h1><p>追剧小助手微信小程序</p><h2 id="tita-逆向分析-源码半成品失败"><a href="#tita-逆向分析-源码半成品失败" class="headerlink" title="tita 逆向分析(源码半成品失败)"></a>tita 逆向分析(源码半成品<code>失败</code>)</h2><p>tita搜索很聪明,阻止了网络代理和vpn代理,无法抓包,在模拟器中安装会闪退,安全措施极好.<br>安装包使用360加固加壳,传统脱壳方式已经无效,这里使用frida</p><h3 id="FRIDA"><a href="#FRIDA" class="headerlink" title="FRIDA"></a>FRIDA</h3><blockquote><p>Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers.</p></blockquote><p>Frida是一个跨平台的注入工具<br>根据cpu下载对应<a href="https://github.com/frida/frida/releases" target="_blank" rel="external">版本</a><br>使用adb工具,安卓手机打开开发者模式,push到的/data/lcoal/tmp 目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push frida-server /data/<span class="built_in">local</span>/tmp/</div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb forward tcp:27042 tcp:27042</div><div class="line">adb forward tcp:27043 tcp:27043</div></pre></td></tr></table></figure><h3 id="遇到的一些错误"><a href="#遇到的一些错误" class="headerlink" title="遇到的一些错误"></a>遇到的一些错误</h3><ol><li>手机运行frida-server会导致手机重启,根据<a href="https://github.com/frida/frida/issues/871" target="_blank" rel="external">github issue871</a>的反馈,问题可能是是联发科cpu,以及华为海思麒麟的cpu导致,所以12.5.0以上的frida-server会导致手机重启,高通cpu的手机不会出现此问题.本人联发科处理器使用12.4.8版本有效</li><li>下载了<code>frida-server-12.4.8-android-arm64.xz</code>,报错如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">k_shell/0:9812: ./frida-server: not executable: magic 7F45</div></pre></td></tr></table></figure></li></ol><p><code>frida-server下错版本了</code>,根据cpu版本自行下载</p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h2 id="tita其他分析"><a href="#tita其他分析" class="headerlink" title="tita其他分析"></a>tita其他分析</h2><p>tita搜索已非人工检索方式,根据或选择的关键词自动发送到第三方目标网站返回索引链接,所有资源都由第三方网站提供</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>原理来自:<a href="https://www.jianshu.com/p/1d0f1e9b59f9" target="_blank" rel="external">自定义网站搜索教程</a></p><h3 id="1、基本原理与参数"><a href="#1、基本原理与参数" class="headerlink" title="1、基本原理与参数"></a>1、基本原理与参数</h3><blockquote><p>自定义站源规则，说白了就是APP直接请求所填的搜索网址，得到返回的 html 后，根据对应标签来定位，获取指定内容包括： text（也就是文字），href（详情链接）。<br><br>一般格式  class/id/tag.属性名@tag.标签名.定位数字@获取内容的类型</p></blockquote><h3 id="2、网站案例说明"><a href="#2、网站案例说明" class="headerlink" title="2、网站案例说明"></a>2、网站案例说明</h3><p>我们拿 <a href="https://53ys.cc/" target="_blank" rel="external">https://53ys.cc/</a> (网站域名更改了，之前是<a href="https://wsys.tv" target="_blank" rel="external">https://wsys.tv</a>) 这个网站来说一下具体的规则。</p><blockquote><p>浏览器打来网站后，F12或者右键选择“检查”选项以后，就打开了开发者模式，再刷新下网页，让网站显示手机适配模式。点击网站中的搜索功能，这里我们以搜索“钢铁”为例，搜索地址为 <a href="https://53ys.cc/vodsearch/so.html?wd=钢铁" target="_blank" rel="external">https://53ys.cc/vodsearch/so.html?wd=钢铁</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"></div><div class="line">        "name":"无双电影", #网站名称：无双电影</div><div class="line"></div><div class="line">        "serialNumber":"1", #搜索优先级：1 </div><div class="line"></div><div class="line">        "reqType":"get", #请求类型：get</div><div class="line"></div><div class="line">        "reqCharset":"utf-8", #请求编码：utf-8</div><div class="line"></div><div class="line">        "htmlCharset":"utf-8", #网页编码：utf-8</div><div class="line"></div><div class="line">        "userAgent":"", #HttpUserAgent</div><div class="line"></div><div class="line">        "baseUrl":"https://53ys.cc", #网站URL：https://53ys.cc</div><div class="line"></div><div class="line">        "searchUrl":"https://53ys.cc/vodsearch/so.html?wd=&#123;search&#125;", #搜索地址：https://53ys.cc/vodsearch/so.html?wd=&#123;search&#125; </div><div class="line"></div><div class="line">        "ruleResultList":"class.fed-part-layout fed-back-whits@tag.dl", 搜索结果列表规则：class.fed-part-layout fed-back-whits@tag.dl（说明：此项就是来获得搜索结果列表。上面规则的意思就是 class="fed-part-layout fed-back-whits"的这个里面的tag标签为dl的内容。这样就会得到下面html返回的共10个内容。）</div><div class="line"></div><div class="line">        "ruleResultLink":"tag.h1@tag.a@href", #搜索结果列表每项地址规则：tag.h1.0@tag.a.0@href（说明：此项就是来获得每一项结果的具体url地址。上面规则的意思就是 第一个 h1 标签中的第一个 a 标签中的href内容，也就是“/detail/178525.html”。当防止出现相同标签的时候，可以加数字定位，第一个是 0，第二个是 1，第三个是 2，以此类推，默认不写的话就是所有的。）</div><div class="line"></div><div class="line">        "resultLinkPrefix":"https://53ys.cc",#搜索结果列表每项地址前缀：https://53ys.cc（说明：前面我们已经获取了每项结果的地址为“/detail/178525.html”，可以看出是个不完整的url，所以这一项的意思就是给他添加前缀补充完整，即“https://53ys.cc/detail/178525.html”）</div><div class="line"></div><div class="line">        "ruleResultTitle":"tag.h1@tag.a@text" # 搜索结果列表每项标题：tag.h1@tag.a@text（说明：每项结果的标题，规则的意思就是 第一个 h1 标签中的第一个 a 标签中的text内容，因为是第一个也就是0，默认可以不填写，获得文本内容即“钢铁苍穹2：即临种族”）</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">`</div></pre></td></tr></table></figure></p></blockquote><h2 id="功能设计与预期"><a href="#功能设计与预期" class="headerlink" title="功能设计与预期"></a>功能设计与预期</h2><h3 id="主要原理"><a href="#主要原理" class="headerlink" title="主要原理"></a>主要原理</h3><p>首先通过豆瓣查询影片信息,然后通过相关接口和爬虫提取直链</p><h3 id="UI及功能参考"><a href="#UI及功能参考" class="headerlink" title="UI及功能参考"></a>UI及功能参考</h3><h4 id="1-片单"><a href="#1-片单" class="headerlink" title="1.片单"></a>1.片单</h4><p><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200313/190031699.jpg" alt="mark"></p><h4 id="2-热剧-电影-综艺-动漫-来自于豆瓣"><a href="#2-热剧-电影-综艺-动漫-来自于豆瓣" class="headerlink" title="2.热剧,电影,综艺,动漫(来自于豆瓣)"></a>2.热剧,电影,综艺,动漫(<a href="https://movie.douban.com/tv/#!type=tv&amp;tag=%E6%97%A5%E6%9C%AC%E5%8A%A8%E7%94%BB&amp;sort=recommend&amp;page_limit=20&amp;page_start=0" target="_blank" rel="external">来自于豆瓣</a>)</h4><p><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200313/185944414.jpg" alt="mark"></p><h4 id="3-分类-来自豆瓣"><a href="#3-分类-来自豆瓣" class="headerlink" title="3.分类(来自豆瓣)"></a>3.分类(来自<a href="https://movie.douban.com/tag/#/" target="_blank" rel="external">豆瓣</a>)</h4><p><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200313/190056042.jpg" alt="mark"></p><h4 id="4-更新-来自数据库中的newlinkjson字段返回的内容"><a href="#4-更新-来自数据库中的newlinkjson字段返回的内容" class="headerlink" title="4.更新(来自数据库中的newlinkjson字段返回的内容)"></a>4.更新(来自数据库中的newlinkjson字段返回的内容)</h4><p><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200313/190118090.jpg" alt="mark"></p><h3 id="功能预期"><a href="#功能预期" class="headerlink" title="功能预期"></a>功能预期</h3><p><strong>五大模块</strong></p><p>-[ ] 首页 有片单,热剧,电影,综艺,动漫推荐 (豆瓣获取)</p><p>-[ ] 分类功能</p><p>-[ ] 搜索 先搜豆瓣,后搜资源</p><p>-[ ] 我的   收藏(保存收藏)和历史记录</p><p>-[ ] 资源更新信息  从ok资源网爬取 </p><h2 id="资源网站收集"><a href="#资源网站收集" class="headerlink" title="资源网站收集"></a>资源网站收集</h2><ol><li><a href="https://www.okzyw.com" target="_blank" rel="external">ok资源网</a></li><li><a href="http://www.kuyunzyw.tv" target="_blank" rel="external">酷云资源网</a></li><li><a href="http://www.zuidazy2.net" target="_blank" rel="external">最大资源网</a></li><li><a href="http://www.kuyunzyw.tv" target="_blank" rel="external">看看资源网</a></li><li><a href="http://www.666zy.com" target="_blank" rel="external">哈酷资源网</a></li><li><a href="http://www.765zy.com" target="_blank" rel="external">605资源网</a></li><li><a href="http://www.zuixinzy.cc" target="_blank" rel="external">最新资源网</a></li><li><a href="https://www.subo8988.com" target="_blank" rel="external">速播资源网</a></li><li><a href="http://www.baiwanzy.com" target="_blank" rel="external">百万资源网</a></li><li><a href="http://www.zy.itono.cn" target="_blank" rel="external">云站资源网</a></li><li><a href="http://www.123ku.com" target="_blank" rel="external">酷云资源网</a></li><li><a href="https://www.jikzy.com" target="_blank" rel="external">极快资源网</a></li><li><a href="http://www.gaoqingzy.com" target="_blank" rel="external">高清资源网</a></li><li><a href="http://www.wolongzy.net" target="_blank" rel="external">卧龙资源网</a></li><li><a href="http://265zy.cc" target="_blank" rel="external">超快资源网</a></li><li><a href="http://www.mahuazy.net" target="_blank" rel="external">麻花资源网</a></li><li><a href="http://www.yongjiuzy1.com" target="_blank" rel="external">永久资源网</a></li><li><a href="http://www.158zyz.com" target="_blank" rel="external">158资源网</a></li></ol><h3 id="资源数据库相关字段说明"><a href="#资源数据库相关字段说明" class="headerlink" title="资源数据库相关字段说明"></a>资源数据库相关字段说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&quot;baseurl&quot;  网站URL</div><div class="line">&quot;blocktypejson&quot;, 屏蔽类型</div><div class="line">&quot;code&quot;,  网站简称</div><div class="line">&quot;htmlcharset&quot;, html编码</div><div class="line">&quot;useragent&quot;, 用户代理,反爬</div><div class="line">&quot;searchurl&quot;, 搜索url</div><div class="line">&quot;name&quot;, 网站名称</div><div class="line">&quot;newlinkjson&quot;, 最近更新url链接,与newnamejson对应</div><div class="line">&quot;newnamejson&quot;, 网站总类,与newlinkjson对应,如[&quot;全部&quot;,&quot;动漫片&quot;,&quot;欧美剧&quot;,&quot;大陆剧&quot;,&quot;日本剧&quot;,&quot;韩国剧&quot;,&quot;香港剧&quot;,&quot;台湾剧&quot;,&quot;综艺片&quot;]</div><div class="line">&quot;reqcharset&quot;, request 编码</div><div class="line">&quot;reqtype&quot;, 请求类型,get,post</div><div class="line">&quot;resultlinkprefix&quot;,搜索结果列表每项地址前缀</div><div class="line">&quot;rulechannelgroups&quot;,</div><div class="line">&quot;ruledetailcover&quot;,</div><div class="line">&quot;ruledetailcoverprefix&quot;,</div><div class="line">&quot;ruledetailintro&quot;,</div><div class="line">&quot;ruleepdownlist&quot;, 搜索结果列表下载链接</div><div class="line">&quot;ruleeplink&quot;, </div><div class="line">&quot;ruleeplinkprefix&quot;,</div><div class="line">&quot;ruleeplistm3u8&quot;, 搜索结果列表每项标题</div><div class="line">&quot;ruleeplistshare&quot;,</div><div class="line">&quot;ruleeptitle&quot;, 搜索结果列表每项标题</div><div class="line">&quot;ruleresultarea&quot;,</div><div class="line">&quot;ruleresultlink&quot;,</div><div class="line">&quot;ruleresultlist&quot;,</div><div class="line">&quot;ruleresulttime&quot;,</div><div class="line">&quot;ruleresulttitle&quot;,</div><div class="line">&quot;ruleresulttype&quot;</div><div class="line">,&quot;isdisable&quot;,</div><div class="line">&quot;serialnumber&quot;,</div><div class="line">&quot;iscustom&quot;,</div><div class="line">&quot;version&quot;,</div><div class="line">&quot;searchpostdata&quot;,</div><div class="line">&quot;needsniff&quot;,</div><div class="line">&quot;sorttime&quot;,</div><div class="line">&quot;doublecheckm3u8link&quot;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TZVideo&quot;&gt;&lt;a href=&quot;#TZVideo&quot; class=&quot;headerlink&quot; title=&quot;TZVideo&quot;&gt;&lt;/a&gt;TZVideo&lt;/h1&gt;&lt;p&gt;追剧小助手微信小程序&lt;/p&gt;
&lt;h2 id=&quot;tita-逆向分析-源码半成品失败&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何将家里的旧手机改造成Linux服务器</title>
    <link href="lovemefan.win/post/%E5%85%B6%E4%BB%96/%E5%A6%82%E4%BD%95%E5%B0%86%E5%AE%B6%E9%87%8C%E7%9A%84%E6%97%A7%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/index.html%20%202020/03/24/%E5%85%B6%E4%BB%96/%E5%A6%82%E4%BD%95%E5%B0%86%E5%AE%B6%E9%87%8C%E7%9A%84%E6%97%A7%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>lovemefan.win/post/其他/如何将家里的旧手机改造成Linux服务器/index.html  2020/03/24/其他/如何将家里的旧手机改造成Linux服务器/</id>
    <published>2020-03-24T12:48:19.000Z</published>
    <updated>2020-03-24T16:14:32.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何将家里的旧手机改造成Linux服务器"><a href="#如何将家里的旧手机改造成Linux服务器" class="headerlink" title="如何将家里的旧手机改造成Linux服务器"></a>如何将家里的旧手机改造成Linux服务器</h1><h1 id="准备一部旧手机"><a href="#准备一部旧手机" class="headerlink" title="准备一部旧手机"></a>准备一部旧手机</h1><p>在家无意发现一部变砖的旧安卓手机,便想将其利用起来.智能手机在今天性能过剩的时代下,即使是五六年前的手机仍然比起现今相当多的单片机性能要强.并且一部手机上有丰富的传感器,不利用可惜了.经过双清,刷机,ROOT后,手机焕然一新.<br>我的手机配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">device : Coolpad 8297  (酷派大神F1)</div><div class="line">Android : 4.4.2</div><div class="line">Architecture : armv71</div><div class="line">Memory : 1969MB</div></pre></td></tr></table></figure></p><h1 id="手机安装linuxdeploy"><a href="#手机安装linuxdeploy" class="headerlink" title="手机安装linuxdeploy"></a>手机安装linuxdeploy</h1><blockquote><p>This application is open source software for quick and easy installation of the operating system (OS) GNU/Linux on your Android device. </p></blockquote><p>linuxdeploy的<a href="https://github.com/meefik/linuxdeploy" target="_blank" rel="external">github主页</a></p><p>由于安卓版本太低,最新版的linuxdeploy会闪退<br>请到<a href="https://github.com/meefik/linuxdeploy/releases" target="_blank" rel="external">这里</a>下载之前的版本 本人使用的是2.3.1-247<br>安装好之后随意安装linux发行版本,非常容易,安装完后请打开ssh选项以便远程登录.本人选择安装了Ubuntu 18 LTS<br><img src="https://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200324/Screenshot_2020-03-24-21-20-24.png" alt="linuxdeploy"></p><h1 id="局域网连接ssh"><a href="#局域网连接ssh" class="headerlink" title="局域网连接ssh"></a>局域网连接ssh</h1><p>打开xshell,输入局域网IP,使用账号密码登录<br><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200324/213622853.png" alt="mark"><br>登录成功<br><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200324/213758162.png" alt="mark"></p><p>事情还没有到此为止呢,既然要做服务器,那如何将其暴露给外网呢?</p><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><p>首先市面上有一些主流的内网穿透的服务<br><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200325/001322154.png" alt="mark"></p><p>natapp算是比较好的选择,而且买免费,但是域名和端口会强制更换,临时使用还是可以考虑的.<br>不过最近薅到一个免费的谷歌云,综合以上决定自建内网穿透服务器</p><h2 id="搭建nps"><a href="#搭建nps" class="headerlink" title="搭建nps"></a>搭建nps</h2><p><a href="https://github.com/ehang-io/nps" target="_blank" rel="external">nps github地址</a></p><blockquote><p>nps是一款轻量级、高性能、功能强大的内网穿透代理服务器。支持tcp、udp、socks5、http等几乎所有流量转发，可用来访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析、内网socks5代理等等……，并带有功能强大的web管理端。</p></blockquote><p><code>nps很强大,还能在软路由上安装</code></p><h3 id="安装服务端"><a href="#安装服务端" class="headerlink" title="安装服务端"></a>安装服务端</h3><p>同样在<a href="https://github.com/ehang-io/nps/releases" target="_blank" rel="external">这里</a>下载对应版本<br>服务器端使用<code>linux_386_server.tar.gz</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo wget https://github.com/ehang-io/nps/releases/download/v0.26.5/linux_386_server.tar.gz</div><div class="line">sudo tar -xvf  linux_386_server.tar.gz</div><div class="line">sudo ./nps install</div><div class="line"></div><div class="line">sudo nps <span class="comment">#前台运行并打印日志,测试使用</span></div><div class="line">sudo nps start  <span class="comment">#后台运行不打印日志</span></div></pre></td></tr></table></figure><p> 启动好服务后要及时开通端口,谷歌云有一个坑,不仅要设置防火墙规则,还要将防火墙规则添加到服务器实例中</p><h3 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h3><p>先用局域网ssh连上手机<br>因为手机的处理器是armv7所以客户端使用<code>linux_arm_v7_client.tar.gz</code><br>`<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo wget https://github.com/ehang-io/nps/releases/download/v0.26.5/linux_arm_v7_client.tar.gz</div><div class="line">sudo tar -xvf  linux_arm_v7_client.tar.gz</div></pre></td></tr></table></figure></p><p> 安装前需要修改配置文件<br> 在当前<code>conf/npc.conf</code>中<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> server_addr=34.XXXX.143:8024 # 服务器端bridge端口</div><div class="line"></div><div class="line"> [tcp]</div><div class="line">mode=tcp</div><div class="line">target_addr=127.0.0.1:22</div><div class="line">server_port=10000 </div><div class="line"># 将手机的22端口映射为了服务器的34.XXXX.143的10000端口</div></pre></td></tr></table></figure></p><p> <strong>安装</strong><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo ./npc install</div><div class="line"></div><div class="line"> sudo npc <span class="comment">#前台运行并打印日志,测试使用</span></div><div class="line"> sudo npc start  <span class="comment">#后台运行不打印日志</span></div></pre></td></tr></table></figure></p><p> 返回服务端管理界面34.XXXX.143:8080 ,发现有服务已经注册<br> <img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200324/234013159.png" alt="mark"></p><h2 id="远程ssh连接手机"><a href="#远程ssh连接手机" class="headerlink" title="远程ssh连接手机"></a>远程ssh连接手机</h2><p> 已经手机22端口映射到代理服务器1000端口上,使用ssh来连接服务器的10000端口<br> <img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200324/234323272.png" alt="mark"></p><p> 连接成功<br> <img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200324/234749818.png" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何将家里的旧手机改造成Linux服务器&quot;&gt;&lt;a href=&quot;#如何将家里的旧手机改造成Linux服务器&quot; class=&quot;headerlink&quot; title=&quot;如何将家里的旧手机改造成Linux服务器&quot;&gt;&lt;/a&gt;如何将家里的旧手机改造成Linux服务器&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="内网穿透" scheme="lovemefan.win/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>利用ARP欺骗实现手机抓包</title>
    <link href="lovemefan.win/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%88%A9%E7%94%A8ARP%E6%AC%BA%E9%AA%97%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85/index.html%20%202020/03/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%88%A9%E7%94%A8ARP%E6%AC%BA%E9%AA%97%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85/"/>
    <id>lovemefan.win/post/计算机网络/利用ARP欺骗实现手机抓包/index.html  2020/03/17/计算机网络/利用ARP欺骗实现手机抓包/</id>
    <published>2020-03-17T05:02:02.000Z</published>
    <updated>2020-03-17T13:59:57.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用ARP欺骗实现手机抓包"><a href="#利用ARP欺骗实现手机抓包" class="headerlink" title="利用ARP欺骗实现手机抓包"></a>利用ARP欺骗实现手机抓包</h1><h2 id="什么是ARP协议"><a href="#什么是ARP协议" class="headerlink" title="什么是ARP协议"></a>什么是ARP协议</h2><blockquote><p>地址解析协议（英语：Address Resolution Protocol，缩写：ARP）是一个通过解析网络层地址来找寻数据链路层地址的网络传输协议，它在IPv4中极其重要。ARP最初在1982年的RFC 826（征求意见稿）[1]中提出并纳入互联网标准 STD 37. ARP 也可能指是在多数操作系统中管理其相关地址的一个进程。<br>ARP是通过网络地址来定位MAC地址。 ARP已经在很多网路层和数据链接层之间得以实现，包括IPv4，Chaosnet, DECnet和Xerox PARC Universal Packet（PUP）使用IEEE 802标准, 光纤分布式数据接口, X.25, 帧中继和异步传输模式（ATM），IEEE 802.3和IEEE 802.11标准上IPv4占了多数流量。<br>在IPv6中邻居发现协议（NDP）用于代替地址解析协议（ARP）。<br>—维基百科</p></blockquote><h2 id="ARP基本功能"><a href="#ARP基本功能" class="headerlink" title="ARP基本功能"></a>ARP基本功能</h2><p>在以太网协议中规定，同一局域网中的一台主机要和另一台主机进行直接通信，必须要知道目标主机的MAC地址。而在TCP/IP协议中，网络层和传输层只关心目标主机的IP地址。这就导致在以太网中使用IP协议时，数据链路层的以太网协议接到上层IP协议提供的数据中，只包含目的主机的IP地址。于是需要一种方法，根据目的主机的IP地址，获得其MAC地址。这就是ARP协议要做的事情。所谓地址解析（address resolution）就是主机在发送帧前将目标IP地址转换成目标MAC地址的过程。</p><p><strong>正常情况wireshark所抓的包</strong><br><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200317/211723375.png" alt="mark"></p><h2 id="什么是ARP欺骗"><a href="#什么是ARP欺骗" class="headerlink" title="什么是ARP欺骗"></a>什么是ARP欺骗</h2><blockquote><p>ARP欺骗（英语：ARP spoofing），又称ARP毒化（ARP poisoning，网上上多译为ARP病毒）或ARP攻击，是针对以太网地址解析协议（ARP）的一种攻击技术，通过欺骗局域网内访问者PC的网关MAC地址，使访问者PC错以为攻击者更改后的MAC地址是网关的MAC，导致网络不通。此种攻击可让攻击者获取局域网上的数据包甚至可篡改数据包，且可让网上上特定计算机或所有计算机无法正常连线。—维基百科</p></blockquote><h2 id="ARP欺骗原理"><a href="#ARP欺骗原理" class="headerlink" title="ARP欺骗原理"></a>ARP欺骗原理</h2><p>ARP欺骗的运作原理是由攻击者发送假的ARP数据包到网络上，尤其是送到网关上。其目的是要让送至特定的IP地址的流量被错误送到攻击者所取代的地方。因此攻击者可将这些流量另行转送到真正的网关（被动式数据包嗅探，passive sniffing）或是篡改后再转送（中间人攻击，man-in-the-middle attack）。攻击者亦可将ARP数据包导到不存在的MAC地址以达到拒绝服务攻击的效果。</p><p>简而言之,就是通过发送ARP协议欺骗路由器说我是手机,欺骗手机说我是路由器,将手机发送的包原封不动发给路由器,再把路由器的包发给手机,使流量通过电脑而不察觉。</p><p><strong>使用arp欺骗所抓的ARP数据包</strong><br><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200317/214344384.png" alt="mark"></p><p><strong>原理图</strong><br><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200317/214515124.png" alt="mark"></p><h2 id="APR欺骗工具"><a href="#APR欺骗工具" class="headerlink" title="APR欺骗工具"></a>APR欺骗工具</h2><p>本人使用的环境是Ubuntu19,linux中arpspoof是一个很好用的ARP欺骗工具,安装页非常方便,一句命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install dsniff</div></pre></td></tr></table></figure></p><p>以下命令参数后的第一个IP地址是要欺骗的主机，第二个IP地址是你要伪装成的主机，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arpspoof -i eth1 -t 192.168.31.1    192.168.31.220</div><div class="line">arpspoof -i eth1 -t 192.168.31.220  192.168.1.1</div></pre></td></tr></table></figure></p><p>在使用arpspoof时一定要保证数据包的转发否者相当于ARP攻击使目标终端断网，使用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</div></pre></td></tr></table></figure></p><p>接下来就可以使用wireshark来抓包了<br>本人测试使用fiddler和charles都无法抓到任何包,只能使用wireshark</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;利用ARP欺骗实现手机抓包&quot;&gt;&lt;a href=&quot;#利用ARP欺骗实现手机抓包&quot; class=&quot;headerlink&quot; title=&quot;利用ARP欺骗实现手机抓包&quot;&gt;&lt;/a&gt;利用ARP欺骗实现手机抓包&lt;/h1&gt;&lt;h2 id=&quot;什么是ARP协议&quot;&gt;&lt;a href=&quot;#什
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="lovemefan.win/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>利用pytorch优化2D函数实例</title>
    <link href="lovemefan.win/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8pytorch%E4%BC%98%E5%8C%962D%E5%87%BD%E6%95%B0%E5%AE%9E%E4%BE%8B/index.html%20%202020/03/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8pytorch%E4%BC%98%E5%8C%962D%E5%87%BD%E6%95%B0%E5%AE%9E%E4%BE%8B/"/>
    <id>lovemefan.win/post/机器学习/利用pytorch优化2D函数实例/index.html  2020/03/07/机器学习/利用pytorch优化2D函数实例/</id>
    <published>2020-03-07T13:23:00.000Z</published>
    <updated>2020-03-07T13:32:31.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用pytorch优化2D函数实例"><a href="#利用pytorch优化2D函数实例" class="headerlink" title="利用pytorch优化2D函数实例"></a>利用pytorch优化2D函数实例</h1><h2 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h2><p><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200307/213103779.png" alt="mark"><br><img src="https://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200307/myplot.png" alt="函数图像"><br>函数图像如上图所示,我们可以大致发现在图像上约有四个极值点</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>利用随机梯度下降计算局部极小值<br>再通过改变坐标的初始值来追踪坐标的优化路径</p><p>初始值为(0,0)<br><img src="https://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200307/3dfunction.png" alt="函数图像及下降方向"><br>初始值为(-1,0)<br><img src="https://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200307/3dfunction2.png" alt="函数图像及下降方向"><br>初始值为(-1,-1)<br><img src="https://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200307/3dfunction3.png" alt="函数图像及下降方向"><br>初始值为(1,-2)<br><img src="https://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200307/3dfunction4.png" alt="函数图像及下降方向"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ol><li><p>打开pycharm中的设置,去勾选show plots in tool window,这样打开matplotlib画出的图像就可以交互里</p><p><img src="https://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200307/2020-03-07%2020-41-31%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="pycharm设置"></p></li><li><p>如下<br><img src="https://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200307/2020-03-07%2020-42-52%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="运行图"></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"><span class="comment"># @Time    : 2020/3/7 下午5:37</span></div><div class="line"><span class="comment"># @Author  : lovemefan</span></div><div class="line"><span class="comment"># @File    : 2dfuction.py</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> torch</div><div class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> (x**<span class="number">2</span> + y - <span class="number">11</span>)**<span class="number">2</span> + (x + y**<span class="number">2</span> - <span class="number">7</span>)**<span class="number">2</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 随机梯度下降</span></div><div class="line"></div><div class="line">    <span class="comment"># 记录坐标优化路径</span></div><div class="line">    coordinate =[]</div><div class="line">    <span class="comment"># 初始化坐标</span></div><div class="line">    x = torch.tensor([<span class="number">0.</span>, <span class="number">0.</span>], requires_grad=<span class="keyword">True</span>)</div><div class="line">    print(<span class="string">"x shape:"</span>,x.shape)</div><div class="line">    optimizer = torch.optim.Adam([x], lr=<span class="number">1e-3</span>)</div><div class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">20000</span>):</div><div class="line"></div><div class="line">        pred = function(x[<span class="number">0</span>], x[<span class="number">1</span>])</div><div class="line">        <span class="comment"># 梯度清零</span></div><div class="line">        optimizer.zero_grad()</div><div class="line">        <span class="comment"># pred 求梯度,</span></div><div class="line">        pred.backward()</div><div class="line">        <span class="comment"># 更新x坐标</span></div><div class="line">        optimizer.step()</div><div class="line">        <span class="keyword">if</span> step % <span class="number">100</span> == <span class="number">0</span>:</div><div class="line">            coordinate.append([x.tolist()[<span class="number">0</span>], x.tolist()[<span class="number">1</span>], pred.item()])</div><div class="line">        <span class="keyword">if</span> step % <span class="number">2000</span> == <span class="number">0</span>:</div><div class="line">            print(<span class="string">"step &#123;&#125; : x=&#123;&#125;, f(x)=&#123;&#125;"</span>.format(step, x.tolist(), pred.item()))</div><div class="line"></div><div class="line">    <span class="comment"># 绘图</span></div><div class="line">    x = np.arange(<span class="number">-6</span>, <span class="number">6</span>, <span class="number">0.1</span>)</div><div class="line">    y = np.arange(<span class="number">-6</span>, <span class="number">6</span>, <span class="number">0.1</span>)</div><div class="line">    print(<span class="string">"x,y range:"</span>, x.shape, y.shape)</div><div class="line">    <span class="comment"># 生成二维网格</span></div><div class="line">    X, Y = np.meshgrid(x, y)</div><div class="line">    print(<span class="string">"X, Y maps:"</span>, X.shape, Y.shape)</div><div class="line">    Z = function(X, Y)</div><div class="line"></div><div class="line">    fig = plt.figure(<span class="string">"himmelblau"</span>)</div><div class="line">    ax = fig.gca(projection=<span class="string">'3d'</span>)</div><div class="line">    ax.plot_surface(X, Y, Z, color=<span class="string">'blue'</span>, alpha=<span class="number">0.8</span>)</div><div class="line">    ax.view_init(<span class="number">60</span>, <span class="number">-30</span>)</div><div class="line">    coordinate = np.array(coordinate)</div><div class="line">    x = coordinate[:, <span class="number">0</span>]</div><div class="line">    y = coordinate[:, <span class="number">1</span>]</div><div class="line">    z = coordinate[:, <span class="number">2</span>]</div><div class="line"></div><div class="line">    <span class="comment"># 绘制散点图</span></div><div class="line">    ax.scatter(x, y, z, s=<span class="number">5</span>, c=<span class="string">'red'</span>)</div><div class="line">    <span class="comment"># 添加坐标轴(顺序是Z, Y, X)</span></div><div class="line">    ax.set_zlabel(<span class="string">'Z'</span>, fontdict=&#123;<span class="string">'size'</span>: <span class="number">15</span>, <span class="string">'color'</span>: <span class="string">'red'</span>&#125;)</div><div class="line">    ax.set_ylabel(<span class="string">'Y'</span>, fontdict=&#123;<span class="string">'size'</span>: <span class="number">15</span>, <span class="string">'color'</span>: <span class="string">'red'</span>&#125;)</div><div class="line">    ax.set_xlabel(<span class="string">'X'</span>, fontdict=&#123;<span class="string">'size'</span>: <span class="number">15</span>, <span class="string">'color'</span>: <span class="string">'red'</span>&#125;)</div><div class="line">    plt.savefig(<span class="string">"3dfunction4.png"</span>)</div><div class="line">    plt.show()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;利用pytorch优化2D函数实例&quot;&gt;&lt;a href=&quot;#利用pytorch优化2D函数实例&quot; class=&quot;headerlink&quot; title=&quot;利用pytorch优化2D函数实例&quot;&gt;&lt;/a&gt;利用pytorch优化2D函数实例&lt;/h1&gt;&lt;h2 id=&quot;目标函数&quot;
      
    
    </summary>
    
    
      <category term="机器学习" scheme="lovemefan.win/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu19 下使用pip安装好包以后，在Pycharm中依然无法使用的解决办法</title>
    <link href="lovemefan.win/post/%E5%85%B6%E4%BB%96/Ubuntu19%20%E4%B8%8B%E4%BD%BF%E7%94%A8pip%E5%AE%89%E8%A3%85%E5%A5%BD%E5%8C%85%E4%BB%A5%E5%90%8E%EF%BC%8C%E5%9C%A8Pycharm%E4%B8%AD%E4%BE%9D%E7%84%B6%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/index.html%20%202020/03/06/%E5%85%B6%E4%BB%96/Ubuntu19%20%E4%B8%8B%E4%BD%BF%E7%94%A8pip%E5%AE%89%E8%A3%85%E5%A5%BD%E5%8C%85%E4%BB%A5%E5%90%8E%EF%BC%8C%E5%9C%A8Pycharm%E4%B8%AD%E4%BE%9D%E7%84%B6%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>lovemefan.win/post/其他/Ubuntu19 下使用pip安装好包以后，在Pycharm中依然无法使用的解决办法/index.html  2020/03/06/其他/Ubuntu19 下使用pip安装好包以后，在Pycharm中依然无法使用的解决办法/</id>
    <published>2020-03-06T07:01:03.000Z</published>
    <updated>2020-03-06T07:01:34.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu19-下使用pip安装好包以后，在Pycharm中依然无法使用的解决办法"><a href="#Ubuntu19-下使用pip安装好包以后，在Pycharm中依然无法使用的解决办法" class="headerlink" title="Ubuntu19 下使用pip安装好包以后，在Pycharm中依然无法使用的解决办法"></a>Ubuntu19 下使用pip安装好包以后，在Pycharm中依然无法使用的解决办法</h1><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>由于pip安装的包与系统下python interpreter 下的包目录不一致,导致pycharm中无法识别相关包,</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li><p>如下找不到pip安装的包<br><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200306/142844861.png" alt="mark"></p></li><li><p>使用pip show 或者pip install查看包安装路径<br><img src="https://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200306/143614507.png" alt="mark"></p></li><li><p>在pycharm中查看python library所在路径<br><img src="http://pan-lovemefan.oss-cn-shenzhen.aliyuncs.com/blog/20200306/145200393.png" alt="mark"></p></li><li>将pip安装路径的包复制到python library中,这样ubunut下pycharm就能识别出包了</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu19-下使用pip安装好包以后，在Pycharm中依然无法使用的解决办法&quot;&gt;&lt;a href=&quot;#Ubuntu19-下使用pip安装好包以后，在Pycharm中依然无法使用的解决办法&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu19
      
    
    </summary>
    
    
      <category term="其他" scheme="lovemefan.win/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="lovemefan.win/post/408/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.html%20%202019/12/05/408/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>lovemefan.win/post/408/数据结构/index.html  2019/12/05/408/数据结构/</id>
    <published>2019-12-05T15:37:00.000Z</published>
    <updated>2019-12-05T07:55:10.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="第一章：数据结构的"><a href="#第一章：数据结构的" class="headerlink" title="第一章：数据结构的"></a>第一章：数据结构的</h2><p>基本概念</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>在任何问题中，数据元素都不是孤立存在的，而是在它们之间存在着某种关系，这种数据元素相互之间的关系称为结构（Structure）。数据结构是相互之间存在一种或多种特定关系的数据元素的集合。数据结构包括三方面的内容：逻辑结构、存储结构和数据的运算。数据的逻辑结构和存储结构是密不可分的两个方面，一个算法的设计取决于所选定的逻辑结构，而算法的实现依赖于所采用的存储结构。<h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3></li><li>逻辑结构是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。它与数据的存储无关，是独立于计算机的</li><li>数据的逻辑结构分为线性结构和非线性结构<ul><li>集合 结构中的数据元素之间除了“同属于一个集合”的关系外，别无其他关系。 类似于数学上的集合</li><li>线性结构 结构中的数据元素之间只存在一对一的关系。比如排队</li><li>树形结构 结构中的数据元素之间存在一对多的关系。比如家族族谱</li><li>图状结构或网状结构 结构中的数据元素之间存在多对多的关系。 比如地图<h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3></li></ul></li><li>存储结构是指数据结构在计算机中的表示（又称映像），也称物理结构。它包括数据元素的表示和关系的表示。数据的存储结构是逻辑结构用计算机语言的实现，它依赖于计算机语言。数据的存储结构主要有：顺序存储、链式存储、索引存储和散列存储。<ul><li>顺序存储：存储的物理位置相邻。（p.s. 物理位置即信息在计算机中的位置。）</li><li>链接存储：存储的物理位置未必相邻，通过记录相邻元素的物理位置来找到相邻元素。</li><li>索引存储：类似于目录，以后可以联系操作系统的文件系统章节来理解。</li><li>散列存储：通过关键字直接计算出元素的物理地址（以后详解）。<h3 id="算法的五个特征"><a href="#算法的五个特征" class="headerlink" title="算法的五个特征"></a>算法的五个特征</h3></li></ul></li><li>1，有穷性：有限步之后结束</li><li>2，确定性：不存在二义性，即没有歧义</li><li>3，可行性：比如受限于计算机的计算能力，有些算法虽然理论上可行，但实际上无法完成。</li><li>4，输入：能被计算机处理的各种类型数据，如数字，音频，图像等等。</li><li>5，输出：一至多个程序输出结果。<h3 id="算法的复杂度"><a href="#算法的复杂度" class="headerlink" title="算法的复杂度"></a>算法的复杂度</h3></li><li>时间复杂度：<ul><li>• 它用来衡量算法随着问题规模增大，算法执行时间增长的快慢；</li><li>• 是问题规模的函数：T(n)是时间规模函数 时间复杂度主要分析T(n)的数量级</li><li>• T(n)=O(f(n)) f(n)是算法中基本运算的频度 一般我们考虑最坏情况下的时间复杂度</li></ul></li><li>空间复杂度：<ul><li>• 它用来衡量算法随着问题规模增大，算法所需空间的快慢；</li><li>• 是问题规模的函数：S(n)=O(g(n)) ；算法所需空间的增长率和g(n)的增长率相同。<h3 id="概要-复杂度计算为重点"><a href="#概要-复杂度计算为重点" class="headerlink" title="概要: 复杂度计算为重点"></a>概要: 复杂度计算为重点</h3></li></ul></li><li>常用的时间复杂度大小关系：</li><li>复杂度如何计算<ul><li>时间复杂度计算（单个循环体）<ul><li>直接关注循环体的执行次数，设为k </li></ul></li><li>时间复杂度计算（多个循环体）<ul><li>两个运算规则：乘法规则，加法规则。<h2 id="第二章：线性表"><a href="#第二章：线性表" class="headerlink" title="第二章：线性表"></a>第二章：线性表</h2><h3 id="线性表的逻辑结构"><a href="#线性表的逻辑结构" class="headerlink" title="线性表的逻辑结构"></a>线性表的逻辑结构</h3></li></ul></li></ul></li><li>定义：线性表是具有相同数据类型的n（n≥0）个数据元素的有限序列。其中n为表长。当n=0时 线性表是一个空表</li><li>特点：线性表中第一个元素称为表头元素；最后一个元素称为表尾元素。<br>除第一个元素外，每个元素有且仅有一个直接前驱。<br>除最后一个元素外，每个元素有且仅有一个直接后继。<h3 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h3></li><li>线性表的顺序存储又称为顺序表。<br>它是用一组地址连续的存储单元（比如C语言里面的数组），依次存储线性表中的数据元素，从而使得逻<br>辑上相邻的两个元素在物理位置上也相邻。</li><li>建立顺序表的三个属性:<br>1.存储空间的起始位置（数组名data）<br>2.顺序表最大存储容量（MaxSize）<br>3.顺序表当前的长度（length）</li><li>其实数组还可以动态分配空间，存储数组的空间是在程序执行过程中通过动态存储分配语句分配</li><li>总结：<ul><li>1.顺序表最主要的特点是随机访问（C语言中基于数组），即通过首地址和元素序号可以在O(1)的时间内找到指定的元素。</li><li>2.顺序表的存储密度高，每个结点只存储数据元素。无需给表中元素花费空间建立它们之间的逻辑关系（因为物理位置相邻特性决定）</li><li>3.顺序表逻辑上相邻的元素物理上也相邻，所以插入和删除操作需要移动大量元素。<h3 id="顺序表的操作"><a href="#顺序表的操作" class="headerlink" title="顺序表的操作"></a>顺序表的操作</h3></li></ul></li><li>1.插入<ul><li>算法思路：<ul><li>1.判断i的值是否正确</li><li>2.判断表长是否超过数组长度</li><li>3.从后向前到第i个位置，分别将这些元素都向后移动一位</li><li>4.将该元素插入位置i 并修改表长</li></ul></li><li>代码</li><li>分析：<ul><li>最好情况：在表尾插入（即i=n+1），元素后移语句将不执行，时间复杂度为O(1)。</li><li>最坏情况：在表头插入（即i=1），元素后移语句将执行<br>n次，时间复杂度为O(n)。</li><li>平均情况：假设pi（pi=1/(n+1) ）是在第i个位置上插入<br>一个结点的概率，则在长度为n的线性表中插入一个结<br>点时所需移动结点的平均次数为</li></ul></li></ul></li><li>2.删除<ul><li>算法思路：<ul><li>1.判断i的值是否正确</li><li>2.取删除的元素</li><li>3.将被删元素后面的所有元素都依次向前移动一位</li><li>4.修改表长</li></ul></li><li>代码</li><li>分析<ul><li>最好情况：删除表尾元素（即i=n），无须移动元素，时间复杂度为O(1)。</li><li>最坏情况：删除表头元素（即i=1），需要移动除第一个元素外的所有元素，时间复杂度为O(n)。</li><li>平均情况：假设pi(pi=1/n)是删除第i个位置上结点的概率，则在长度为n的线性表中删除一个结点时所需移动结点的平均次数为<h3 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h3></li></ul></li></ul></li><li>线性表的链式存储是指通过一组任意的存储单元来存储线性表中的数据元素。</li><li>头结点和头指针的区别？<ul><li>不管带不带头结点，头指针始终指向链表的第一个结点，而头结点是带头结点链表中的第一个结点，结点内通常不存储信息</li></ul></li><li>为什么要设置头结点？<ul><li>1.处理操作起来方便 例如：对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了</li><li>2.无论链表是否为空，其头指针是指向头结点的非空指针，因此空表和非空表的处理也就统一了。<h3 id="单链表的操作"><a href="#单链表的操作" class="headerlink" title="单链表的操作"></a>单链表的操作</h3></li></ul></li><li>1.头插法建立单链表：<ul><li>建立新的结点分配内存空间，将新结点插入到当前链表的表头</li><li>代码</li></ul></li><li>2.尾插法建立单链表：<ul><li>建立新的结点分配内存空间，将新结点插入到当前链表的表尾</li><li>代码</li></ul></li><li>3.按序号查找结点<ul><li>在单链表中从第一个结点出发，顺指针next域逐个往下搜索，直到找到第i个结点为止,否则返回最后一个结点指针域NULL。</li><li>代码</li></ul></li><li>4.按值查找结点<ul><li>从单链表第一个结点开始，由前往后依次比较表中各结点数据域的值，若某结点数据域的值等于给定值e，则返回该结点的指针；若整个单链表中没有这样的结点，则返回NULL。</li><li>代码</li></ul></li><li>5．插入<ul><li>插入操作是将值为x的新结点插入到单链表的第i个位置上。先检查插入位置的合法性，然后找到待插入位置的前驱结点，即第i−1个结点，再在其后插入新结点。</li><li>算法思路：<br>1.取指向插入位置的前驱结点的指针<br>① p=GetElem(L,i-1);<br>2.令新结点<em>s的指针域指向</em>p的后继结点<br>② s-&gt;next=p-&gt;next;<br>3.令结点<em>p的指针域指向新插入的结点</em>s<br>③ p-&gt;next=s; </li></ul></li><li>6．删除<ul><li>删除操作是将单链表的第i个结点删除。先检查删除位置的合法性，然后查找表中第i−1个结点，即被删结点的前驱结点，再将其删除。</li><li>算法思路：<br>1.取指向删除位置的前驱结点的指针 p=GetElem(L,i-1);<br>2.取指向删除位置的指针 q=p-&gt;next;<br>3.p指向结点的后继指向被删除结点的后继 p-&gt;next=q-&gt;next<br>4.释放删除结点 free(q);<h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3></li></ul></li><li>定义</li><li>1.插入：(方法不唯一)<br>① s-&gt;next=p-&gt;next;<br>② p-&gt;next-&gt;prior=s;<br>③ s-&gt;prior=p;<br>④ p-&gt;next=s;</li><li>2.删除：<br>① p-&gt;next=q-&gt;next;<br>② q-&gt;next-&gt;prior=p;<br>③ free(q);</li></ul><h3 id="循环链表-amp-amp-静态链表"><a href="#循环链表-amp-amp-静态链表" class="headerlink" title="循环链表&amp;&amp;静态链表"></a>循环链表&amp;&amp;静态链表</h3><ul><li>循环单链表：循环单链表和单链表的区别在于，表中最后一个结点的指针不是NULL，而改为指向头结点，从而整个链表形成一个环</li><li>循环双链表：类比循环单链表，循环双链表链表区别于双链表就是首尾结点构成环<ul><li>当循环双链表为空表时，其头结点的prior域和next域都等于Head。</li></ul></li><li>静态链表：静态链表是用数组来描述线性表的链式存储结构。<ul><li>数组第一个元素不存储数据，它的指针域存储第一个元素所在的数组下标。链表最后一个元素的指针域值为-1。</li><li>例子<h2 id="第三章：栈和队列"><a href="#第三章：栈和队列" class="headerlink" title="第三章：栈和队列"></a>第三章：栈和队列</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3></li></ul></li><li>栈（Stack）：只允许在一端进行插入或删除操作的线性表。</li><li>栈顶（Top）：线性表允许进行插入和删除的那一端。</li><li>栈底（Bottom）：固定的，不允许进行插入和删除的另一端</li><li>特点：<br>1.栈是受限的线性表，所以自然具有线性关<br>系。<br>2.栈中元素后进去的必然先出来，即后进先出<br>LIFO（Last In First Out）<ul><li>栈中元素后进<br>去的必然先出<br>来，即后进先<br>出LIFO（Last In<br>First Out）</li></ul></li><li>顺序栈<ul><li>栈是线性表的特例，那栈的顺序存储也是线性表顺序存储的简化。栈的顺序存储结构也叫作顺序栈。</li><li>顺序栈的操作<ul><li>1.判空：</li><li>2.进栈：</li><li>3.出栈：</li><li>4.读取栈顶元素：</li></ul></li></ul></li><li>共享栈<ul><li>顺序栈的存储空间大小需要事先开辟好，很多时候对每个栈各自单独开辟存储空间的利用率不如将各个栈的存储空间共享</li><li>示意图</li><li>共享栈的结构</li><li>共享栈的操作：（进栈）</li></ul></li><li>链式栈<ul><li>栈是线性表的特例，线性表的存储结构还有链式存储结构，所以也可以用链表的方式来实现栈。栈的链式存储结构也叫作链栈。</li><li>特点<br>1.链栈一般不存在栈满的情况。<br>2.空栈的判定条件通常定为top==NULL；</li><li>结构</li><li>链式栈的操作<ul><li>1.进栈</li><li>2.出栈<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3></li></ul></li></ul></li><li>队列是只允许在一端进行插入，而在另一端进行删除的线性表</li><li>队头（Front）：允许删除的一端，又称为队首。</li><li>队尾（Rear）： 允许插入的一端。</li><li>先进入队列的元素必然先离开队列，即先进先出（First In First Out）简称FIFO</li><li>顺序队列<ul><li>用数组来实现队列，可以将队首放在数组下标为0的位置。</li></ul></li><li>循环队列<ul><li>把数组“掰弯”，形成一个环。Rear指针到了下标为4的位置还能继续指回到下标为0的地方。这样首尾相连的顺序存储的队列就叫循环队列</li><li>入队：rear=(rear+1)%MaxSize</li><li>出队：front=(front+1)%MaxSize</li><li>循环队列的操作<ul><li>1.入队：</li><li>2.出队：</li></ul></li><li>概要: 那如何分辨队列是空还是满呢？<ul><li>方法一：设置标志位flag，当flag=0且rear等于front时为队列空，当flag=1且rear等于front时为队列满。</li><li>方法二：我们把front=rear仅作为队空的判定条件。当队列满的时候，令数组中仍然保留一个空余单元。我们认为这种情况就是队列满了。</li></ul></li></ul></li><li><p>链式队列</p><ul><li>队列的链式存储结构，其实就是线性表的单链表，只不过需要加点限制，只能表尾插入元素，表头删除元素。</li><li>为了方便操作，我们分别设置队头指针和队尾指针，队头指针指向头结点，队尾指针指向尾结点。</li><li><p>链式队列的操作</p><ul><li><p>1.入队：我们知道队列只能从队尾插入元素，队头删除元素。于是入队就是在队尾指针进行插入结点操作。链队的插入操作和单链表的插入操作是一致的。</p></li><li><p>2.出队：出队就是头结点的后继结点出队，然后将头结点的后继改为它后面的结点。</p></li></ul></li></ul></li><li>双端队列<ul><li>双端队列是指允许两端都可以进行入队和出队操作的队列<h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3></li></ul></li><li><p>1、括号匹配：假设有两种括号，一种圆的()，一种方的[]，嵌套的顺序是任意的。</p><ul><li><p>算法思想：若是左括号，入栈；若是右括号，出栈一个左括号判断是否与之匹配；检验到字符串尾，还要检查栈是否为空。只有栈空，整个字符串才是括号匹配的。</p></li><li><p>代码</p></li></ul></li><li>2、表达式求值：<ul><li></li><li>规则：从左到右扫描表达式的每个数字和符号，遇到数字就进栈，遇到符号就将处于栈顶的两个数字出栈然后跟这个符号进行运算，最后将运算结果进栈，直到最终获得结果。</li></ul></li><li>3、递归：<ul><li>要理解递归，你要先理解递归，直到你能理解递归。<br>如果在一个函数、过程或数据结构的定义中又应用了它自身，那么这个函数、过程或数据结构称为是递归定义的，简称递归。递归最重要的是递归式和递归边界。</li><li>1.阶乘<ul><li>时间复杂度：O(NlogN)</li></ul></li><li>2.斐波那契数列<ul><li>时间复杂度   O(2^n)</li></ul></li></ul></li><li>概要: 如何将中缀表达式转换成后缀表达式？<ul><li>1.按运算符优先级对所有运算符和它的运算数加括号。(原本的括号不用加)</li><li>2.把运算符移到对应的括号后。</li><li>3.去掉括号。</li><li>例子<h2 id="第四章：树"><a href="#第四章：树" class="headerlink" title="第四章：树"></a>第四章：树</h2><h3 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h3></li></ul></li><li>树是递归定义的结构</li><li>结点<ul><li>根节点：树只有一个根结点</li><li>结点的度：结点拥有的子树的数量<ul><li>度为0：叶子结点或者终端结点</li><li>度不为0：分支结点或者非终端结点<ul><li>分支结点除去根结点也称为内部结点</li></ul></li></ul></li></ul></li><li>树的度：树中所有结点的度数的最大值</li><li>结点关系<ul><li>祖先结点<ul><li>根结点到该结点的唯一路径的任意结点</li></ul></li><li>子孙结点</li><li>双亲结点<ul><li>根结点到该结点的唯一路径上最接近该结点的结点</li></ul></li><li>孩子结点</li><li>兄弟结点<ul><li>有相同双亲结点的结点</li></ul></li></ul></li><li>层次，高度，深度，树的高度<ul><li>层次：根为第一层，它的孩子为第二层，以此类推</li><li>结点的深度：根结点开始自顶向下累加</li><li>结点的高度：叶节点开始自底向上累加</li><li>树的高度（深度）：树中结点的最大层数</li></ul></li><li>树的性质<ul><li>1.树中的结点数等于所有结点的度数加1。<ul><li>证明：不难想象，除根结点以外，每个结点有且仅有一个指向它的前驱结点。也就是说每个结点和指向它的分支一一对应。<br>假设树中一共有b个分支，那么除了根结点，整个树就包含有b个结点，所以整个树的结点数就是这b个结点加上根结点，设为n，则n=b+1。而分支数b也就是所有结点的度数，证毕。</li></ul></li><li>2.度为m的树中第i层上至多有m^(i−1)个结点（i≥1）。<ul><li>证明：（数学归纳法）<br>首先考虑i=1的情况：第一层只有根结点，即一个结点，i=1带入式子满足。<br>假设第i-1层满足这个性质，第i-1层最多有m i-2个结点。<br>……… ……….<br>i-1层<br>………<br>又因为树的度为m,所以对于第i-1层的每个结点，最多<br>有m个孩子结点。所以第i层的结点数最多是i-1层的m<br>倍，所以第i层上最多有m ^(i-1)个结点。</li></ul></li><li>3.高度为h的m叉树至多有(m^h-1)/(m-1)个结点</li><li>4.具有n个结点的m叉树的最小高度为logm(n(m-1)+1) <h3 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h3></li></ul></li><li>顺序存储结构<ul><li>双亲表示法：用一组连续的存储空间存储树的结点，同时在每个结点中，用一个变量存储该结点的双亲结点在数组中的位置。</li></ul></li><li><p>链式存储结构</p><ul><li><p>孩子表示法：把每个结点的孩子结点排列起来存储成一个单链表。所以n个结点就有n个链表；<br>如果是叶子结点，那这个结点的孩子单链表就是空的；<br>然后n个单链表的的头指针又存储在一个顺序表（数组）中。</p></li><li><p>孩子兄弟表示法：顾名思义就是要存储孩子和孩子结点的兄弟，具体来说，就是设置两个指针，分别指向该结<br>点的第一个孩子结点和这个孩子结点的右兄弟结点。</p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3></li></ul></li><li>定义<ul><li>二叉树是n（n≥0）个结点的有限集合：<br>① 或者为空二叉树，即n=0。<br>② 或者由一个根结点和两个互不相交的被称为根的左子树<br>和右子树组成。左子树和右子树又分别是一棵二叉树。 <ul><li>1.每个结点最多有两棵子树。</li><li>2.左右子树有顺序</li></ul></li></ul></li><li>二叉树的五种基本形态：<ul><li>1.空树</li><li>2.只有一个根结点</li><li>3.根结点只有左子树</li><li>4.根结点只有右子树</li><li>5.根结点既有左子树又有右子树</li></ul></li><li>特殊二叉树<ul><li>1.斜树</li><li>2.满二叉树:</li><li>3.完全二叉树</li></ul></li><li>二叉树的性质<ul><li>1.非空二叉树上叶子结点数等于度为2的结点数加1</li><li>2.非空二叉树上第K层上至多有2^k−1个结点（K≥1）</li><li>3.高度为H的二叉树至多有2^H-1个结点（H≥1）</li><li>4.具有N个（N&gt;0）结点的完全二叉树的高度为 [log2(N+1)]或[log2N] +1。<h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3></li></ul></li><li>顺序存储<ul><li>二叉树的顺序存储结构就是用一组地址连续的存储单元依次自上而下、自左至右存储完全二叉树上的结点元素。</li></ul></li><li>链式存储<ul><li>二叉树每个结点最多两个孩子，所以设计二叉树的结点结构时考虑两个指针指向该结点的两个孩子。<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3></li></ul></li><li>先序遍历：<br>1）访问根结点；<br>2）先序遍历左子树；<br>3）先序遍历右子树。<ul><li>递归</li><li>非递归</li></ul></li><li>中序遍历：<br>1）中序遍历左子树；<br>2）访问根结点；<br>3）中序遍历右子树。<ul><li>递归</li><li>非递归</li></ul></li><li>后序遍历：<br>1）后序遍历左子树；<br>2）后序遍历右子树；<br>3）访问根结点。<ul><li>递归</li><li>非递归</li></ul></li><li>层次遍历：<br>若树为空，则什么都不做直接返回。<br>否则从树的第一层开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。</li></ul><h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><ul><li><p>N个结点的二叉链表，每个结点都有指向左右孩子的<br>结点指针，所以一共有2N个指针，而N个结点的二叉<br>树一共有N-1条分支，也就是说存在2N-(N-1)=N+1个空指针。比如左图二叉树中有6个结点，那么就有7个空<br>指针。</p></li><li><p>大量的空余指针能否利用起来？</p><ul><li>指向前驱和后继的指针称为线索，加上线索的二叉链表就称为线索链表，相应的二叉树就称为线索二叉树</li><li>对二叉树以某种次序遍历使其变为线索二叉树的过程就叫做线索化<h3 id="哈夫曼树和哈夫曼编码"><a href="#哈夫曼树和哈夫曼编码" class="headerlink" title="哈夫曼树和哈夫曼编码"></a>哈夫曼树和哈夫曼编码</h3></li></ul></li><li>算法的描述如下：<br>1）将这N个结点分别作为N棵仅含一个结点的二叉树，构成森林F。<br>2）构造一个新结点，并从F中选取两棵根结点权值最小的树作为新结点的左、右子树，并且将新结点的权值<br>置为左、右子树上根结点的权值之和。<br>3）从F中删除刚才选出的两棵树，同时将新得到的树加入F中。<br>4）重复步骤2）和3），直至F中只剩下一棵树为止。</li></ul><h2 id="第五章：图"><a href="#第五章：图" class="headerlink" title="第五章：图"></a>第五章：图</h2><h3 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h3><ul><li>定义：<br>树是N（N≥0）个结点的有限集合，N=0时，称为空树，这是一种特殊情况。在任意一棵非空树中应满足：<br>1）有且仅有一个特定的称为根的结点。<br>2）当N&gt;1时，其余结点可分为m（m&gt;0）个互不相交的有限集合T1，T2，…，Tm，其中每一个集合本身又是一棵树，并且称为根结点的子树。<ul><li>图G由顶点集V和边集E组成，记为G=(V，E)<ul><li>V(G)表示图G中顶点的有限非空集。<br>用|V|表示图G中顶点的个数，也称为图G的阶</li><li>E(G)表示图G中顶点之间的关系（边）集合。<br>用|E|表示图G中边的条数。</li></ul></li></ul></li><li>分类<ul><li>有向图<ul><li>有向边（弧）的有限集合<ul><li>弧是顶点的有序对</li><li><v,w></v,w></li><li>v是弧尾，w是弧头</li><li>v邻接到w或w邻接自v</li></ul></li></ul></li><li>无向图<ul><li>无向边的有限集合<ul><li>边是顶点的无序对</li><li>（v,w）</li><li>（v,w）=(w,v)</li><li>w，v互为邻接点</li></ul></li></ul></li></ul></li><li>简单图<ul><li>1.不存在顶点到自身的边</li><li>2.同一条边不重复出现</li></ul></li><li>多重图<ul><li>若图G中某两个结点之间的边数多于一条，又允许顶点通过通过同一个边和自己关联</li></ul></li><li>完全图<ul><li>无向完全图<ul><li>如果任意两个顶点之间都存在边</li></ul></li><li>有向完全图<ul><li>如果任意两个顶点之间都存在方向相反的两条弧</li></ul></li></ul></li><li>子图</li><li>连通图：图中任意两个顶点都是连通的</li><li>连通分量：无向图中的极大连通子图<ul><li>连通<ul><li>顶点A到顶点B有路径</li></ul></li><li>极大<ul><li>1.顶点足够多</li><li>2.极大连通子图包含这些依附这些顶点的所有边</li></ul></li><li>结论1:如果一个图有n个顶点，并且有小于n-1条边，则此图必是非连通图。</li><li>概要: 找连通分量的方法：<br>从选取一个顶点开始，以这个顶点作为一个子图，然后逐个添加与这个子图相连的顶点和边直到所有相连的顶点都加入该子图</li></ul></li><li>强连通：顶点V到顶点W和顶点W到顶点V都有路径</li><li>强连通图：图中任一对顶点都是强连通的</li><li>连通图的生成树：包含图中全部n个顶点，但是只有n-1条边的极小连通子图<ul><li>结论2:生成树去掉一条边则变成非连通图，加上一条边就会形成回路。</li></ul></li><li>度：以该顶点为一个端点的边数目<ul><li>无向图中顶点V的度是指依附于该顶点的边的条数，记为TD(v)</li><li>有向图中顶点V的度分为出度和入度<ul><li>入度（ID）是以顶点v为终点的有向边的数目</li><li>出度（OD）是以顶点V为起点的有向边的数目</li></ul></li></ul></li><li>简单路径和简单回路：顶点不重复出现的路径称为简单路径。对于回路，除了第一个和最后一个顶点其余顶点不重复出现的回路称为简单回路</li><li>权和网：图中每条边考研赋予一定意义的数值，这个数值叫做这条边的权，有权值得图称为带权图，也叫做网</li><li>路径和路径长度：顶点p到q之间的路径是指顶点序列怕保存的，p,a,b,c,d,……q。路径上边的数目就是路径长度</li><li>回路（环）：第一个和最后一个顶点相同的路径称为回路或者环</li><li>距离：从顶点u到v的最短路径长度。不存在路径则为无穷<h3 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h3></li><li>邻接矩阵（顺序存储）</li><li>邻接表（链式存储）<ul><li>十字链表（有向图）</li><li>邻接多重表（无向图）<h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3></li></ul></li><li>深度优先遍历<ul><li>深度优先搜索(DFS:Depth-First-Search):深度优先搜索类似于树的先序遍历算法<ul><li>空间复杂度：由于DFS是一个递归算法，递归是需要一个工作栈来辅助工作，最多需要图中所有顶点进栈，所以时间复杂度为O(|V|)</li><li>时间复杂度：1)邻接表：遍历过程的主要操作是对顶点遍历它的邻接点，由于通过访问边表来查找邻接点，所以时间复杂度为O(|E|),访问顶点时间为O(|V|),所以总的时间复杂度为O(|V|+|E|)<pre><code>        2)邻接矩阵：查找每个顶点的邻接点时间复杂度为O(|V|),对每个顶点都进行查找，所以总的时间复杂度为O(|V|2)</code></pre></li></ul></li></ul></li><li>广度优先遍历<ul><li>广度优先搜索(BFS:Breadth-First-Search):广度优先搜索类似于树的层序遍历算法<ul><li>空间复杂度：BFS需要借助一个队列，n个顶点均需要入队一次，所以最坏情况下n个顶点在队列，那么则需要O(|V|)的空间复杂度。    </li><li>时间复杂度：<br>1)邻接表：每个顶点入队一次，时间复杂度为O(|V|),对于每个顶点，搜索它的邻接点，就需要访问这个顶点的所有边，所以时间复杂度为O(|E|)。所以总的时间复杂度为O(|V|+|E|)<br>2)邻接矩阵：每个顶点入队一次，时间复杂度为O(|V|),对于每个顶点，搜索它的邻接点，需要遍历一遍矩阵的一行，所以时间复杂度为O(|V|),所以总的时间复杂度为O(|V|2)</li></ul></li></ul></li></ul><h3 id="图的应用"><a href="#图的应用" class="headerlink" title="图的应用"></a>图的应用</h3><ul><li>最小生成树<ul><li>普利姆（Prlm）<ul><li>①从图中找第一个起始顶点v0，作为生成树的第一个顶点，然后从这个顶点到其他顶点的所有边中选一条权值最小的边。然后把这条边的另一个顶点v和这条边加入到生成树中。</li><li>②对剩下的其他所有顶点，分别检查这些顶点与顶点v的权值是否比这些顶点在lowcost数组中对应的权值小，如果更小，则用较小的权值更新lowcost数组。</li><li>③从更新后的lowcost数组中继续挑选权值最小而且不在生成树中的边，然后加入到生成树。</li><li>④反复执行②③直到所有所有顶点都加入到生成树中。</li><li>概要:  <ul><li>双重循环，外层循环次数为n-1，内层并列的两个循环次数都是n。故普利姆算法时间复杂度为O(n2)<br>而且时间复杂度只和n有关，所以适合稠密图</li></ul></li></ul></li><li>克鲁斯卡尔（Kruskal）<ul><li>将图中边按照权值从小到大排列，然后从最小的边开始扫描，设置一个边的集合来记录，如果该边并入不构成回路的话，则将该边并入当前生成树。直到所有的边都检测完为止。</li><li>概要:  <ul><li></li><li></li><li>概要: 克鲁斯卡尔算法操作分为对边的权值排序部分和一个单重for循环，它们是并列关系，由于排序耗费时间大于单重循环，所以克鲁斯卡尔算法的主要时间耗费在排序上。排序和图中边的数量有关系，所以适合稀疏图</li></ul></li></ul></li></ul></li><li>最短路径<ul><li>迪杰斯特拉<ul><li>一个源点到其余顶点的最短路径<ul><li>该算法设置一个集合S记录已求得的最短路径的顶点，可用一个数组s[]来实现，初始化为0，当s[vi]=1时表示将顶点vi放入S中，初始时把源点v0放入S中。此外，在构造过程中还设置了两个辅助数组：<br>dist[]：记录了从源点v0到其他各顶点当前的最短路径长度，dist[i]初值为arcs[v0][i]。<br>path[]：path[i]表示从源点到顶点i之间的最短路径的前驱结点，在算法结束时，可根据其值追溯得到源点v0到顶点vi的最短路径。</li></ul></li></ul></li></ul></li></ul><p>假设从顶点0出发，也就是顶点0为源点，集合S最初只包含顶点0，邻接矩阵arcs表示带权有向图，arcs[i][j]表示有向边<i，j>的权值，若不存在有向边<i，j>，则arcs[i][j]为∞。Dijkstra算法的步骤如下：<br>1）初始化：集合S初始为{0}，dist[]的初始值dist[i]=arcs[0][i]，i=1，2，…，n-1。<br>2）找出dist[]中的最小值dist[j]，将顶点j加入集合S，即修改s[vj]=1。<br>3）修改从v0出发到集合V-S上任一顶点vk可达的最短路径长度：如果dist[j] + arcs[j][k]&lt; dist[k]，则令dist[k]=dist[j] + arcs[j][k]。另外更新path[k]=j(也就是顶点j加入集合之后如果有新的路径使得到顶点k路径变短的话就将到顶点k的路径长度修改成较短的)<br>4）重复2）～3）操作共n-1次，直到所有的顶点都包含在S中。</i，j></i，j></p><pre><code>* 弗洛伊德    * 所有顶点到所有顶点的最短路径        * 算法思想：</code></pre><p>递推产生一个n阶方阵序列A(−1)，A(0)，…，A(k)，…，A(n−1)<br>其中A(k)[i][j]表示从顶点vi到顶点vj的路径长度，k表示绕行第k个顶点的运算步骤。初始时，对于任意两个顶点vi和vj，若它们之间存在边，则以此边上的权值作为它们之间的最短路径长度；若它们之间不存在有向边，则以∞作为它们之间的最短路径长度。以后逐步尝试在原路径中加入顶点k(k=0，1，…，n-1)作为中间顶点。如果增加中间顶点后，得到的路径比原来的路径长度减少了，则以此新路径代替原路径</p><pre><code>* 非带权图    * 两点之间经过边数最少的路径* 带权图    * 两点之间经过的边上权值之和最小的路径</code></pre><ul><li><p>拓扑排序</p><ul><li><p>AOV</p><ul><li>如果我们把每个环节看成图中一个顶点，在这样一个有向图中，用顶点表示活动，用弧表示活动之间的优先关系，那么这样的有向图称为AOV网(Activity On Vertex)</li></ul></li><li><p>拓扑排序就是对一个有向图构造拓扑序列的过程，构造会有两种结果：<br>如果此图全部顶点都被输出了，说明它是不存在回路的AOV网；<br>如果没有输出全部顶点，则说明这个图存在回路，不是AOV网。</p></li><li>拓扑排序算法：<br>从AOV网中选择一个入度为0的顶点输出，然后删去此顶点，并删除以此顶点为弧尾的弧。重复这个步骤直到输出图中全部顶点，或者找不到入度为0的顶点为止。</li></ul></li><li><p>关键路径</p><ul><li>AOE(Activity On Edge):在一个表示工程的带权有向图中，用顶点表示事件，用有向边表示活动，用边上的权值表示活动的持续时间，这种有向图的边表示活动的网称为AOE网。</li></ul></li></ul><h2 id="第六章：查找"><a href="#第六章：查找" class="headerlink" title="第六章：查找"></a>第六章：查找</h2><h3 id="查找的基本概念和顺序查找"><a href="#查找的基本概念和顺序查找" class="headerlink" title="查找的基本概念和顺序查找"></a>查找的基本概念和顺序查找</h3><ul><li>查找定义：在数据集合中寻找满足某种条件的数据元素的过程称为查找</li><li>关键字：数据元素中某个可以以唯一标识该元素的数据项</li><li>平均查找长度（ASL：Average Search Length）:在查找的过程中，一次查找的长度是指需要比较的关键字次数，而平均查找长度则是所有查找过程中进行关键字的比较次数的平均值</li><li>顺序查找(线性查找)，主要用于在线性表中进行查找。从查找表的一端开始，顺序扫描查找表，依次将扫描到的关键字和待查找的值key进行比较。如果相等，则查找成功。如果扫描结束仍然没有发现相等的数据元素，则查找失败。<ul><li>1</li><li>2</li><li>3 </li><li>4</li><li>时间复杂度为O(n)<h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3></li></ul></li><li>算法思路：<ul><li>首先将给定值key与表中中间位置元素的关键字比较，若相等，则查找成功，返回该元素的存储位置；若不等，则所需查找的元素只能在中间元素以外的前半部分或后半部分中。然后在缩小的范围内继续进行同样的查找，如此重复直到找到为止，或者确定表中没有所需要查找的元素，则查找不成功，返回查找失败的信息。</li></ul></li><li>折半查找分析<ul><li>折半查找判定树<ul><li>对于折半查找，查找的比较次数就是从根结点到该结点经历的结点数</li><li>时间复杂度为O(logn)</li><li>概要: 具有N个（N&gt;0）结点的完全二叉树的高度为 [log2(N+1)] 或 [log2N] +1。</li></ul></li></ul></li></ul><h3 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h3><ul><li>分块查找又称为索引顺序查找</li><li>分块查找思想：<ul><li>①确定待查找值在哪个块（折半查找）</li></ul></li></ul><p>②在确定的块中查找待查找值（顺序查找）</p><ul><li>分块查找分析<ul><li>由于分块查找实际是进行两次查找，所以整个算法的平均查找长度是两次查找的平均查找长度之和。<br>即ASL分块=ASL折半+ASL顺序<ul><li><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3></li></ul></li></ul></li><li>二叉排序树(Binary Search Tree 也叫二叉搜索树)或者是一棵空树，或者是具有以下性质的二叉树<br>①若左子树不空，则左子树上所有结点的值均小于它的根结点的值。<br>②若右子树不空，则右子树上所有结点的值均大于它的根结点的值。<br>③它的左右子树也是一棵二叉排序树。</li><li>算法思想<ul><li>由于二叉排序树的特点(左子树&lt;根结点&lt;右子树),所以每次查找一个关键字，需要先和根结点进行比较：<br>如果这个关键字小于根结点的值，则再到这个根结点的左子树进行同样的比较操作一直进行下去直到找到该关键字，表示查找成功，或者是空指针，表示查找失败。<br>如果这个关键字大于根结点的值，则再到这个根结点的右子树进行同样的比较操作一直进行下去直到找到该关键字，表示查找成功，或者是空指针，表示查找失败。<ul><li>查找关键字代码<ul><li>1 </li><li>2</li></ul></li><li>插入关键字代码<ul><li>1)空树：直接插入新结点返回成功<br>2)树不空：检查是否存在关键字重复的结点：<br>①存在：返回插入失败<br>②不存在：检查根结点的值和待插入关键字值的大小关系递归插入左右子树</li><li></li></ul></li><li>构造代码<ul><li></li></ul></li><li>删除结点<ul><li>①删除的是叶子结点<ul><li>方法：直接删去该结点即可</li></ul></li><li>②删除的是仅有左子树或者右子树的结点<ul><li>方法：“子承父业”</li></ul></li><li>③删除的是左右子树都有的结点<ul><li>仿照②类型，先将一个孩子“继承父业”，另一个孩子“归顺”于这个孩子<br>方法：找到待删除结点的直接前驱或者直接后继结点，用该结点来替换待删除结点，再删除该结点。</li></ul></li></ul></li></ul></li></ul></li><li>二叉排序树分析<ul><li>查找时间复杂度是O(n)</li></ul></li><li>概要: “左小右大”<h3 id="平衡二叉树-AVL树"><a href="#平衡二叉树-AVL树" class="headerlink" title="平衡二叉树(AVL树)"></a>平衡二叉树(AVL树)</h3></li><li>平衡二叉树(AVL树)是特殊的二叉排序树，特殊的地方在于左右子树的高度之差绝对值不超过1，而且左右子树又是一棵平衡二叉树。</li><li>平衡因子<ul><li>定义结点左子树与右子树的高度差为该结点的平衡因子，则平衡二叉树结点的平衡因子的值只可能是−1、0或1。</li></ul></li><li><p>平衡调整</p><ul><li><p>平衡二叉树的建立过程和二叉排序树的建立过程是相似的，都是从一棵空树开始陆续插入结点。不同的地方在于对于平衡二叉树的建立过程中，由于插入结点可能会破坏结点的平衡性，所以需要进行平衡调整。</p><ul><li>LL调整(左孩子的左子树上插入结点导致)<ul><li>最小不平衡子树根结点的平衡因子为2&gt;0<br>它的左孩子结点平衡因子为1&gt;0<br>两个都大于0，所以直接右旋就可以调整</li><li>概要: “正则右旋”</li></ul></li><li>RR调整(右孩子的右子树上插入结点导致)<ul><li>最小不平衡子树根结点的平衡因子为-2&lt;0<br>它的右孩子结点平衡因子为-1&lt;0<br>两个都小于0，所以直接左旋就可以调整</li><li>概要: “负则左旋”</li></ul></li><li>LR调整(左孩子的右子树上插入结点导致)</li><li>RL调整(右孩子的左子树上插入结点导致)</li><li>概要: 先局部转换为LL或RR，最后进行调整</li></ul></li></ul></li><li>分析<ul><li>含有n个结点平衡二叉树的最大深度为O(log2n)，因此，平衡二叉树的平均查找长度为O(log2n) <h3 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a>B树和B+树</h3></li></ul></li><li>2-3树<ul><li>2-3树是一种多路查找树：2和3的意思就是2-3树包含两种结点<ul><li>1)2结点包含一个元素和两个孩子(或者没有孩子)。<br>①左子树包含的元素小于该结点的元素值，右子树包含的元素大于该结点的元素值<br>②2结点要不有两个孩子，要不就没有孩子，不允许有一个孩子</li><li>2)3结点包含一大一小两个元素和三个孩子(或者没有孩子)。(两个元素按大小顺序排列好)<br>①左子树包含的元素小于该结点较小的元素值，右子树包含的元素大于该结点较大的元素值，中间子树包含的元素介于这两个元素值之间。<br>②3结点要不有三个孩子，要不就没有孩子，不允许有一个或两个孩子</li><li>3)2-3树所有叶子结点都在同一层次</li></ul></li></ul></li><li>2-3-4树<ul><li>2-3-4树也是一种多路查找树：2和3和4的意思就是2-3-4树包含三种结点<ul><li>1)2结点包含一个元素和两个孩子(或者没有孩子)。<br>①左子树包含的元素小于该结点的元素值，右子树包含的元素大于该结点的元素值<br>②2结点要不有两个孩子，要不就没有孩子，不允许有一个孩子</li><li>2)3结点包含一大一小两个元素和三个孩子(或者没有孩子)。<br>①左子树包含的元素小于该结点较小的元素值，右子树包含的元素大于该结点较大的元素值，中间子树包含的元素介于这两个元素值之间。<br>②3结点要不有三个孩子，要不就没有孩子，不允许有一个或两个孩子</li><li>3)4结点包含小中大三个元素和四个孩子(或者没有孩子)。<br>①左子树包含的元素小于该结点最小的元素值，第二个子树包含大于最小的元素值小于中间元素值的元素，第三个子树包含大于中间元素值小于最大元素值的元素，右子树包含的元素大于该结点最大的元素值。<br>②4结点要不有四个孩子，要不就没有孩子，不允许有一个或两个或三个孩子</li><li>4)2-3-4树所有叶子结点都在同一层次</li></ul></li></ul></li><li><p>B树</p><ul><li>B树也是一种平衡的多路查找树，2-3树和2-3-4树都是B树的特例，我们把树中结点最大的孩子数目称为B树的阶。通常记为m。<br>一棵m阶B树或为空树，或为满足如下特性的m叉树：<ul><li>1）树中每个结点至多有m棵子树。（即至多含有m-1个关键字) (“两棵子树指针夹着一个关键字”)</li><li>2）若根结点不是终端结点，则至少有两棵子树。(至少一个关键字)</li><li>3）除根结点外的所有非叶结点至少有 ⌈m/2⌉棵子树。（即至少含有⌈m/2⌉-1个关键字）</li><li>4）所有非叶结点的结构如下：</li><li>5）所有的叶子结点出现在同一层次上，不带信息。(就像是折半查找判断树中查找失败的结点)</li></ul></li><li><p>1.B树的查找操作</p><ul><li>查找过程：①先让待查找关键字key和结点的中的关键字比较，如果等于其中某个关键字，则查找成功。<pre><code>    ②如果和所有关键字都不相等，则看key处在哪个范围内，然后去对应的指针所指向的子树中查找。        Eg:如果Key比第一个关键字K1还小，则去P0指针所指向的子树中查找，如果比最后一个关键字Kn还大，则去Pn指针所指向的子树中查找。</code></pre></li></ul></li><li><p>2.B树的插入操作</p><ul><li>分裂的方法：取这个关键字数组中的中间关键字(⌈n/2⌉)作为新的结点，然后其他关键字形成两个结点作为新结点的左右孩子。</li></ul></li><li><p>3.B树的删除操作</p><ul><li><p>B树中的删除操作与插入操作类似，但要稍微复杂些，要使得删除后的结点中的关键字个数≥⌈m/2⌉-1 ，因此将涉及结点的“合并”问题。由于删除的关键字位置不同，可以分为关键字在终端结点和不在终端结点上两种情况。</p><ul><li><p>1）如果删除的关键字在终端结点上（最底层非叶子结点）：<br>①结点内关键字数量大于⌈m/2⌉-1 ，这时删除这个关键字不会破坏B树的定义要求。所以直接删除。<br>②结点内关键字数量等于⌈m/2⌉-1 ，并且其左右兄弟结点中存在关键字数量大于⌈m/2⌉-1 的结点，则去兄弟阶段中借关键字。<br>③结点内关键字数量等于⌈m/2⌉-1 ，并且其左右兄弟结点中不存在关键字数量大于⌈m/2⌉-1 的结点，则需要进行结点合并。</p></li><li><p>2）如果删除的关键字不在终端结点上（最底层非叶子结点）：需要先转换成在终端结点上，再按照在终端结点     上的情况来分别考虑对应的方法。</p><ul><li>相邻关键字：对于不在终端结点上的关键字,它的相邻关键字是其左子树中值最大的关键字或者右子树中值最小的关键字。</li><li>第一种情况：存在关键字数量大于⌈m/2⌉-1 的左子树或者右子树，在对应子树上找到该关键字的相邻关键字，然后将相邻关键字替换待删除的关键字。</li><li>第二种情况：左右子树的关键字数量均等于⌈m/2⌉-1 ，则将这两个左右子树结点合并，然后删除待删除关键字。</li></ul></li></ul></li></ul></li></ul></li><li>B+树<ul><li>B+树是常用于数据库和操作系统的文件系统中的一种用于查找的数据结构</li><li>m阶的B+树与m阶的B树的主要差异在于：<br>1）在B+树中，具有n个关键字的结点只含有n棵子树，即每个关键字对应一棵子树；而在B树中，具有n个关键字的结点含有(n+1)棵子树。<br>2）在B+树中，每个结点（非根内部结点）关键字个数n的范围是 ⌈m/2⌉≤n≤m（根结点1≤n≤m），在B树中，每个结点（非根内部结点）关键字个数n的范围是⌈m/2⌉ -1≤n≤m-1（根结点：1≤n≤m-1）。<br>3）在B+树中，叶结点包含信息，所有非叶结点仅起到索引作用，非叶结点中的每个索引项只含有对应子树的最大关键字和指向该子树的指针，不含有该关键字对应记录的存储地址。<br>4）在B+树中，叶结点包含了全部关键字，即在非叶结点中出现的关键字也会出现在叶结点中；而在B树中，叶结点包含的关键字和其他结点包含的关键字是不重复的。<h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3></li></ul></li><li>散列表：根据给定的关键字来计算出关键字在表中的地址的数据结构。也就是说，散列表建立了关键字和存储地址之间的一种直接映射关系。</li><li>散列函数：一个把查找表中的关键字映射成该关键字对应的地址的函数，记为Hash(key)=Addr。</li><li>散列函数可能会把两个或两个以上的不同关键字映射到同一地址，称这种情况为“冲突”，这些发生碰撞的不同关键字称为同义词。</li><li>构造散列函数的tips：<ul><li>1）散列函数的定义域必须包含全部需要存储的关键字，而值域的范围则依赖于散列表的大小或地址范围。</li><li>2）散列函数计算出来的地址应该能等概率、均匀地分布在整个地址空间，从而减少冲突的发生。</li><li>3）散列函数应尽量简单，能够在较短的时间内就计算出任一关键字对应的散列地址。</li></ul></li><li><p>1.常用Hash函数的构造方法：</p><ul><li>1.开放定址法：直接取关键字的某个线性函数值为散列地址，散列函数为H(key)=a×key+b。式中，a和b是常数。这种方法计算最简单，并且不会产生冲突</li><li>2.除留余数法：假定散列表表长为m，取一个不大于m但最接近或等于m的质数p，利用以下公式把关键字转换成散列地址。散列函数为H(key)=key % p<br>除留余数法的关键是选好p，使得每一个关键字通过该函数转换后等概率地映射到散列空间上的任一地址，从而尽可能减少冲突的可能性</li><li>3.数字分析法：设关键字是r进制数（如十进制数），而r个数码在各位上出现的频率不一定相同，可能在某些位上分布均匀些，每种数码出现的机会均等；而在某些位上分布不均匀，只有某几种数码经常出现，则应选取数码分布较为均匀的若干位作为散列地址。这种方法适合于已知的关键字集合</li><li>4.平方取中法：顾名思义，取关键字的平方值的中间几位作为散列地址。具体取多少位要看实际情况而定。这种方法得到的散列地址与关键字的每一位都有关系，使得散列地址分布比较均匀。</li><li>5.折叠法：将关键字分割成位数相同的几部分（最后一部分的位数可以短一些），然后取这几部分的叠加和作为散列地址，这种方法称为折叠法。关键字位数很多，而且关键字中每一位上数字分布大致均匀时，可以采用折叠法得到散列地址。</li></ul></li><li><p>2.常用Hash函数的冲突处理办法：</p><ul><li>1.开放定址法：将产生冲突的Hash地址作为自变量，通过某种冲突解决函数得到一个新的空闲的Hash地址。<ul><li>1）线性探测法：冲突发生时，顺序查看表中下一个单元（当探测到表尾地址m-1时，下一个探测地址是表首地址0），直到找出一个空闲单元（当表未填满时一定能找到一个空闲单元）或查遍全表。</li><li>2）平方探测法：设发生冲突的地址为d,平方探测法得到的新的地址序列为d+12，d-12，d+22，d-22……<br>平方探测法是一种较好的处理冲突的方法，可以避免出现“堆积”问题，它的缺点是不能探测到散列表上的所有单元，但至少能探测到一半单元。</li><li>3）再散列法：又称为双散列法。需要使用两个散列函数，当通过第一个散列函数H(Key)得到的地址发生冲突时，则利用第二个散列函数Hash2(Key)计算该关键字的地址增量。</li><li>4）伪随机序列法：当发生地址冲突时，地址增量为伪随机数序列，称为伪随机序列法。</li></ul></li><li>2.拉链法：对于不同的关键字可能会通过散列函数映射到同一地址，为了避免非同义词发生冲突，可以把所有的同义词存储在一个线性链表中，这个线性链表由其散列地址唯一标识。拉链法适用于经常进行插入和删除的情况。</li><li>3.散列表的查找过程：类似于构造散列表，给定一个关键字Key。<br>先根据散列函数计算出其散列地址。然后检查散列地址位置有没有关键字。<br>   1)如果没有，表明该关键字不存在，返回查找失败。<br>   2)如果有，则检查该记录是否等于关键字。<pre><code>       ①如果等于关键字，返回查找成功。       ②如果不等于，则按照给定的冲突处理办法来计算下一个散列地址，再用该地址去执行上述过程。</code></pre></li><li>4.散列表的查找性能：和装填因子有关。<ul><li></li><li>α越大，表示装填的记录越“满”，发生冲突的可能性就越大，反之发生冲突的可能性越小<h2 id="第七章：排序"><a href="#第七章：排序" class="headerlink" title="第七章：排序"></a>第七章：排序</h2><h3 id="排序的基本知识"><a href="#排序的基本知识" class="headerlink" title="排序的基本知识"></a>排序的基本知识</h3></li></ul></li></ul></li><li>定义：排序就是将原本无序的序列重新排列成有序的序列。</li><li>排序的稳定性<ul><li>如果待排序表中有两个元素Ri、Rj，其对应的关键字keyi=keyj，且在排序前Ri在Rj前面，如果使用某一排序算法排序后，Ri仍然在Rj的前面，则称这个排序算法是稳定的，否则称排序算法是不稳定的。<h3 id="插入类排序"><a href="#插入类排序" class="headerlink" title="插入类排序"></a>插入类排序</h3></li></ul></li><li>直接插入排序<ul><li>直接插入排序：首先以一个元素为有序的序列，然后将后面的元素依次插入到有序的序列中合适的位置直到所有元素都插入有序序列。</li><li>时间复杂度为O(n)</li><li>直接插入排序是稳定性是稳定的。</li></ul></li><li>折半插入排序<ul><li>折半插入排序将比较和移动这两个操作分离出来，也就是先利用折半查找找到插入的位置，然后一次性移动元素，再插入该元素。</li><li>折半插入排序的时间复杂度为O(n^2)</li><li>稳定性：和直接插入排序稳定性相同，是稳定的。</li></ul></li><li>希尔排序<ul><li>希尔排序的基本思想：希尔排序本质上还是插入排序，只不过是把待排序序列分成几个子序列，再分别对这几个子序列进行直接插入排序。<ul><li>①先以增量5来分割序列，也就是下标为0,5,10,15…的关键字分成一组，下标为1,6,11,16..分成一组,然后对这些组分别进行直接插入排序，这就完成了一轮希尔排序。</li><li>②缩小增量(d1=n/2，di+1= [di/2]，比如10个数据序列，第一次增量d1=10/2=5,第二次增量d2= [d1/2]= [5/2]=2,并且最后一个增量等于1),所以第二轮以增量为2进行类似的排序过程。</li><li>③接下来的第三轮，第四轮…都是类似的过程，直到最后一轮以增量为1。此时就是前面所说的直接插入排序。</li><li>概要:  </li></ul></li><li>时间复杂度：…  希尔排序的时间复杂度约为O(n^1.3)    在最坏情况下希尔排序的时间复杂度为O(n^2)</li><li>空间复杂度：希尔排序的空间复杂度为O(1)</li><li>稳定性：不稳定，由于不同的增量可能就会把相等的关键字划分到两个直接插入排序中进行排序， 可能就会造成相对顺序变化。<h3 id="交换类排序"><a href="#交换类排序" class="headerlink" title="交换类排序"></a>交换类排序</h3></li></ul></li><li>冒泡排序<ul><li>假设待排序表长为n，从后往前（或从前往后）两两比较相邻元素的值，若为逆序（即A[i-1]&gt;A[i]），则交换它们，直到序列比较完。我们称它为一趟冒泡，结果将最小的元素交换到待排序列的第一个位置。下一趟冒泡时，前一趟确定的最小元素不再参与比较，待排序列减少一个元素，每趟冒泡的结果把序列中的最小元素放到了序列的最终位置，……，这样最多做n-1趟冒泡就能把所有元素排好序。</li><li>空间复杂度：交换时开辟了存储空间来存储中间变量，所以空间复杂度为O(1)</li><li>时间复杂度</li><li>稳定性：当两个关键字相等，if判断条件不成立，所以不会发生数据移动。所以是稳定的。</li></ul></li><li>快速排序<ul><li>快速排序是一种基于分治法的排序方法。<br>每一趟快排选择序列中任一个元素作为枢轴(pivot)(通常选第一个元素)，将序列中比枢轴小的元素都移到枢轴前边，比枢轴大的元素都移到枢轴后边。<ul><li>1</li><li>2</li></ul></li><li>时间复杂度：<br>最好情况下时间复杂度为O(nlogn) ,待排序序列越无序，算法效率越高。<br>最坏情况下时间复杂度为O(n^2)，待排序序列越有序，算法效率越低。</li><li>空间复杂度：<br>由于快速排序是递归的，需要借助一个递归工作栈来保存每一层递归调用的必要信息，其容量应与递归调用的最大深度一致。<br>最好情况下为 ⌈log2(n+1)⌉(每次partition都很均匀)递归树的深度O(logn)<br>最坏情况下，因为要进行n-1次递归调用，所以栈的深度为O(n)；</li><li>稳定性：快速排序是不稳定的，是因为存在交换关键字。<h3 id="选择类排序"><a href="#选择类排序" class="headerlink" title="选择类排序"></a>选择类排序</h3></li></ul></li><li>简单选择排序<ul><li></li><li>空间复杂度：需要额外的存储空间仅为交换元素时借助的中间变量，所以空间复杂度是O(1)</li><li>时间复杂度：<br>关键操作在于交换元素操作，整个算法由双重循环组成，外层循环从0到n-2一共n-2+1=n-1次，<br>对于第i层外层循环，内层循环执行n-1-(i+1)+1=n-i-1次。<pre><code>            当i=0,内层循环执行n-1次，当i=n-2,内层循环执行1次，所以是一个等差数列求和,一共为(1+n-1)(n-1)/2=n(n-1)/2 ,所以时间复杂度为O(n^2)</code></pre></li><li>稳定性：不稳定   原因就在于交换部分会打破相对顺序</li></ul></li><li><p>堆排序</p><ul><li>什么是堆？<ul><li>堆是一棵完全二叉树，而且满足任何一个非叶结点的值都不大于(或不小于)其左右孩子结点的值。<ul><li>如果是每个结点的值都不小于它的左右孩子结点的值，则称为大顶堆。</li><li>如果是每个结点的值都不大于它的左右孩子结点的值，则称为小顶堆。</li></ul></li></ul></li><li><p>什么是堆排序？</p><ul><li>我们知道对于一个堆来说，它的根结点是整个堆中所有结点的值的最大值(大顶堆)或者最小值(小顶堆)。所以堆排序的思想就是每次将无序序列调节成一个堆，然后从堆中选择堆顶元素的值，这个值加入有序序列，无序序列减少一个，再反复调节无序序列，直到所有关键字都加入到有序序列。<ul><li></li><li></li></ul></li><li><p>时间复杂度：<br>堆排序的总时间可以分为①建堆部分+②n-1次向下调整堆</p><p>堆排序的时间复杂度为O(n)+O(nlog2n)=O(nlog2n)</p></li><li>堆排序不稳定<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3></li></ul></li></ul></li><li>假定待排序表含有n个记录，则可以看成是n个有序的子表，每个子表长度为1，然后两两归并，得到 ⌈n/2⌉个长度为2或1的有序表；再两两归并，……如此重复，直到合并成一个长度为n的有序表为止，这种排序方法称为2-路归并排序。<ul><li></li><li></li></ul></li><li>例如：49 38 65 97 76 13 27<ul><li>①首先将整个序列的每个关键字看成一个单独的有序的子序列</li><li>②两两归并，49和38归并成{38 49} ，65和97归并成{65 97}，76和13归并成{13 76}，27没有归并对象</li><li>③两两归并，{38 49}和{65 97}归并成{38 49 65 97}，{13,76}和27归并成{13 27 76}</li><li>④两两归并，{38 49 65 97}和{13 27 76}归并成{13 27 38 49 65 76 97}</li></ul></li><li>时间复杂度：O(nlog2n)</li><li>空间复杂度:因为需要将这个待排序序列转存到一个数组，所以需要额外开辟大小为n的存储空间，即空间复杂度为O(n)</li><li>稳定性：稳定<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3></li><li>基数排序(也叫桶排序)是一种很特别的排序方法，它不是基于比较进行排序的，而是采用多关键字排序思想（即基于关键字各位的大小进行排序的），借助“分配”和“收集”两种操作对单逻辑关键字进行排序。基数排序又分为最高位优先（MSD）排序和最低位优先（LSD）排序。</li><li>例子：53, 3, 542, 748, 14, 214, 154, 63, 616<ul><li>补充位数：053, 003, 542, 748, 014, 214, 154, 063, 616</li><li>桶实际是一个队列，先进先出(从桶的上面进，下面出)</li><li>关键字数量为n,关键字的位数为d,比如748 d=3，r为关键字的基的个数，就是组成关键字的数据的种类，比如十进制数字一共有0至9一共10个数字，即r=10</li></ul></li><li>空间复杂度：需要开辟关键字基的个数个队列，所以空间复杂度为O(r)</li><li>时间复杂度：需要进行关键字位数d次”分配”和”收集”，一次”分配”需要将n个关键字放进各个队列中，一次”收集”需要将r个桶都收集一遍。所以一次”分配”和一次”收集”时间复杂度为O(n+r)。d次就需要O(d(n+r))的时间复杂度。</li><li>稳定性：由于是队列，先进先出的性质，所以在分配的时候是按照先后顺序分配，也就是稳定的，所以收集的时候也是保持稳定的。即基数排序是稳定的排序算法。<h3 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h3></li><li>需要将待排序的记录存储在外存上，排序时再把数据一部分一部分的调入内存进行排序。在排序过程中需要多次进行内存和外存之间的交换，对外存文件中的记录进行排序后的结果仍然被放到原有文件中。这种排序的方法就叫做外部排序。</li><li>如何得到初始的归并段<ul><li>置换选择排序：解决排序段放入内存的问题</li></ul></li><li>如何减少多个归并段的归并次数<ul><li>最佳归并树：最少的归并次数（I/O次数）</li></ul></li><li>如何每次m路归并快速得到最小的关键字<ul><li>败者树：减少比较次数</li></ul></li><li>概要: 内存容量无法容纳大量数据<h2 id="二叉树与树与森林"><a href="#二叉树与树与森林" class="headerlink" title="二叉树与树与森林"></a>二叉树与树与森林</h2><h3 id="树与二叉树"><a href="#树与二叉树" class="headerlink" title="树与二叉树"></a>树与二叉树</h3></li><li>如何将一棵树转化成二叉树？<ul><li>树的孩子兄弟表示法与二叉树的二叉链表表示法都是用到两个指针<ul><li>将孩子兄弟表示法理解成二叉链表</li></ul></li><li>树转换成二叉树的手动模拟方法：<ul><li>①将同一结点的各个孩子用线串连起来</li><li>②将每个结点的子树分支，从左往右，除了第一个以外全部删除</li><li>概要: 例子</li></ul></li></ul></li><li>如何将一棵二叉树转化成树？<ul><li>二叉树转换成树的手动模拟方法：<ul><li>①将二叉树从上到下分层，并调节成水平方向。<br>(分层方法：每遇到左孩子则为一层)</li><li>②找到每一层的双亲结点，方法为它的上一层相连的那个结点就是双亲结点。<br>例如bcd这一层，与它相连的上一层结点即为a,所以bcd这三个结点的双亲结点都是a.</li><li>③将每一层结点和其双亲结点相连，同时删除该双亲结点各个孩子结点之间的联系。</li><li>概要: 例子<h3 id="森林与二叉树"><a href="#森林与二叉树" class="headerlink" title="森林与二叉树"></a>森林与二叉树</h3></li></ul></li></ul></li><li>森林：森林是m（m≥0）棵互不相交的树的集合</li><li>如何将森林转换成二叉树？<ul><li>森林转换成树的手动模拟方法：<ul><li>①将森林中每棵树都转换成二叉树</li><li>②将第二棵树作为第一棵树的根结点的右子树，将第三棵树作为第二棵树的根结点的右子树..依次类推</li><li>概要: 例子</li></ul></li></ul></li><li>如何将二叉树转换成森林？<ul><li>二叉树转换成森林的手动模拟方法：<ul><li>反复断开二叉树根结点的右孩子的右子树指针，直到不存在根结点有右孩子的二叉树为止。</li><li>概要: 例子<h3 id="树与森林的遍历"><a href="#树与森林的遍历" class="headerlink" title="树与森林的遍历"></a>树与森林的遍历</h3></li></ul></li></ul></li><li>先序：先访问根结点，再访问根结点的每棵子树。           访问子树也是按照先序的要求</li><li>后序：先访问根结点的每棵子树，再访问根结点。           访问子树也是按照先序的要求</li><li>树的先序遍历等于它对应二叉树的先序遍历，后序遍历等于它对应的二叉树的中序遍历</li><li>概要: 例子</li></ul><p><img src="https://github.com/SSHeRun/CS-Xmind-Note/blob/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="picture"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;h2 id=&quot;第一章：数据结构的&quot;&gt;&lt;a href=&quot;#第一章：数据结构的&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="408" scheme="lovemefan.win/tags/408/"/>
    
  </entry>
  
  <entry>
    <title>计算机操作系统</title>
    <link href="lovemefan.win/post/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.html%20%202019/12/05/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>lovemefan.win/post/408/计算机操作系统/index.html  2019/12/05/408/计算机操作系统/</id>
    <published>2019-12-05T15:37:00.000Z</published>
    <updated>2019-12-05T07:55:53.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机操作系统"><a href="#计算机操作系统" class="headerlink" title="计算机操作系统"></a>计算机操作系统</h1><h2 id="一-操作系统引论"><a href="#一-操作系统引论" class="headerlink" title="一.操作系统引论"></a>一.操作系统引论</h2><h3 id="1-操作系统的目标和功能"><a href="#1-操作系统的目标和功能" class="headerlink" title="1.操作系统的目标和功能"></a>1.操作系统的目标和功能</h3><ul><li>目标<ul><li>方便性</li><li>有效性<ul><li>提高系统资源利用率</li><li>提高系统吞吐量</li></ul></li><li>可扩充性</li><li>开放性</li></ul></li><li>作用<ul><li>OS作为用户与计算机硬件系统之间的接口<ul><li>命令方式</li><li>系统调用方式</li><li>图标–窗口方式</li></ul></li><li>OS实现了对计算机资源的抽象<h3 id="2-操作系统的发展过程"><a href="#2-操作系统的发展过程" class="headerlink" title="2.操作系统的发展过程"></a>2.操作系统的发展过程</h3></li></ul></li><li><p>未配置操作系统的计算机系统</p><ul><li><p>人工操作方式</p><ul><li><blockquote><p>用户独占全机 CPU等待人工操作 严重降低了计算机资源的利用率</p></blockquote></li></ul></li><li><p>脱机输入/输出(Off–Line I/O)方式</p><ul><li><blockquote><p>减少了CPU的空闲时间 提高了I/O速度 效率仍然不理想</p></blockquote></li></ul></li></ul></li><li><p>单道批处理系统</p></li><li>多道批处理系统</li><li><blockquote><p>1.资源利用率高</p></blockquote></li><li><blockquote><p>2.系统吞吐量大</p></blockquote></li><li><blockquote><p>3.平均周转时间长</p></blockquote></li><li><blockquote><p>4.无交互能力</p></blockquote><ul><li>(宏观并行，微观串行)</li></ul></li><li>分时系统</li><li><blockquote><p>特征:</p></blockquote></li><li><blockquote><p>1.多路性</p></blockquote></li><li><blockquote><p>2.独立性</p></blockquote></li><li><blockquote><p>3.及时性</p></blockquote></li><li><blockquote><p>4.交互性</p></blockquote></li><li><p>实时系统</p></li><li>集群系统–超算~云计算</li><li>微机操作系统的发展<h3 id="3-操作系统的基本特征"><a href="#3-操作系统的基本特征" class="headerlink" title="3.操作系统的基本特征"></a>3.操作系统的基本特征</h3></li><li><p>1.并发concurrence</p><ul><li><p>区别并行和并发</p><ul><li><blockquote><p>并行性是指两个或多个事件在同一时刻发生→宏观并行，微观并行</p></blockquote></li><li><blockquote><p>并发性是指两个或多个事件在同一时间间隔内发生→宏观并行，微观串行</p></blockquote><ul><li>并发是进程宏观一起运行，微观上交替运行，而并行是指同时运行</li></ul></li></ul></li><li>引入进程<ul><li><blockquote><p>进程是指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令，数据和堆栈等组成的，是一个能独立运行的活动实体</p></blockquote></li></ul></li></ul></li><li><p>2.共享sharing</p><ul><li>1.互斥共享方式</li><li>2.同时访问方式</li><li>并发和共享是多用户(多任务)OS的两个最基本的特征。它们又是互为存在的条件</li></ul></li><li>3.虚拟virtual<ul><li>时分复用技术</li><li>空分复用技术</li></ul></li><li>4.异步asynchronism<h3 id="4-操作系统的主要功能"><a href="#4-操作系统的主要功能" class="headerlink" title="4.操作系统的主要功能"></a>4.操作系统的主要功能</h3></li><li>1.处理机管理功能<ul><li>进程控制</li><li>进程同步<ul><li>进程互斥方式</li><li>进程同步方式(协同)</li></ul></li><li>进程通信</li><li>调度<ul><li>作业调度</li><li>进程调度</li></ul></li></ul></li><li>2.存储器管理功能<ul><li>内存分配<ul><li>静态分配</li><li>动态分配</li></ul></li><li>内存保护</li><li>地址映射</li><li>内存扩充</li></ul></li><li>3.设备管理功能<ul><li>缓冲管理</li><li>设备分配</li><li>设备处理<ul><li>设备处理程序又称设备驱动程序</li></ul></li></ul></li><li>4.文件管理功能<ul><li>文件存储空间的管理</li><li>目录管理</li><li>文件的读写管理和保护</li></ul></li><li>5.操作系统与用户之间的接口<ul><li>用户接口</li><li>程序接口</li></ul></li><li>6.现代操作系统的新功能<ul><li>系统安全</li><li>网络的功能和服务</li><li>支持多媒体<h3 id="5-OS结构设计"><a href="#5-OS结构设计" class="headerlink" title="5.OS结构设计"></a>5.OS结构设计</h3></li></ul></li><li>传统操作系统结构<ul><li>无结构操作系统</li><li>模块化OS</li><li>分层式结构OS</li></ul></li><li>微内核os结构<ul><li>客户/服务器模式</li><li>面对对象的程序设计<h2 id="第二章进程的描述与控制"><a href="#第二章进程的描述与控制" class="headerlink" title="第二章进程的描述与控制"></a>第二章进程的描述与控制</h2><h3 id="前驱图和程序执行"><a href="#前驱图和程序执行" class="headerlink" title="前驱图和程序执行"></a>前驱图和程序执行</h3><h3 id="程序并发执行"><a href="#程序并发执行" class="headerlink" title="程序并发执行"></a>程序并发执行</h3></li></ul></li><li>程序的并发执行</li><li>程序并发执行时的特征<ul><li>间断性</li><li>失去封闭性</li><li>不可再现性<h3 id="进程的描述"><a href="#进程的描述" class="headerlink" title="进程的描述"></a>进程的描述</h3></li></ul></li><li>进程的定义<ul><li>进程是程序的一次执行</li><li>进程是一个程序及其数据在处理机上顺序执行时所发生的活动</li><li>进程是具有独立功能的程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位</li></ul></li><li>进程的特征<ul><li>动态性</li><li>并发性</li><li>独立性</li><li>异步性</li></ul></li><li>从操作系统角度分类<ul><li>系统进程</li><li>用户进程</li></ul></li><li>进程和程序的区别<ul><li>进程是动态概念，而程序则是静态概念</li><li>程序是指令的有序集合，永远存在；进程强调是程序在数据集上的一次执行，有创建有撤销，存在是暂时的；</li><li>进程具有并发性，而程序没有</li><li>进程可创建其他进程，而程序并不能形成新的程序</li><li>进程是竞争计算机资源的基本单位，程序不是</li></ul></li><li>进程和程序的联系<ul><li>进程是程序在数据集上的一次执行</li><li>程序是构成进程的组成部分，一个程序可对应多个进程，一个进程可包括多个程序</li><li>进程的运行目标是执行所对应的程序</li><li>从静态看，进程由程序、数据和进程控制块（PCB）组成</li></ul></li><li>进程的基本状态及转换<ul><li>进程的三种基本状态<ul><li>就绪状态ready</li><li>执行状态running</li><li>阻塞状态block</li></ul></li><li>三种基本状态的转换</li><li>创建状态和终止状态<ul><li>五状态进程模型</li></ul></li><li>注意<ul><li>阻塞态-&gt;运行态和就绪态-&gt;阻塞态这二种状态转换不可能发生</li></ul></li></ul></li><li>挂起操作和进程状态的转换<ul><li>挂起和阻塞的区别</li><li>挂起操作的目的<ul><li>终端用户的需要: 修改、检查进程</li><li>父进程的需要：修改、协调子进程</li><li>对换的需要：缓和内存</li><li>负荷调节的需要：保证实时任务的执行</li></ul></li><li>关键图</li></ul></li><li>进程管理中的数据结构<ul><li>进程控制块PCB的作用<ul><li>作为独立运行基本单位的标志</li><li>能实现间断性运行方式</li><li>提供进程管理所需要的信息</li><li>提供进程调度所需要的信息</li><li>实现与其他进程的同步与通信</li></ul></li><li>进程控制块的信息<ul><li>进程标识符<ul><li>外部标识符PID</li><li>内部标识符(端口)</li></ul></li><li>处理机状态<ul><li>通用寄存器</li><li>指令计数器</li><li>程序状态字PSW</li><li>用户栈指针</li></ul></li><li>进程调度信息<ul><li>进程状态</li><li>进程优先级</li><li>进程调度所需的其他信息</li><li>事件</li></ul></li><li>进程控制信息<ul><li>程序和数据的地址</li><li>进程同步和通信机制</li><li>资源清单</li><li>链接指针</li></ul></li><li>进程控制块的组织方式<ul><li>线性方式</li><li>链接方式</li><li>索引方式<h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3></li></ul></li></ul></li></ul></li><li>操作系统内核<ul><li>两大功能<ul><li>支撑功能<ul><li>中断管理</li><li>时钟管理</li><li>原语操作<ul><li>进程的管理，由若干原语（primitive）来执行</li></ul></li></ul></li><li>资源管理功能<ul><li>进程管理</li><li>存储器管理</li><li>设备管理</li></ul></li></ul></li><li>状态<ul><li>系统态，管态，内核态</li><li>用户态，目态</li></ul></li></ul></li><li>进程的创建<ul><li>进程的层次结构<ul><li>父进程</li><li>子进程</li></ul></li><li>引起创建进程的事件<ul><li>用户登录</li><li>作业调度</li><li>提供服务</li><li>应用请求</li></ul></li><li>进程的创建过程<ul><li>1.申请空白PCB</li><li>2.为新进程分配其运行所需的资源</li><li>3.初始化进程块PCB</li><li>4.如果进程就绪队列能够接纳新进程，便将新进程插入就绪队列</li></ul></li><li>进程的终止<ul><li>引起进程终止的事件<ul><li>1.正常结束</li><li>2.异常结束</li><li>3.外界干预</li></ul></li><li>进程的终止过程<ul><li>1.根据被终止进程的标识符</li></ul></li></ul></li><li>进程的阻塞与唤醒<ul><li>引起进程阻塞和唤醒的事件<ul><li>请求系统服务而未满足</li><li>启动某种操作而阻塞当前进程</li><li>新数据尚未到达</li><li>无新工作可做：系统进程</li></ul></li><li>进程阻塞过程(自己阻塞自己)</li><li>进程唤醒过程(系统或其他进程唤醒自己)</li></ul></li><li>进程的挂起与激活<ul><li>suspend</li><li>active</li></ul></li></ul></li><li>进程同步<ul><li>基本概念<ul><li>两种形式的制约关系<ul><li>间接相互制约关系<ul><li>互斥——竞争</li></ul></li><li>直接相互制约关系<ul><li>同步——协作</li></ul></li></ul></li><li>临界资源</li><li>分区<ul><li>进入区enter section</li><li>临界区critical section</li><li>退出区exit section</li><li>剩余区remainder section</li></ul></li><li>同步机制应遵循的规则<ul><li>1.空闲让进</li><li>2.忙则等待</li><li>3.有限等待</li><li>4.让权等待</li></ul></li></ul></li><li>进程同步机制<ul><li>软件同步机制:都没有解决让权等待，而且部分方法还会产生死锁的情况</li><li>硬件同步机制<ul><li>关中断</li><li>利用Test-and-Set指令实现互斥</li><li>利用swap指令实现进程互斥</li></ul></li><li>信号量机制<ul><li>整型信号量</li><li>记录型信号量<ul><li>由于整型信号量没有遵循让权等待原则，记录型允许负数，即阻塞链表</li></ul></li><li>AND型信号量</li><li>信号量集<ul><li>理解:AND型号量的wait和signal仅能对信号施以加1或减1操作，意味着每次只能对某类临界资源进行一个单位的申请或释放。当一次需要N个单位时，便要进行N次wait操作，这显然是低效的，甚至会增加死锁的概率。此外，在有些情况下，为确保系统的安全性，当所申请的资源数量低于某一下限值时，还必须进行管制，不予以分配。因此，当进程申请某类临界资源时，在每次分配前，都必须测试资源数量，判断是否大于可分配的下限值，决定是否予以分配</li><li>操作<ul><li>Swait(S1，t1，d1…Sn，tn，dn)</li><li>Ssignal(S1，d1…Sn，dn)</li></ul></li><li>特殊情况</li></ul></li></ul></li></ul></li><li>经典进程的同步问题<ul><li>生产者–消费者问题</li><li>哲学家进餐问题</li><li>读者–写者问题<h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3></li></ul></li></ul></li><li>进程通信是指进程之间的信息交换，又称低级进程通信</li><li>进程通信的类型<ul><li>共享存储器系统<ul><li>基于共享数据结构的通信方式<ul><li>生产者和消费者</li></ul></li><li>基于共享存储区的通信方式<ul><li>高级通信</li></ul></li></ul></li><li>管道通信系统(pipe)<ul><li>高级通信</li></ul></li><li>消息传递系统<ul><li>高级通信</li><li>方式分类<ul><li>直接通信</li><li>间接通信</li></ul></li></ul></li><li>客服机–服务器系统</li></ul></li><li>消息传递通信的实现方式<ul><li>直接消息传递系统</li><li>信箱通信<h3 id="线程的基本概念"><a href="#线程的基本概念" class="headerlink" title="线程的基本概念"></a>线程的基本概念</h3></li></ul></li><li>线程的引入<ul><li>线程的引入正是为了简化线程间的通信，以小的开销来提高进程内的并发程度</li><li>多线程并发的不足<ul><li>进程的两个基本属性<ul><li>一个拥有资源的独立单位，可独立分配系统资源</li><li>一个可独立调度和分派的基本单位，PCB</li></ul></li><li>程序并发执行所需付出的时空开销<ul><li>创建进程</li><li>撤销进程</li><li>进程切换</li></ul></li><li>进程间通信效率低</li><li>将分配资源和调度两个属性分开</li></ul></li><li>线程——作为调度和分派的基本单位<ul><li>进程是系统资源分配的单位，线程是处理器调度的单位</li><li>线程表示进程的一个控制点，可以执行一系列的指令。通常，和应用程序的一个函数相对应</li><li>进程分解为线程还可以有效利用多处理器和多核计算机</li></ul></li></ul></li><li>线程与进程的比较<ul><li>不同点<ul><li>调度的基本单位</li><li>并发性</li></ul></li><li>相似点<ul><li>状态：运行、阻塞、就绪</li><li>线程具有一定的生命期</li><li>进程可创建线程，一个线程可创建另一个子线程</li><li>多个线程并发执行时仍然存在互斥与同步</li></ul></li></ul></li><li>线程的实现<ul><li>线程的实现方式<ul><li>内核支持线程KST</li><li>用户级线程ULT</li><li>组合方式</li></ul></li><li>多线程OS中的进程属性<ul><li>进程是一个可拥有资源的基本单位</li><li>多个线程可并发执行</li><li>进程已不是可执行的实体</li></ul></li><li>线程的状态和线程控制块<ul><li>线程运行的三个状态<ul><li>执行状态</li><li>就绪状态</li><li>阻塞状态</li></ul></li><li>线程控制块TCB<h2 id="第三章-处理机调度与死锁"><a href="#第三章-处理机调度与死锁" class="headerlink" title="第三章:处理机调度与死锁"></a>第三章:处理机调度与死锁</h2><h3 id="处理机调度算法的目标"><a href="#处理机调度算法的目标" class="headerlink" title="处理机调度算法的目标"></a>处理机调度算法的目标</h3></li></ul></li></ul></li><li>处理机调度算法的共同目标<ul><li>资源利用率:CPU的利用率=CPU有效工作时间/(CPU有效工作时间+CPU空闲等待时间)</li><li>公平性</li><li>平衡性</li><li>策略强制执行</li></ul></li><li>批处理系统的目标<ul><li>平均周转时间短</li><li>系统吞吐量高</li><li>处理机利用率高</li></ul></li><li>分时系统的目标<ul><li>响应时间快</li><li>均衡性</li></ul></li><li>实时系统目标<ul><li>截止时间的保证</li><li>可预测性</li></ul></li><li>处理机调度的层次<ul><li>高级调度（作业调度）<ul><li>分时系统无需作业调度，因为需要交互</li><li>批处理系统需要作业调度</li></ul></li><li>中级调度（和挂起有关）</li><li>低级调度（进程调度）<ul><li>进程调度是最基本的调度，任何操作系统都有进程调度。</li><li>低级调度的三个基本机制<ul><li>排队器</li><li>分派器</li><li>上下文切换</li></ul></li><li>进程调度方式<ul><li>非抢占方式</li><li>抢占方式<ul><li>优先权原则</li><li>短进程优先原则</li><li>时间片原则</li></ul></li></ul></li><li>进程调度的任务<ul><li>保存处理机的现场信息</li><li>按某种算法选取进程</li><li>把处理器分配给进程</li></ul></li><li>进程调度的算法<ul><li>优先级调度算法<ul><li>优先级调度算法的类型<ul><li>非抢占式优先级调度算法<ul><li>等当前进程执行完以后，再执行另一个优先权最高的进程</li><li>这种调度算法主要用于批处理系统中；也可用于某些对实时性要求不严的实时系统中。 </li></ul></li><li>抢占式优先级调度算法<ul><li>不等当前进程结束，直接抢处理机</li><li>常用于要求比较严格的实时系统中， 以及对性能要求较高的批处理和分时系统中。</li></ul></li></ul></li><li>优先级的类型<ul><li>静态优先级<ul><li>优先权是在创建进程时确定的，且在进程的整个运行期间保持不变。一般地，优先权是利用某一范围内的一个整数来表示的，例如，0~7或0~255中的某一整数， 又把该整数称为优先数。</li><li>可以参考BIOS系统中设置boot的优先级</li></ul></li><li>动态优先级<ul><li>在创建进程时所赋予的优先权，是可以随进程的推进或随其等待时间的增加而改变的，以便获得更好的调度性能。</li></ul></li></ul></li></ul></li><li>轮转调度算法<ul><li>基本原理:在轮转(RR)法中，系统根据FCFS策略，将所有的就绪进程排成一个就绪队列，并可设置每隔一定时间间隔(如30ms)即产生一次中断，激活系统中的进程调度程序，完成一次调度，将CPU分配给队首进程，令其执行</li><li>进程切换时机<ul><li>时间片未用完，进程完成</li><li>时间片到，进程未完成</li></ul></li><li>时间片大小的确定<ul><li>太小利于短作业，增加系统切换开销</li><li>太长就退化为FCFS算法</li><li>一般选择: q略大于一次交互所需要的时间，使大多数进程在一个时间片内完成</li></ul></li><li>一般来说，平均周转时间将比SJF长，但是有较好的响应时间</li></ul></li><li>多队列调度算法</li><li>多级反馈队列调度算法<ul><li>调度机制<ul><li>设置多个就绪队列</li><li>每个队列都采用FCFS算法</li><li>按照队列优先级调度，在第n队列中采取按时间片轮转的方式运行</li></ul></li><li>调度算法的性能<ul><li>对于终端型用户，由于作业小，感觉满意</li><li>对于短批处理作业用户，周转时间也较小</li><li>长批处理作业用户，也能够得到执行</li></ul></li></ul></li><li>基于公平原则的调度算法<ul><li>保证调度算法</li><li>公平分享调度算法<h3 id="作业与作业调度"><a href="#作业与作业调度" class="headerlink" title="作业与作业调度"></a>作业与作业调度</h3></li></ul></li></ul></li></ul></li></ul></li><li>作业<ul><li>作业不仅包含程序和数据，还配有一份作业说明书，系统根据说明书对程序的运行进行控制。批处理系统是以作业为单位从外存掉入内存的。</li></ul></li><li>作业控制块JCB<ul><li>为每个作业设置一个JCB，保存了对作业管理调度的全部信息。是作业存在的标志。</li></ul></li><li>作业步<ul><li>作业步，每个作业都必须经过若干相对独立，有相互关联的顺序步骤才能得到结果。每一个步骤就是一个作业步。</li></ul></li><li>作业运行的三个阶段<ul><li>收容阶段</li><li>运行阶段</li><li>完成阶段</li></ul></li><li>作业运行的三个状态<ul><li>后备状态</li><li>运行状态</li><li>完成状态</li></ul></li><li>作业调度的主要任务<ul><li>接纳多少个作业</li><li>接纳哪些作业</li></ul></li><li>先来先服务(first–come first–served，FCFS)调度算法<ul><li>比较有利于长作业，而不利于短作业。</li><li>有利于CPU繁忙的作业，而不利于I/O繁忙的作业。</li></ul></li><li>短作业优先(short job first，SJF)的调度算法<ul><li>优点<ul><li>比FCFS改善平均周转时间和平均带权周转时间，缩短作业的等待时间；</li><li>提高系统的吞吐量；</li></ul></li><li>缺点<ul><li>必须预知作业的运行时间</li><li>对长作业非常不利，长作业的周转时间会明显地增长</li><li>在采用SJF算法时，人–机无法实现交互</li><li>该调度算法完全未考虑作业的紧迫程度，故不能保证紧迫性作业能得到及时处理</li></ul></li></ul></li><li>优先级调度算法(priority–scheduling algorithm，PSA)</li><li>高响应比优先调度算法(Highest Response Ratio Next,HRRN)<ul><li>原理<ul><li>在每次选择作业投入运行时，先计算此时后备作业队列中每个作业的响应比RP然后选择其值最大的作业投入运行</li><li>优先权=(等待时间+要求服务时间)/要求服务时间=响应时间/要求服务时间=1+等待时间/要求服务时间</li></ul></li><li>特点<ul><li>如果作业的等待时间相同，则要求服务的时间愈短，其优先权愈高，因而类似于SJF算法，有利于短作业</li><li>当要求服务的时间相同时，作业的优先权又决定于其等待时间，因而该算法又类似于FCFS算法</li><li>对于长时间的优先级，可以为随等待时间的增加而提高，当等待时间足够长时，也可获得处理机<h3 id="实时调度-HRT和SRT任务"><a href="#实时调度-HRT和SRT任务" class="headerlink" title="实时调度(HRT和SRT任务)"></a>实时调度(HRT和SRT任务)</h3></li></ul></li></ul></li><li>实现实时调度的基本条件<ul><li>提供必要信息<ul><li>就绪时间</li><li>开始截止时间和完成截止时间</li><li>处理时间</li><li>资源要求</li><li>优先级</li></ul></li><li>系统处理能力强<ul><li>∑(Ci/Pi)≤1</li><li>N个处理机:∑(Ci/Pi)≤N</li></ul></li><li>采用抢占式调度机制</li><li>具有快速切换机制<ul><li>对中断的快速响应能力</li><li>快速的任务分派能力</li></ul></li></ul></li><li>实时调度算法的分类<ul><li>非抢占式调度算法<ul><li>非抢占式轮转调度算法</li><li>非抢占式优先调度算法</li></ul></li><li>抢占式调度算法<ul><li>基于时钟中断的抢占式优先级调度算法</li><li>立即抢占的优先级调度算法</li></ul></li></ul></li><li>最早截止时间优先EDF(Earliest Deadline First)算法<ul><li>根据任务的开始截至时间来确定任务的优先级<ul><li>截至时间越早，优先级越高</li></ul></li><li>非抢占式调度方式用于非周期实时任务</li><li>抢占式调度方式用于周期实时任务</li></ul></li><li>最低松弛度优先LLF(Least Laxity First)算法<ul><li>类似EDF</li><li>算法根据任务紧急(或松弛)的程度，来确定任务的优先级。任务的紧急程度愈高，为该任务所赋予的优先级就愈高， 以使之优先执行。</li><li>松弛度例子<ul><li>例如，一个任务在200ms时必须完成，而它本身所需的运行时间就有100ms，因此，调度程序必须在100 ms之前调度执行，该任务的紧急程度(松弛程度)为100 ms</li></ul></li></ul></li><li>优先级倒置(Priority inversion problem)<ul><li>优先级倒置的形成<ul><li>高优先级进程被低优先级进程延迟或阻塞。</li></ul></li><li>优先级倒置的解决方法<ul><li>简单的:假如进程P3在进入临界区后P3所占用的处理机就不允许被抢占</li><li>实用的:建立在动态优先级继承基础上的<h3 id="死锁概述"><a href="#死锁概述" class="headerlink" title="死锁概述"></a>死锁概述</h3></li></ul></li></ul></li><li>资源问题<ul><li>可重用性资源<ul><li>计算机外设</li></ul></li><li>消耗性资源<ul><li>数据，消息</li></ul></li><li>可抢占性资源<ul><li>不引起死锁</li><li>CPU，内存 </li></ul></li><li>不可抢占性资源<ul><li>光驱，打印机</li></ul></li></ul></li><li>计算机系统中的死锁<ul><li>竞争不可抢占性资源引起死锁</li><li>竞争可消耗资源引起死锁</li><li>进程推进顺序不当引起死锁</li></ul></li><li>死锁的定义，必要条件和处理方法<ul><li>定义:如果一组进程中的每一个进程都在等待仅由该进程中的其他进程才能引发的事件，那么该组进程是死锁的</li><li>产生死锁的必要条件<ul><li>互斥条件</li><li>请求和保存条件</li><li>不可抢占条件</li><li>循环等待条件<ul><li>如果每个资源只有一个实例，则环路等待条件是死锁存在的充分必要条件</li></ul></li></ul></li><li>处理死锁的方法<ul><li>预防死锁<ul><li>静态方法，在进程执行前采取的措施，通过设置某些限制条件，去破坏产生死锁的四个条件之一，防止发生死锁。</li><li>预防死锁的策略<ul><li>破坏”请求和保存”条件<ul><li>第一种协议<ul><li>所有进程在开始运行之前，必须一次性地申请其在整个运行过程中所需的全部资源</li><li>优点:简单，易行，安全</li><li>缺点<ul><li>资源被严重浪费，严重地恶化了资源的利用率</li><li>使进程经常会发生饥饿现象</li></ul></li></ul></li><li>第二种协议<ul><li>它允许一个进程只获得运行初期所需的资源后，便开始运行。进程运行过程中再逐步释放已分配给自己的，且已用毕的全部资源，然后再请求新的所需资源</li></ul></li></ul></li><li>破坏”不可抢占”条件<ul><li>当一个已经保存了某些不可被抢占资源的进程，提出新的资源请求而不能得到满足时，它必须释放已经保持的所有资源，待以后需要时再重新申请</li></ul></li><li>破坏”循环等待”条件<ul><li>对系统所以资源类型进行线性排序，并赋予不同的序号</li><li>例如令输入机的序号为1，打印机序号为2，磁盘机序号为3等。所有进程对资源的请求必须严格按资源序号递增的次序提出。</li></ul></li></ul></li></ul></li><li>避免死锁<ul><li>动态的方法，在进程执行过程中采取的措施，不需事先采取限制措施破坏产生死锁的必要条件，而是在进程申请资源时用某种方法去防止系统进入不安全状态，从而避免发生死锁。如银行家算法</li><li>避免死锁的策略<ul><li>系统安全状态<ul><li>安全状态<ul><li>某时刻，对于并发执行的n个进程，若系统能够按照某种顺序如<p1,p2…pn>来为每个进程分配所需资源，直至最大需求，从而使每个进程都可顺利完成，则认为该时刻系统处于安全状态，这样的序列为安全序列</p1,p2…pn></li></ul></li><li>安全状态之例</li><li>由安全状态向不安全状态的转换</li></ul></li><li>利用银行家算法避免死锁<ul><li>含义:每一个新进程在进入系统时，它必须申明在运行过程中，可能需要每种资源类型的最大单元数目，其数目不应超过系统所拥有的资源总量。当进程请求一组资源时，系统必须首先确定是否有足够的资源分配给该进程。若有，再进一步计算在将这些资源分配给进程后，是否会使系统处于不安全状态。如果不会，才将资源分配给它，否则让进程等待</li><li>银行家算法中的数据结构<ul><li>可用资源向量 Available[m]：m为系统中资源种类数，Available[j]=k表示系统中第j类资源数为k个。</li><li>最大需求矩阵 Max[n,m]：n为系统中进程数，Max[i,j]=k表示进程i对j类资源的最大需求数为中k。</li><li>分配矩阵 Allocation[n，m]:它定义了系统中每一类资源当前已分配给每一进程资源数，   Allocation[i,j] = k表示进程i已分得j类资源的数目为k个。</li><li>需求矩阵 Need[n,m]：它表示每个进程尚需的各类资源数，Need[i,j]=k 表示进程i   还需要j类资源k个。Need[i,j]=Max[i,j] - Allocation[i,j]</li></ul></li><li>银行家算法</li><li>安全性算法</li><li>银行家算法之例</li><li>解题<ul><li>矩阵</li><li>列表</li></ul></li></ul></li></ul></li></ul></li><li>检测死锁<ul><li>死锁的检测与解除<ul><li>死锁的检测<ul><li>资源分配图<ul><li>简化步骤<ul><li>选择一个没有阻塞的进程p</li><li>将p移走，包括它的所有请求边和分配边</li><li>重复步骤1，2，直至不能继续下去</li></ul></li></ul></li><li>死锁定理<ul><li>若一系列简化以后不能使所有的进程节点都成为孤立节点</li></ul></li><li>检测时机<ul><li>当进程等待时检测死锁 （其缺点是系统的开销大）</li><li>定时检测</li><li>系统资源利用率下降时检测死锁</li></ul></li><li>死锁检测中的数据结构</li></ul></li><li>死锁的解除<ul><li>抢占资源</li><li>终止(或撤销)进程</li><li>终止进程的方法<ul><li>终止所有死锁进程</li><li>逐个终止进程<ul><li>代价最小<ul><li>进程的优先级的大小</li><li>进程已执行了多少时间，还需时间</li><li>进程在运行中已经使用资源的多少，还需多少资源</li><li>进程的性质是交互式还是批处理的</li></ul></li></ul></li></ul></li><li>付出代价最小的死锁解除算法<ul><li>是使用一个有效的挂起和解除机构来挂起一些死锁的进程</li></ul></li></ul></li></ul></li></ul></li><li>解除死锁<h2 id="第四章-存储器管理"><a href="#第四章-存储器管理" class="headerlink" title="第四章:存储器管理"></a>第四章:存储器管理</h2><h3 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h3></li></ul></li></ul></li><li>多层结构的存储系统<ul><li>存储器的多层结构<ul><li>CPU寄存器</li><li>主存</li><li>辅存</li></ul></li><li>可执行存储器<ul><li>寄存器和主存的总称</li><li>访问速度快，进程可以在很少的时钟周期内用一条load或store指令完成存取。</li></ul></li></ul></li><li>主存储器与寄存器</li><li>高速缓存和磁盘缓存<h3 id="程序的装入和链接"><a href="#程序的装入和链接" class="headerlink" title="程序的装入和链接"></a>程序的装入和链接</h3></li><li>步骤<ul><li>编译<ul><li>源程序 -&gt;目标模块（Object modules）————Compiler<ul><li>由编译程序对用户源程序进行编译，形成若干个目标模块</li></ul></li></ul></li><li>链接<ul><li>一组目标模块 -&gt;装入模块 （Load Module）—————Linker<ul><li>由链接程序将编译后形成的一组目标模板以及它们所需要的库函数链接在一起，形成一个完整的装入模块</li></ul></li></ul></li><li>装入<ul><li>装入模块 -&gt;内存  ————Loader<ul><li>由装入程序将装入模块装入内存</li></ul></li></ul></li></ul></li><li>程序的装入<ul><li>绝对装入方式<ul><li>在编译时，如果知道程序将驻留在内存中指定的位置。编译程序将产生绝对地址的目标代码。</li></ul></li><li>可重定位装入方式<ul><li>在可执行文件中，列出各个需要重定位的地址单元和相对地址值。当用户程序被装入内存时，一次性实现逻辑地址到物理地址的转换，以后不再转换(一般在装入内存时由软件完成)。</li><li>优点：不需硬件支持，可以装入有限多道程序。</li><li>缺点：一个程序通常需要占用连续的内存空间，程序装入内存后不能移动。不易实现共享。</li></ul></li><li>动态运行时的装入方式<ul><li>动态运行时的装入程序在把装入模块装入内存后，并不立即把装入模块中的逻辑地址转换为物理地址，而是把这种地址转换推迟到程序真正要执行时才进行</li><li>优点：<ul><li>OS可以将一个程序分散存放于不连续的内存空间，可以移动程序，有利用实现共享。</li><li>能够支持程序执行中产生的地址引用，如指针变量（而不仅是生成可执行文件时的地址引用）。</li></ul></li><li>缺点：需要硬件支持，OS实现较复杂。</li><li>它是虚拟存储的基础。</li></ul></li></ul></li><li>程序的链接<ul><li>静态链接方式(lib)</li><li>装入时动态链接</li><li>运行时动态链接(dll)<h3 id="连续分配存储管理方式"><a href="#连续分配存储管理方式" class="headerlink" title="连续分配存储管理方式"></a>连续分配存储管理方式</h3></li></ul></li><li>连续分配<ul><li>单一连续分配(DOS)</li><li>固定分区分配(浪费很多空间)</li><li>动态分区分配</li></ul></li><li>地址映射和存储保护措施<ul><li>基址寄存器：程序的最小物理地址</li><li>界限寄存器：程序的逻辑地址范围</li><li>物理地址 = 逻辑地址 + 基址</li></ul></li><li>内碎片：占用分区之内未被利用的空间</li><li>外碎片：占用分区之间难以利用的空闲分区（通常是小空闲分区）</li><li>把内存划分为若干个固定大小的连续分区。固定式分区又称为静态分区。<ul><li>分区大小相等：只适合于多个相同程序的并发执行（处理多个类型相同的对象）。</li><li>分区大小不等：多个小分区、适量的中等分区、少量的大分区。根据程序的大小，分配当前空闲的、适当大小的分区。</li><li>优点：无外碎片、易实现、开销小。</li><li>缺点：<ul><li>存在内碎片，造成浪费</li><li>分区总数固定，限制了并发执行的程序数目。</li><li>通用Os很少采用，部分控制系统中采用</li></ul></li></ul></li><li>动态创建分区：指在作业装入内存时，从可用的内存中划出一块连续的区域分配给它，且分区大小正好等于该作业的大小。可变式分区中分区的大小和分区的个数都是可变的，而且是根据作业的大小和多少动态地划分。<ul><li>基于顺序搜索的动态分区分配算法<ul><li>首次适应算法（first fit,FF）<ul><li>顺序找，找到一个满足的就分配，但是可能存在浪费</li><li>这种方法目的在于减少查找时间。</li><li>空闲分区表（空闲区链）中的空闲分区要按地址由低到高进行排序</li></ul></li><li>循环首次适应算法（next fit，NF）<ul><li>相对上面那种，不是顺序，类似哈希算法中左右交叉排序</li><li>空闲分区分布得更均匀，查找开销小</li><li>从上次找到的空闲区的下一个空闲区开始查找，直到找到第一个能满足要求的的空闲区为止，并从中划出一块与请求大小相等的内存空间分配给作业。</li></ul></li><li>最佳适应算法（best fit，BF）<ul><li>找到最合适的，但是大区域的访问次数减少</li><li>这种方法能使外碎片尽量小。</li><li>空闲分区表（空闲区链）中的空闲分区要按大小从小到大进行排序，自表头开始查找到第一个满足要求的自由分区分配。</li></ul></li><li>最坏适应算法（worst fit，WF）<ul><li>相对于最好而言，找最大的区域下手，导致最大的区域可能很少，也造成许多碎片</li><li>空闲分区按大小由大到小排序</li></ul></li></ul></li><li>基于索引搜索的动态分区分配算法<ul><li>快速适应算法（quick fit）</li><li>伙伴系统（buddy system）</li><li>哈希算法</li></ul></li><li>动态可重定位分区分配<ul><li>紧凑</li><li>动态重定位<ul><li>动态运行时装入，地址转化在指令执行时进行，需获得硬件地址变换机制的支持</li><li>内存地址=相对地址+起始地址</li></ul></li><li>动态重定位分区分配算法<ul><li>1、在某个分区被释放后立即进行紧凑，系统总是只有一个连续的分区而无碎片，此法很花费机时。</li><li>2、当“请求分配模块”找不到足够大的自由分区分给用户时再进行紧凑，这样紧缩的次数比上种方法少得多，但管理复杂。采用此法的动态重定位分区分配算法框图如下：</li></ul></li></ul></li><li>优点：没有内碎片。</li><li>缺点：外碎片。<h3 id="对换（了解）"><a href="#对换（了解）" class="headerlink" title="对换（了解）"></a>对换（了解）</h3></li></ul></li><li>系统把所有的作业放在外存，每次只调用一个作业进入内存运行，当时间片用完时，将它调至外存后备队列上等待，在从后备队列调入另一个作业进入内存运行。<h3 id="基本分页存储管理方式"><a href="#基本分页存储管理方式" class="headerlink" title="基本分页存储管理方式"></a>基本分页存储管理方式</h3></li><li>分页存储管理的基本方式<ul><li>页面<ul><li>将一个进程的逻辑地址空间分成若干个大小相等的片</li></ul></li><li>页框（frame）<ul><li>内存空间分成与页面相同大小的存储块</li></ul></li><li>由于进程的最后一页经常装不满一块而形成了不可利用的碎片，称之为“页内碎片”</li><li>地址结构<ul><li>页号P+位移量W(0-31)</li></ul></li><li>页表<ul><li>在分页系统中，允许将进程的各个页离散地存储在内存在内存的任一物理块中，为保证进程仍然能够正确地运行，即能在内存中找到每一个页面所对应的物理块，系统又为每个进程建立了一张页面映像表，简称页表</li><li>页表的作用是实现从页面号到物理块号的地址映射</li></ul></li></ul></li><li>地址变换机构<ul><li>基本的地址变换机构<ul><li>要访问两次内存</li><li>页表大都驻留在内存中</li><li>为了实现地址变换功能，在系统中设置页表寄存器（PTR），用来存放页表的始址和页表的长度。</li><li>在进程未执行时，每个进程对应的页表的始址和长度存放在进程的PCB中，当该进程被调度时，就将它们装入页表寄存器。</li></ul></li><li>具有快表的地址变换机构<ul><li>提高了效率，此处会有计算题</li><li>如果页表存放在内存中，则每次访问内存时，都要先访问内存中的页表，然后根据所形成的物理地址再访问内存。这样CPU存一个数据必须访问两次内存，从而使计算机的处理速度降低了1/2。</li><li>为了提高地址变换的速度，在地址变换机构中增设了一个具有并行查询功能的特殊的高速缓冲存储器，称为“联想存储器”或“快表”，用以存放当前访问的那些页表项。</li><li>地址变换过程为：<ul><li>1、CPU给出有效地址</li><li>2、地址变换机构自动地将页号送入高速缓存，确定所需要的页是否在快表中。</li><li>3、若是，则直接读出该页所对应的物理块号，送入物理地址寄存器；</li><li>4、若快表中未找到对应的页表项，则需再访问内存中的页表</li><li>5、找到后，把从页表中读出的页表项存入快表中的一个寄存器单元中，以取代一个旧的页表项。</li></ul></li></ul></li></ul></li><li>两级和多级页表<ul><li>主要是有的时候页表太多了，要化简</li><li>格式：外层页号P1+外层页内地址P2+页内地址d</li><li>基本方法：将页表进行分页，每个页面的大小与内存物理块的大小相同，并为它们进行编号，可以离散地将各个页面分别存放在不同的物理块中。</li></ul></li><li>反置页表<ul><li>反置页表为每一个物理块（页框）设置一个页表项，并按物理块排序，其内容则是页号和其所属进程的标识。</li></ul></li><li>优点：<ul><li>没有外碎片，每个内碎片不超过页大小。</li><li>一个程序不必连续存放。</li><li>便于改变程序占用空间的大小。即随着程序运行而动态生成的数据增多，地址空间可相应增长。</li></ul></li><li>缺点：程序全部装入内存。<h3 id="分段存储管理方式"><a href="#分段存储管理方式" class="headerlink" title="分段存储管理方式"></a>分段存储管理方式</h3></li><li>引入<ul><li>方便编程</li><li>信息共享</li><li>动态增长</li><li>动态链接</li></ul></li><li>在分段存储管理方式中，作业的地址空间被划分为若干个段，每个段是一组完整的逻辑信息，每个段都有自己的名字，都是从零开始编址的一段连续的地址空间，各段长度是不等的。</li><li>内存空间被动态的划分为若干个长度不相同的区域，称为物理段，每个物理段由起始地址和长度确定</li><li>分段系统的基本原理<ul><li>分段<ul><li>格式：段号+段内地址</li></ul></li><li>段表<ul><li>段表实现了从逻辑段到物理内存区的映射。</li></ul></li><li>地址变换机构</li></ul></li><li>和分页的区别<ul><li>页是信息的物理单位</li><li>页的大小固定且由系统固定</li><li>分页的用户程序地址空间是一维的</li><li>通常段比页大，因而段表比页表短，可以缩短查找时间，提高访问速度。</li><li>分页是系统管理的需要，分段是用户应用的需要。一条指令或一个操作数可能会跨越两个页的分界处，而不会跨越两个段的分界处。</li></ul></li><li>信息共享<ul><li>这是分段最重要的优点</li></ul></li><li>段页式存储管理方式<ul><li>基本原理<ul><li>格式：段号（S）+段内页号（P）+页内地址（W）</li></ul></li><li>地址变换过程<ul><li>需要三次访问过程</li></ul></li><li>在段页式系统中，为了获得一条指令或数据，需三次访问内存：第一次访问内存中的段表，从中取得页表始址；第二次访问内存中的页表，从中取出该页所在的物理块号，并将该块号与页内地址一起形成指令或数据的物理地址；第三次访问才是真正根据所得的物理地址取出指令或数据。<h2 id="第五章：虚拟存储器"><a href="#第五章：虚拟存储器" class="headerlink" title="第五章：虚拟存储器"></a>第五章：虚拟存储器</h2><h3 id="常规存储管理方式的特征"><a href="#常规存储管理方式的特征" class="headerlink" title="常规存储管理方式的特征"></a>常规存储管理方式的特征</h3></li></ul></li><li>一次性</li><li>驻留性<h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3></li><li>程序在执行时将呈现出局部性特征，即在一较短的时间内，程序的执行仅局限于某个部分，相应地，它所访问的存储空间也局限于某个区域</li><li>时间局限性<ul><li>如果程序中的某条指令一旦执行， 则不久以后该指令可能再次执行；如果某数据被访问过， 则不久以后该数据可能再次被访问。产生时间局限性的典型原因，是由于在程序中存在着大量的循环操作</li></ul></li><li>空间局限性<ul><li>一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址，可能集中在一定的范围之内，其典型情况便是程序的顺序执行。<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3></li></ul></li><li>指具有请求调入功能和置换功能，能从逻辑上对内存容量加以扩充的一种存储器系统<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3></li><li>大程序：可在较小的可用内存中执行较大的用户程序；</li><li>大的用户空间：提供给用户可用的虚拟内存空间通常大于物理内存(real memory)</li><li>并发：可在内存中容纳更多程序并发执行；</li><li>易于开发：不必影响编程时的程序结构</li><li>以CPU时间和外存空间换取昂贵内存空间，这是操作系统中的资源转换技术<h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3></li><li>离散性<ul><li>指在内存分配时采用离散的分配方式，它是虚拟存储器的实现的基础</li></ul></li><li>多次性<ul><li>指一个作业被分成多次调入内存运行，即在作业运行时没有必要将其全部装入，只须将当前要运行的那部分程序和数据装入内存即可。多次性是虚拟存储器最重要的特征</li></ul></li><li>对换性<ul><li>指允许在作业的运行过程中在内存和外存的对换区之间换进、换出。</li></ul></li><li>虚拟性<ul><li>指能够从逻辑上扩充内存容量，使用户所看到的内存容量远大于实际内存容量。<h3 id="虚拟存储器的实现方式"><a href="#虚拟存储器的实现方式" class="headerlink" title="虚拟存储器的实现方式"></a>虚拟存储器的实现方式</h3></li></ul></li><li>请求分页存储管理方式<ul><li>硬件<ul><li>请求页表机制<ul><li>格式：页号+物理块号+状态位P+访问字段A+修改位M+外存地址</li></ul></li><li>缺页中断机构</li><li>地址变换机构（过程图很关键）</li></ul></li><li>请求分页中的内存分配<ul><li>最小物理块数<ul><li>即能保证进程正常运行所需的最小物理块数</li></ul></li><li>内存分配策略<ul><li>固定分配局部置换（国王的大儿子）</li><li>可变分配全局置换（国王的二儿子）</li><li>可变分配局部置换（国王的小儿子）</li></ul></li></ul></li><li>物理块分配算法<ul><li>平均分配算法</li><li>按比例分配算法</li><li>考虑优先权的分配算法</li></ul></li><li>页面调入策略<ul><li>系统应在何时调入所需页面<ul><li>预调页策略（不能实现）</li><li>请求调页策略（需要才给）</li></ul></li><li>系统应该从何处调入这些页面<ul><li>对换区</li><li>文件区</li></ul></li><li>页面调入过程</li><li>缺页率（出计算题）</li></ul></li></ul></li><li>请求分段系统<ul><li>硬件<ul><li>请求分段的段表机构</li><li>缺段中断机构</li><li>地址变换机构<h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3></li></ul></li></ul></li><li>抖动的概念<ul><li>即刚被换出的页很快又要被访问，需要将它重新调入，此时又需要再选一页调出</li></ul></li><li>最佳置换算法(需要预知后面进程，所以不能实现)</li><li>先进先出页面置换算法（FIFO）<ul><li>选择在内存中驻留时间最久的页面予以淘汰</li></ul></li><li>最近最久未使用置换算法（LRU）Recently<ul><li>寄存器支持</li><li>特殊的栈结构</li></ul></li><li>最少使用置换算法（LFU）Frequently</li><li>clock置换算法（对访问位A的判断）<ul><li>改进型——增加对修改位M思维判断</li></ul></li><li>页面缓冲算法（PBA,page buffering algorithm）<ul><li>空闲页面链表</li><li>修改页面链表<h2 id="第六章：输入输出系统"><a href="#第六章：输入输出系统" class="headerlink" title="第六章：输入输出系统"></a>第六章：输入输出系统</h2><h3 id="I-O系统的功能，模型和接口"><a href="#I-O系统的功能，模型和接口" class="headerlink" title="I/O系统的功能，模型和接口"></a>I/O系统的功能，模型和接口</h3></li></ul></li><li>I/O系统管理的对象是I/O设备和相应的设备控制器。</li><li>I/O系统的基本功能<ul><li>隐藏物理设备的细节</li><li>与设备的无关性</li><li>提高处理机和I/O设备的利用率</li><li>对I/O设备进行控制</li><li>确保对设备的正确共享</li><li>错误处理</li></ul></li><li>I/O软件的层次结构<ul><li>用户层I/O软件</li><li>设备独立性软件</li><li>设备驱动程序（厂家开发）</li><li>中断处理程序</li><li>硬件</li></ul></li><li>I/O系统的分层<ul><li>中断处理程序</li><li>设备驱动程序</li><li>设备独立性软件</li></ul></li><li>I/O系统接口<ul><li>块设备接口<ul><li>指以数据块为单位来组织和传送数据信息的设备</li><li>典型的块设备是磁盘、光盘</li><li>块设备的基本特征<ul><li>①传输速率较高，通常每秒钟为几兆位；</li><li>②它是可寻址的，即可随机地读/写任意一块；</li><li>③磁盘设备的I/O采用DMA方式。</li></ul></li></ul></li><li>流设备接口<ul><li>又称字符设备指以单个字符为单位来传送数据信息的设备</li><li>这类设备一般用于数据的输入和输出，有交互式终端、打印机</li><li>字符设备的基本特征<ul><li>①传输速率较低；</li><li>②不可寻址，即不能指定输入时的源地址或输出时的目标地址；</li><li>③字符设备的I/O常采用中断驱动方式。</li></ul></li></ul></li><li>网络通信接口<ul><li>提供网络接入功能，使计算机能通过网络与其他计算机进行通信或上网浏览。<h3 id="I-O设备和设备控制器"><a href="#I-O设备和设备控制器" class="headerlink" title="I/O设备和设备控制器"></a>I/O设备和设备控制器</h3></li></ul></li></ul></li><li>分类<ul><li>使用特性分<ul><li>存储设备</li><li>I/O设备</li></ul></li><li>传输速率分<ul><li>低速设备（几字节——几百字节）<ul><li>典型的设备有键盘、鼠标、语音的输入</li></ul></li><li>中速设备（数千——数万字节）<ul><li>典型的设备有行式打印机、激光打印机</li></ul></li><li>高速设备（数十万——千兆字节）<ul><li>典型的设备有磁带机、磁盘机、光盘机</li></ul></li></ul></li></ul></li><li>设备并不是直接与CPU进行通信，而是与设备控制器通信。在设备与设备控制器之间应该有一个接口。<ul><li>数据信号：控制器 ←  设备 ←  控制器<ul><li>传送数据信号，输入、输出bit</li></ul></li><li>控制信号: 控制器  →  设备<ul><li>执行读、写操作的信号</li></ul></li><li>状态信号：设备当前使用状态</li></ul></li><li>设备控制器<ul><li>主要功能：控制一个或多个I/O设备，以实现I/O设备和计算机之间的数据交换</li><li>基本功能<ul><li>接收和识别命令<ul><li>控制寄存器、命令译码器</li></ul></li><li>数据交换<ul><li>实现CPU与控制器，控制器与设备间的数据交换</li></ul></li><li>标识和报告设备的状态</li><li>地址识别<ul><li>配置地址译码器，识别不同的设备</li></ul></li><li>数据缓冲区</li><li>差错控制</li></ul></li><li>设备控制器的组成<ul><li>设备控制器与处理机（CPU）的接口<ul><li>实现CPU与设备控制器之间的通信</li></ul></li><li>设备控制器与设备的接口<ul><li>控制器可连接多个设备</li></ul></li><li>I/O逻辑<ul><li>实现对设备的控制</li><li>CPU利用该逻辑向控制器发送I/O命令</li><li>命令、地址译码</li></ul></li></ul></li></ul></li><li>内存映像I/O<ul><li>驱动程序将抽象I/O命令转换出的一系列具体的命令，参数等数据装入设备控制器的相应寄存器，由控制器来执行这些命令，具体实施对I/O设备的操作</li></ul></li><li><p>I/O通道</p><ul><li><p>目的：建立独立的I/O操作(组织, 管理和结束)，使由CPU处理的I/O工作转由通道完成（解放CPU，实现并行）</p></li><li><p>什么是I/O通道？</p><ul><li>是一种特殊的处理机，具有通过执行通道程序完成I/O操作的指令</li><li>特点：指令单一(局限于与I/O操作相关的指令)，与CPU共享内存</li></ul></li><li>基本过程：<ul><li>CPU向通道发出I/O指令-&gt;通道接收指令-&gt;从内存取出通道程序处理I/O-&gt;向CPU发出中断</li></ul></li><li>通道类型<ul><li>字节多路通道<ul><li>低中速连接子通道时间片轮转方式共享主通道</li><li>字节多路通道不适于连接高速设备，这推动了按数组方式进行数据传送的数组选择通道的形成。</li></ul></li><li>数组选择通道<ul><li>这种通道可以连接多台高速设备，但只含有一个分配型子通道，在一段时间内只能执行一道通道程序， 控制一台设备进行数据传送， 直至该设备传送完毕释放该通道。这种通道的利用率很低。</li></ul></li><li>数组多路通道<ul><li>含有多个非分配型子通道，前两种通道的组合，通道利用率较好</li></ul></li></ul></li><li>瓶颈问题<ul><li>原因;通道不足</li><li>解决办法：增加设备到主机间的通路，而不增加通道（结果类似RS触发器）<h3 id="中断机构和中断处理程序"><a href="#中断机构和中断处理程序" class="headerlink" title="中断机构和中断处理程序"></a>中断机构和中断处理程序</h3></li></ul></li></ul></li><li>中断<ul><li>分类<ul><li>中断（外部触发）<ul><li>对外部I/O设备发出的中断信号的响应</li></ul></li><li>陷入（内部原因：除0）<ul><li>由CPU内部事件引起的中断</li></ul></li></ul></li><li>中断向量表（类比51单片机）<ul><li>中断程序的入口地址表</li></ul></li><li>中断优先级<ul><li>对紧急程度不同的中断处理方式</li></ul></li><li>对多中断源的处理方式<ul><li>屏蔽中断</li><li>嵌套中断</li></ul></li></ul></li><li>中断处理程序<ul><li>测定是否有未响应的中断信号</li><li>保护被中断进程的CPU环境</li><li>转入相应的设备处理程序</li><li>中断处理</li><li>恢复CPU 的现场并退出中断<h3 id="设备驱动程序"><a href="#设备驱动程序" class="headerlink" title="设备驱动程序"></a>设备驱动程序</h3></li></ul></li><li>是I/O进程与设备控制器之间的通信程序，又由于它常以进程的形式存在，故以后就简称为设备驱动进程</li><li>主要任务是接受来自它上一层的与设备无关软件的抽象请求，并执行这个请求。</li><li>功能<ul><li>1) 接收由I/O进程发来的命令和参数， 并将命令中的抽象要求转换为具体要求。例如，将磁盘块号转换为磁盘的盘面、 磁道号及扇区号。</li><li>2) 检查用户I/O请求的合法性，了解I/O设备的状态，传递有关参数，设置设备的工作方式。 </li><li>3) 发出I/O命令，如果设备空闲，便立即启动I/O设备去完成指定的I/O操作；如果设备处于忙碌状态，则将请求者的请求块挂在设备队列上等待。</li><li>4) 及时响应由控制器或通道发来的中断请求，并根据其中断类型调用相应的中断处理程序进行处理。</li><li>5) 对于设置有通道的计算机系统，驱动程序还应能够根据用户的I/O请求，自动地构成通道程序。 </li></ul></li><li>设备驱动程序的处理过程<ul><li>将用户和上层软件对设备控制的抽象要求转换成对设备的具体要求，如对抽象要求的盘块号转换为磁盘的盘面、磁道及扇区。</li><li>检查I/O请求的合理性。</li><li>读出和检查设备的状态，确保设备处于就绪态。</li><li>传送必要的参数，如传送的字节数，数据在主存的首址等。</li><li>工作方式的设置。</li><li>启动I/O设备，并检查启动是否成功，如成功则将控制返回给I/O控制系统，在I/O设备忙于传送数据时，该用户进程把自己阻塞，直至中断到来才将它唤醒，而CPU可干别的事。</li></ul></li><li>对I/O设备的控制方式<ul><li>I/O控制的宗旨<ul><li>减少CPU对I/O控制的干预</li><li>充分利用CPU完成数据处理工作</li></ul></li><li>I/O 控制方式<ul><li>轮询的可编程I/O方式</li><li>中断驱动I/O方式</li><li>DMA控制方式</li><li>I/O通道控制方式</li></ul></li></ul></li><li>DMA控制器组成<ul><li>主机与DMA控制器的接口</li><li>DMA控制器与块设备的接口</li><li>I/O控制逻辑<h3 id="与设备无关的I-O软件"><a href="#与设备无关的I-O软件" class="headerlink" title="与设备无关的I/O软件"></a>与设备无关的I/O软件</h3></li></ul></li><li>基本概念<ul><li>含义： 应用程序独立于具体使用的物理设备。</li><li>驱动程序是一个与硬件(或设备)紧密相关的软件。为实现设备独立性，须在驱动程序上设置一层软件，称为设备独立性软件。</li><li>设备独立性(Device Independence)的优点<ul><li>以物理设备名使用设备</li><li>引入了逻辑设备名</li><li>逻辑设备名称到物理设备名称的转换（易于实现I/O重定向）</li></ul></li></ul></li><li>与设备无关的软件<ul><li>设备驱动程序的统一接口</li><li>缓存管理</li><li>差错控制</li><li>对独立设备的分配与回收</li><li>独立于设备的逻辑数据块</li></ul></li><li>设备分配中的数据结构<ul><li>设备控制表DCT</li><li>控制器控制表COCT</li><li>通道控制表CHCT</li><li>显然，在有通道的系统中，一个进程只有获得了通道，控制器和所需设备三者之后，才具备了进行I/O操作的物理条件</li><li>系统设备表SDT</li><li>逻辑设备表LUT</li><li>分配的流程，从资源多的到资源紧张的:LUT-&gt;SDT-&gt;DCT-&gt;COCT-&gt;CHCT</li><li>在申请设备的过程中，根据用户请求的I/O设备的逻辑名，查找逻辑设备和物理设备的映射表；以物理设备为索引，查找SDT，找到该设备所连接的DCT；继续查找与该设备连接的COCT和CHCT，就找到了一条通路。<h3 id="用户层的I-O软件"><a href="#用户层的I-O软件" class="headerlink" title="用户层的I/O软件"></a>用户层的I/O软件</h3></li></ul></li><li>系统调用与库函数<ul><li>OS向用户提供的所有功能，用户进程都必须通过系统调用来获取</li><li>在C语言以及UNIX系统中，系统调用（如read）与各系统调用所使用的库函数（如read）之间几乎是一一对应的。而微软的叫Win32API</li></ul></li><li>假脱机系统（spooling）<ul><li>spooling技术是对脱机输入/输出系统的模拟</li><li>主要组成<ul><li>输入/输出井</li><li>输入/输出缓冲区</li><li>输入/输出进程</li><li>井管理程序</li></ul></li><li>特点（体现操作系统的虚拟性）<ul><li>提高了I/O的速度<ul><li>对数据所进行的I/O操作，已从对低速设备演变为对输入井或输出井中的数据存取。</li></ul></li><li>将独占设备改造为共享设备<ul><li>实际分给用户进程的不是打印设备，而是共享输出井中的存储区域 </li></ul></li><li>实现了虚拟设备功能<ul><li>将独占设备变成多台独占的虚拟设备。<h3 id="缓冲区管理"><a href="#缓冲区管理" class="headerlink" title="缓冲区管理"></a>缓冲区管理</h3></li></ul></li></ul></li></ul></li><li>缓冲的引入（原因）<ul><li>缓和CPU与I/O设备间速度不匹配的矛盾</li><li>减少对CPU的中断频率，放宽对CPU中断响应时间的限制</li><li>提高CPU和I/O设备之间的并行性</li><li>解决数据粒度不匹配的问题</li></ul></li><li>单缓冲区<ul><li>即在CPU计算的时候，将数据数据输入到缓冲区(大小取决与T和C的大小)</li></ul></li><li>双缓冲区<ul><li>即允许CPU连续工作（T不断）</li></ul></li><li>环形缓冲区（专为生产者和消费者打造）<ul><li>组成<ul><li>多个缓冲区</li><li>多个指针</li></ul></li><li>使用<ul><li>Getbuf过程</li><li>Releasebuf过程</li></ul></li><li>同步问题</li></ul></li><li>缓冲池(理解为更大的缓冲区)<ul><li>组成<ul><li>空白缓冲队列（emq）<ul><li>由空缓冲区链接而成F(emq)，L(emq)分别指向该队列首尾缓冲区</li></ul></li><li>输入队列（inq）<ul><li>由装满输入数据的缓冲区链接而成F(inq)，L(inq)分别指向该队列首尾缓冲区</li></ul></li><li>输出队列（outq）<ul><li>由装满输出数据的缓冲区链接而成F(outq)， L(outq)分别指向该队列首尾缓冲</li></ul></li></ul></li><li>Getbuf和Putbuf过程<ul><li>收容：缓冲池接收外界数据</li><li>提取：外界从缓冲池获得数据</li></ul></li><li>缓冲区工作方式（从缓冲区的角度来看）<ul><li>收容输入</li><li>提取输入</li><li>收容输出</li><li>提取输出<h3 id="磁盘存储器的性能和调度"><a href="#磁盘存储器的性能和调度" class="headerlink" title="磁盘存储器的性能和调度"></a>磁盘存储器的性能和调度</h3></li></ul></li></ul></li><li>数据的组织和格式</li><li>磁盘的类型<ul><li>固定头磁盘（贵）</li><li>移动头磁盘</li></ul></li><li>磁盘访问的时间（关键）<ul><li>寻道时间Ts=m*n+s</li><li>旋转延迟时间Tr</li><li>传输时间Tt=b/rN</li><li>总时间Ta=Ts+1/2r+b/rN</li></ul></li><li>磁盘的调度算法（掌握图表）<ul><li>先来先服务（FCFS）<ul><li>优点：公平，简单</li><li>缺点：可能导致某些进程的请求长期得不到满足</li></ul></li><li>最短寻道时间优先（SSTF）<ul><li>说明：要求访问的磁道和当前磁头所在的磁道距离最近，以使每次的寻道时间最短</li></ul></li><li>扫描算法（SCAN）<ul><li>扫描算法不仅考虑到欲访问的磁道与当前磁道间的距离，更优先考虑的是磁道当前的移动方向</li><li>联想电梯的运行</li><li>可防止低优先级进程出现“饥饿”的现象</li></ul></li><li>循环扫描算法（CSCAN）<ul><li>算法规定磁头单向移动，例如，只是自里向外移动，当磁头移到最外的磁道并访问后，磁头立即返回到最里的欲访问磁道，亦即将最小磁道号紧接着最大磁道号构成循环，进行循环扫描</li></ul></li><li>NStepScan算法<ul><li>N步SCAN算法是将磁盘请求队列分成若干个长度为N的子队列，磁盘调度将按FCFS算法依次这些子队列。</li></ul></li><li>FSCAN算法<ul><li>是Nstepscan算法的简化，将磁盘请求队列分成两个子队列<h2 id="第七章：文件管理"><a href="#第七章：文件管理" class="headerlink" title="第七章：文件管理"></a>第七章：文件管理</h2><h3 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h3></li></ul></li></ul></li><li>基本数据项</li><li>组合数据项<h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3></li><li>记录是一组相关数据项的集合，用于描述一个对象在某个方面的属性<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3></li><li>文件类型</li><li>文件长度</li><li>文件的物理位置</li><li>文件的建立时间<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3></li><li>创建文件</li><li>删除文件</li><li>读文件</li><li>写文件</li><li>设置文件读写的位置<h3 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h3></li><li>顺序文件</li><li>记录寻址</li><li>索引文件</li><li>索引顺序文件</li><li>直接文件和哈希文件<h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3></li><li>文件控制块（FCB）<ul><li>文件名+inode(属性)</li></ul></li><li>简单的文件目录<ul><li>单级文件目录<ul><li>查找慢</li><li>不允许重名</li><li>不便于实现文件共享</li></ul></li><li>两级文件目录<ul><li>提高检索速度，从M*N到M+N</li></ul></li></ul></li><li>树形结构目录<ul><li>路径名<ul><li>“..”是父目录</li><li>“/”是根目录</li><li>区别绝对路径和相对路径（../…/…/1/2/3/）<h3 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h3></li></ul></li></ul></li><li>有向无循环图（DAG）</li><li>利用符号链接实现文件共享<ul><li>实际上就是“快捷方式”<h3 id="文件保护"><a href="#文件保护" class="headerlink" title="文件保护"></a>文件保护</h3></li></ul></li></ul><p><img src="https://github.com/SSHeRun/CS-Xmind-Note/blob/master/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.png" alt="picture"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算机操作系统&quot;&gt;&lt;a href=&quot;#计算机操作系统&quot; class=&quot;headerlink&quot; title=&quot;计算机操作系统&quot;&gt;&lt;/a&gt;计算机操作系统&lt;/h1&gt;&lt;h2 id=&quot;一-操作系统引论&quot;&gt;&lt;a href=&quot;#一-操作系统引论&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="408" scheme="lovemefan.win/tags/408/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="lovemefan.win/post/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.html%20%202019/12/05/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>lovemefan.win/post/408/计算机网络/index.html  2019/12/05/408/计算机网络/</id>
    <published>2019-12-05T15:37:00.000Z</published>
    <updated>2019-12-05T07:55:37.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-1-章-概述"><a href="#第-1-章-概述" class="headerlink" title="第 1 章   概述"></a>第 1 章   概述</h1><h2 id="计算机网络在信息时代中的作用"><a href="#计算机网络在信息时代中的作用" class="headerlink" title="计算机网络在信息时代中的作用"></a>计算机网络在信息时代中的作用</h2><h3 id="21-世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。"><a href="#21-世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。" class="headerlink" title="21 世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。"></a>21 世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。</h3><h3 id="网络现已成为信息社会的命脉和发展知识经济的重要基础。"><a href="#网络现已成为信息社会的命脉和发展知识经济的重要基础。" class="headerlink" title="网络现已成为信息社会的命脉和发展知识经济的重要基础。"></a>网络现已成为信息社会的命脉和发展知识经济的重要基础。</h3><h3 id="网络是指“三网”，即电信网络、有线电视网络和计算机网络。"><a href="#网络是指“三网”，即电信网络、有线电视网络和计算机网络。" class="headerlink" title="网络是指“三网”，即电信网络、有线电视网络和计算机网络。"></a>网络是指“三网”，即电信网络、有线电视网络和计算机网络。</h3><h3 id="发展最快的并起到核心作用的是计算机网络。"><a href="#发展最快的并起到核心作用的是计算机网络。" class="headerlink" title="发展最快的并起到核心作用的是计算机网络。"></a>发展最快的并起到核心作用的是计算机网络。</h3><h3 id="因特网-Internet-的发展"><a href="#因特网-Internet-的发展" class="headerlink" title="因特网(Internet)的发展"></a>因特网(Internet)的发展</h3><ul><li>进入 20 世纪 90 年代以后，以因特网为代表的计算机网络得到了飞速的发展。</li><li>已从最初的教育科研网络逐步发展成为商业网络。</li><li>已成为仅次于全球电话网的世界第二大网络。 <h3 id="因特网的意义"><a href="#因特网的意义" class="headerlink" title="因特网的意义"></a>因特网的意义</h3></li><li>因特网是自印刷术以来人类通信方面最大的变革。</li><li>现在人们的生活、工作、学习和交往都已离不开因特网。 <h2 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h2><h3 id="网络的网络"><a href="#网络的网络" class="headerlink" title="网络的网络"></a>网络的网络</h3></li><li>起源于美国的因特网现已发展成为世界上最大的国际性计算机互联网 </li><li>网络(network)由若干结点(node)和连接这些结点的链路(link)组成。 </li><li>互联网是“网络的网络”(network of networks)。 </li><li>连接在因特网上的计算机都称为主机(host)。 </li><li>网络与因特网<ul><li>网络把许多计算机连接在一起。</li><li>因特网则把许多网络连接在一起。<h3 id="因特网发展的三个阶段"><a href="#因特网发展的三个阶段" class="headerlink" title="因特网发展的三个阶段"></a>因特网发展的三个阶段</h3></li></ul></li><li>第一阶段是从单个网络 ARPANET 向互联网发展的过程。<ul><li>1983 年 TCP/IP 协议成为 ARPANET 上的标准协议。</li><li>人们把 1983 年作为因特网的诞生时间。</li></ul></li><li>第二阶段的特点是建成了三级结构的因特网。<ul><li>三级计算机网络，分为主干网、地区网和校园网（或企业网）。 </li></ul></li><li>第三阶段的特点是逐渐形成了多层次 ISP 结构的因特网。<ul><li>出现了因特网服务提供者 ISP (Internet Service Provider)。  </li><li>根据提供服务的覆盖面积大小以及所拥有的IP 地址数目的不同，ISP 也分成为不同的层次。<h3 id="因特网的标准化工作"><a href="#因特网的标准化工作" class="headerlink" title="因特网的标准化工作"></a>因特网的标准化工作</h3></li></ul></li><li>制订因特网的正式标准要经过以下的四个阶段 <ul><li>因特网草案(Internet Draft) ——在这个阶段还不是 RFC 文档。</li><li>建议标准(Proposed Standard) ——从这个阶段开始就成为 RFC 文档。</li><li>草案标准(Draft Standard)</li><li>因特网标准(Internet Standard) </li></ul></li><li>各种RFC之间的关系<h3 id="计算机网络在我国的发展"><a href="#计算机网络在我国的发展" class="headerlink" title="计算机网络在我国的发展"></a>计算机网络在我国的发展</h3><h2 id="因特网的组成"><a href="#因特网的组成" class="headerlink" title="因特网的组成"></a>因特网的组成</h2><h3 id="因特网的边缘部分"><a href="#因特网的边缘部分" class="headerlink" title="因特网的边缘部分"></a>因特网的边缘部分</h3></li><li>由所有连接在因特网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。<ul><li>处在因特网边缘的部分就是连接在因特网上的所有的主机。这些主机又称为端系统(end system)。</li><li>“主机 A 和主机 B 进行通信”，实际上是指：“运行在主机 A 上的某个程序和运行在主机 B 上的另一个程序进行通信”。</li><li>即“主机 A 的某个进程和主机 B 上的另一个进程进行通信”。或简称为“计算机之间通信” <h3 id="因特网的核心部分"><a href="#因特网的核心部分" class="headerlink" title="因特网的核心部分"></a>因特网的核心部分</h3></li></ul></li><li>由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）<ul><li>网络核心部分是因特网中最复杂的部分。</li><li>网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一个主机都能够向其他主机通信（即传送或接收各种形式的数据）。</li><li>在网络核心部分起特殊作用的是路由器(router)。<ul><li>路由器是实现分组交换(packet switching)的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。<ul><li>在路由器中的输入和输出端口之间没有直接连线。</li><li>路由器处理分组的过程是：<ul><li>把收到的分组先放入缓存（暂时存储）；</li><li>查找转发表，找出到某个目的地址应从哪个端口转发；</li><li>把分组送到适当的端口转发出去。 </li></ul></li></ul></li></ul></li><li>路由器是实现分组交换(packet switching)的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。 <h2 id="计算机网络在我国的发展-1"><a href="#计算机网络在我国的发展-1" class="headerlink" title="计算机网络在我国的发展"></a>计算机网络在我国的发展</h2><h3 id="1-中国公用计算机互联网-CHINANET"><a href="#1-中国公用计算机互联网-CHINANET" class="headerlink" title="(1) 中国公用计算机互联网 CHINANET"></a>(1) 中国公用计算机互联网 CHINANET</h3><h3 id="2-中国教育和科研计算机网-CERNET"><a href="#2-中国教育和科研计算机网-CERNET" class="headerlink" title="(2) 中国教育和科研计算机网 CERNET"></a>(2) 中国教育和科研计算机网 CERNET</h3><h3 id="3-中国科学技术网-CSTNET"><a href="#3-中国科学技术网-CSTNET" class="headerlink" title="(3) 中国科学技术网 CSTNET"></a>(3) 中国科学技术网 CSTNET</h3><h3 id="4-中国联通互联网-UNINET"><a href="#4-中国联通互联网-UNINET" class="headerlink" title="(4) 中国联通互联网 UNINET"></a>(4) 中国联通互联网 UNINET</h3><h3 id="5-中国网通公用互联网-CNCNET"><a href="#5-中国网通公用互联网-CNCNET" class="headerlink" title="(5) 中国网通公用互联网 CNCNET"></a>(5) 中国网通公用互联网 CNCNET</h3><h3 id="6-中国国际经济贸易互联网-CIETNET"><a href="#6-中国国际经济贸易互联网-CIETNET" class="headerlink" title="(6) 中国国际经济贸易互联网 CIETNET"></a>(6) 中国国际经济贸易互联网 CIETNET</h3><h3 id="7-中国移动互联网-CMNET"><a href="#7-中国移动互联网-CMNET" class="headerlink" title="(7) 中国移动互联网 CMNET"></a>(7) 中国移动互联网 CMNET</h3><h3 id="8-中国长城互联网-CGWNET（建设中）"><a href="#8-中国长城互联网-CGWNET（建设中）" class="headerlink" title="(8) 中国长城互联网 CGWNET（建设中）"></a>(8) 中国长城互联网 CGWNET（建设中）</h3><h3 id="9-中国卫星集团互联网-CSNET（建设中）"><a href="#9-中国卫星集团互联网-CSNET（建设中）" class="headerlink" title="(9) 中国卫星集团互联网 CSNET（建设中）"></a>(9) 中国卫星集团互联网 CSNET（建设中）</h3><h2 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h2><h3 id="计算机网络的定义"><a href="#计算机网络的定义" class="headerlink" title="计算机网络的定义"></a>计算机网络的定义</h3></li></ul></li><li>最简单的定义：计算机网络是一些互相连接的、自治的计算机的集合。</li><li>因特网(Internet)是“网络的网络”。<h3 id="几种不同类别的网络"><a href="#几种不同类别的网络" class="headerlink" title="几种不同类别的网络"></a>几种不同类别的网络</h3></li><li>不同作用范围的网络 <ul><li>广域网 WAN (Wide Area Network)</li><li>局域网 LAN (Local Area Network) </li><li>城域网 MAN (Metropolitan Area Network)</li><li>个人区域网 PAN (Personal Area Network) </li></ul></li><li>从网络的使用者进行分类 <ul><li>公用网 (public network) </li><li>专用网 (private network) <h2 id="计算机网络的性能"><a href="#计算机网络的性能" class="headerlink" title="计算机网络的性能"></a>计算机网络的性能</h2><h3 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h3></li></ul></li><li>速率<ul><li>比特（bit）是计算机中数据量的单位，也是信息论中使用的信息量的单位。</li><li>Bit 来源于 binary digit，意思是一个“二进制数字”，因此一个比特就是二进制数字中的一个 1 或 0。</li><li>速率即数据率(data rate)或比特率(bit rate)是计算机网络中最重要的一个性能指标。速率的单位是 b/s，或kb/s, Mb/s, Gb/s 等</li><li>速率往往是指额定速率或标称速率。  </li></ul></li><li>带宽 <ul><li>“带宽”(bandwidth)本来是指信号具有的频带宽度，单位是赫（或千赫、兆赫、吉赫等）。</li><li>现在“带宽”是数字信道所能传送的“最高数据率”的同义语，单位是“比特每秒”，或 b/s (bit/s)。 </li><li>常用的带宽单位<ul><li>更常用的带宽单位是</li><li>千比每秒，即 kb/s （103 b/s）</li><li>兆比每秒，即 Mb/s（106 b/s）</li><li>吉比每秒，即 Gb/s（109 b/s）</li><li>太比每秒，即 Tb/s（1012 b/s）</li><li>请注意：在计算机界，K = 210 = 1024</li><li>M = 220, G = 230, T = 240。</li></ul></li><li>数字信号流随时间的变化<ul><li>在时间轴上信号的宽度随带宽的增大而变窄。</li></ul></li></ul></li><li>吞吐量<ul><li>吞吐量(throughput)表示在单位时间内通过某个网络（或信道、接口）的数据量。</li><li>吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。</li><li>吞吐量受网络的带宽或网络的额定速率的限制。  </li></ul></li><li>时延(delay 或 latency)<ul><li>传输时延（发送时延 ）    发送数据时，数据块从结点进入到传输媒体所需要的时间。</li><li>也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。 </li><li>传播时延    电磁波在信道中需要传播一定的距离而花费的时间。 </li><li>信号传输速率（即发送速率）和信号在信道上的传播速率是完全不同的概念。 </li><li>处理时延    交换结点为存储转发而进行一些必要的处理所花费的时间。 </li><li>排队时延    结点缓存队列中分组排队所经历的时延。</li><li>排队时延的长短往往取决于网络中当时的通信量。</li><li>数据经历的总时延就是发送时延、传播时延、处理时延和排队时延之和： </li></ul></li><li>时延带宽积<ul><li>链路的时延带宽积又称为以比特为单位的链路长度。 </li></ul></li><li>利用率<ul><li>信道利用率指出某信道有百分之几的时间是被利用的（有数据通过）。完全空闲的信道的利用率是零。</li><li>网络利用率则是全网络的信道利用率的加权平均值。</li><li>信道利用率并非越高越好。 </li></ul></li><li>时延与网络利用率的关系<ul><li>根据排队论的理论，当某信道的利用率增大时，该信道引起的时延也就迅速增加。 </li><li>若令 D0 表示网络空闲时的时延，D 表示网络当前的时延，则在适当的假定条件下，可以用下面的简单公式表示 D 和 D0之间的关系：<ul><li>U 是网络的利用率，数值在 0 到 1 之间。 <h3 id="计算机网络的非性能特征"><a href="#计算机网络的非性能特征" class="headerlink" title="计算机网络的非性能特征"></a>计算机网络的非性能特征</h3></li></ul></li></ul></li><li>费用</li><li>质量</li><li>标准化</li><li>可靠性</li><li>可扩展性和可升级性 </li><li>易于管理和维护 <h2 id="计算机网络的体系结构"><a href="#计算机网络的体系结构" class="headerlink" title="计算机网络的体系结构"></a>计算机网络的体系结构</h2><h3 id="计算机网络体系结构的形成"><a href="#计算机网络体系结构的形成" class="headerlink" title="计算机网络体系结构的形成"></a>计算机网络体系结构的形成</h3></li><li>相互通信的两个计算机系统必须高度协调工作才行，而这种“协调”是相当复杂的。 </li><li>“分层”可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较易于研究和处理。<h3 id="协议与划分层次"><a href="#协议与划分层次" class="headerlink" title="协议与划分层次"></a>协议与划分层次</h3></li><li>划分层次的必要性<ul><li>计算机网络中的数据交换必须遵守事先约定好的规则。 </li><li>这些规则明确规定了所交换的数据的格式以及有关的同步问题（同步含有时序的意思）。</li><li>网络协议(network protocol)，简称为协议，是为进行网络中的数据交换而建立的规则、标准或约定。</li></ul></li><li>网络协议的组成要素<ul><li>语法     数据与控制信息的结构或格式 。 </li><li>语义     需要发出何种控制信息，完成何种动作以及做出何种响应。 </li><li>同步    事件实现顺序的详细说明。</li></ul></li><li>分层的好处 <ul><li>各层之间是独立的。</li><li>灵活性好。</li><li>结构上可分割开。</li><li>易于实现和维护。</li><li>能促进标准化工作。  <h3 id="具有五层协议的体系结构"><a href="#具有五层协议的体系结构" class="headerlink" title="具有五层协议的体系结构"></a>具有五层协议的体系结构</h3></li></ul></li><li>TCP/IP 是四层的体系结构：应用层、运输层、网际层和网络接口层。</li><li>但最下面的网络接口层并没有具体内容。</li><li>因此往往采取折中的办法，即综合 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构 。 <h3 id="实体、协议、服务和服务访问点"><a href="#实体、协议、服务和服务访问点" class="headerlink" title="实体、协议、服务和服务访问点"></a>实体、协议、服务和服务访问点</h3></li><li>实体(entity) 表示任何可发送或接收信息的硬件或软件进程。 </li><li>协议是控制两个对等实体进行通信的规则的集合。 </li><li>在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。</li><li>要实现本层协议，还需要使用下层所提供的服务。 </li><li>本层的服务用户只能看见服务而无法看见下面的协议。</li><li>下面的协议对上面的服务用户是透明的。 </li><li>协议是“水平的”，即协议是控制对等实体之间通信的规则。</li><li>服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。</li><li>同一系统相邻两层的实体进行交互的地方，称为服务访问点 SAP (Service Access Point)。 </li><li>协议必须把所有不利的条件事先都估计到，而不能假定一切都是正常的和非常理想的。 </li><li>看一个计算机网络协议是否正确，不能光看在正常情况下是否正确，而且还必须非常仔细地检查这个协议能否应付各种异常情况。 <h2 id="Internet-和-Internet-的区别"><a href="#Internet-和-Internet-的区别" class="headerlink" title="Internet 和 Internet 的区别"></a>Internet 和 Internet 的区别</h2><h3 id="以小写字母-i-开始的-internet（互联网或互连网）是一个通用名词，它泛指由多个计算机网络互连而成的网络。"><a href="#以小写字母-i-开始的-internet（互联网或互连网）是一个通用名词，它泛指由多个计算机网络互连而成的网络。" class="headerlink" title="以小写字母 i 开始的 internet（互联网或互连网）是一个通用名词，它泛指由多个计算机网络互连而成的网络。"></a>以小写字母 i 开始的 internet（互联网或互连网）是一个通用名词，它泛指由多个计算机网络互连而成的网络。</h3><h3 id="以大写字母I开始的的-Internet（因特网）则是一个专用名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用-TCP-IP-协议族作为通信的规则，且其前身是美国的-ARPANET。"><a href="#以大写字母I开始的的-Internet（因特网）则是一个专用名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用-TCP-IP-协议族作为通信的规则，且其前身是美国的-ARPANET。" class="headerlink" title="以大写字母I开始的的 Internet（因特网）则是一个专用名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用 TCP/IP 协议族作为通信的规则，且其前身是美国的 ARPANET。"></a>以大写字母I开始的的 Internet（因特网）则是一个专用名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用 TCP/IP 协议族作为通信的规则，且其前身是美国的 ARPANET。</h3><h2 id="万维网-WWW-的问世"><a href="#万维网-WWW-的问世" class="headerlink" title="万维网 WWW 的问世"></a>万维网 WWW 的问世</h2><h3 id="因特网已经成为世界上规模最大和增长速率最快的计算机网络，没有人能够准确说出因特网究竟有多大。"><a href="#因特网已经成为世界上规模最大和增长速率最快的计算机网络，没有人能够准确说出因特网究竟有多大。" class="headerlink" title="因特网已经成为世界上规模最大和增长速率最快的计算机网络，没有人能够准确说出因特网究竟有多大。"></a>因特网已经成为世界上规模最大和增长速率最快的计算机网络，没有人能够准确说出因特网究竟有多大。</h3><h3 id="因特网的迅猛发展始于-20-世纪-90-年代。由欧洲原子核研究组织-CERN-开发的万维网-WWW-World-Wide-Web-被广泛使用在因特网上，大大方便了广大非网络专业人员对网络的使用，成为因特网的这种指数级增长的主要驱动力。"><a href="#因特网的迅猛发展始于-20-世纪-90-年代。由欧洲原子核研究组织-CERN-开发的万维网-WWW-World-Wide-Web-被广泛使用在因特网上，大大方便了广大非网络专业人员对网络的使用，成为因特网的这种指数级增长的主要驱动力。" class="headerlink" title="因特网的迅猛发展始于 20 世纪 90 年代。由欧洲原子核研究组织 CERN 开发的万维网 WWW (World Wide Web)被广泛使用在因特网上，大大方便了广大非网络专业人员对网络的使用，成为因特网的这种指数级增长的主要驱动力。"></a>因特网的迅猛发展始于 20 世纪 90 年代。由欧洲原子核研究组织 CERN 开发的万维网 WWW (World Wide Web)被广泛使用在因特网上，大大方便了广大非网络专业人员对网络的使用，成为因特网的这种指数级增长的主要驱动力。</h3><h2 id="客户软件的特点"><a href="#客户软件的特点" class="headerlink" title="客户软件的特点"></a>客户软件的特点</h2><h3 id="被用户调用后运行，在打算通信时主动向远地服务器发起通信（请求服务）。因此，客户程序必须知道服务器程序的地址。"><a href="#被用户调用后运行，在打算通信时主动向远地服务器发起通信（请求服务）。因此，客户程序必须知道服务器程序的地址。" class="headerlink" title="被用户调用后运行，在打算通信时主动向远地服务器发起通信（请求服务）。因此，客户程序必须知道服务器程序的地址。"></a>被用户调用后运行，在打算通信时主动向远地服务器发起通信（请求服务）。因此，客户程序必须知道服务器程序的地址。</h3><h3 id="不需要特殊的硬件和很复杂的操作系统。"><a href="#不需要特殊的硬件和很复杂的操作系统。" class="headerlink" title="不需要特殊的硬件和很复杂的操作系统。"></a>不需要特殊的硬件和很复杂的操作系统。</h3><h2 id="服务器软件的特点"><a href="#服务器软件的特点" class="headerlink" title="服务器软件的特点"></a>服务器软件的特点</h2><h3 id="一种专门用来提供某种服务的程序，可同时处理多个远地或本地客户的请求。"><a href="#一种专门用来提供某种服务的程序，可同时处理多个远地或本地客户的请求。" class="headerlink" title="一种专门用来提供某种服务的程序，可同时处理多个远地或本地客户的请求。"></a>一种专门用来提供某种服务的程序，可同时处理多个远地或本地客户的请求。</h3><h3 id="系统启动后即自动调用并一直不断地运行着，被动地等待并接受来自各地的客户的通信请求。因此，服务器程序不需要知道客户程序的地址。"><a href="#系统启动后即自动调用并一直不断地运行着，被动地等待并接受来自各地的客户的通信请求。因此，服务器程序不需要知道客户程序的地址。" class="headerlink" title="系统启动后即自动调用并一直不断地运行着，被动地等待并接受来自各地的客户的通信请求。因此，服务器程序不需要知道客户程序的地址。"></a>系统启动后即自动调用并一直不断地运行着，被动地等待并接受来自各地的客户的通信请求。因此，服务器程序不需要知道客户程序的地址。</h3><h3 id="一般需要强大的硬件和高级的操作系统支持。"><a href="#一般需要强大的硬件和高级的操作系统支持。" class="headerlink" title="一般需要强大的硬件和高级的操作系统支持。"></a>一般需要强大的硬件和高级的操作系统支持。</h3><h2 id="因特网的边缘部分与核心部分"><a href="#因特网的边缘部分与核心部分" class="headerlink" title="因特网的边缘部分与核心部分"></a>因特网的边缘部分与核心部分</h2><h2 id="两种国际标准"><a href="#两种国际标准" class="headerlink" title="两种国际标准"></a>两种国际标准</h2><h3 id="法律上的-de-jure-国际标准-OSI-并没有得到市场的认可。"><a href="#法律上的-de-jure-国际标准-OSI-并没有得到市场的认可。" class="headerlink" title="法律上的(de jure)国际标准 OSI 并没有得到市场的认可。"></a>法律上的(de jure)国际标准 OSI 并没有得到市场的认可。</h3><h3 id="是非国际标准-TCP-IP-现在获得了最广泛的应用。"><a href="#是非国际标准-TCP-IP-现在获得了最广泛的应用。" class="headerlink" title="是非国际标准 TCP/IP 现在获得了最广泛的应用。"></a>是非国际标准 TCP/IP 现在获得了最广泛的应用。</h3><h3 id="TCP-IP-常被称为事实上的-de-facto-国际标准。"><a href="#TCP-IP-常被称为事实上的-de-facto-国际标准。" class="headerlink" title="TCP/IP 常被称为事实上的(de facto) 国际标准。"></a>TCP/IP 常被称为事实上的(de facto) 国际标准。</h3><h2 id="主机-1-向主机-2-发送数据"><a href="#主机-1-向主机-2-发送数据" class="headerlink" title="主机 1 向主机 2 发送数据"></a>主机 1 向主机 2 发送数据</h2><h2 id="主机-1-向主机-2-发送数据-1"><a href="#主机-1-向主机-2-发送数据-1" class="headerlink" title="主机 1 向主机 2 发送数据"></a>主机 1 向主机 2 发送数据</h2><h2 id="主机-1-向主机-2-发送数据-2"><a href="#主机-1-向主机-2-发送数据-2" class="headerlink" title="主机 1 向主机 2 发送数据"></a>主机 1 向主机 2 发送数据</h2><h2 id="主机-1-向主机-2-发送数据-3"><a href="#主机-1-向主机-2-发送数据-3" class="headerlink" title="主机 1 向主机 2 发送数据"></a>主机 1 向主机 2 发送数据</h2><h2 id="主机-1-向主机-2-发送数据-4"><a href="#主机-1-向主机-2-发送数据-4" class="headerlink" title="主机 1 向主机 2 发送数据"></a>主机 1 向主机 2 发送数据</h2><h2 id="主机-1-向主机-2-发送数据-5"><a href="#主机-1-向主机-2-发送数据-5" class="headerlink" title="主机 1 向主机 2 发送数据"></a>主机 1 向主机 2 发送数据</h2><h2 id="主机-1-向主机-2-发送数据-6"><a href="#主机-1-向主机-2-发送数据-6" class="headerlink" title="主机 1 向主机 2 发送数据"></a>主机 1 向主机 2 发送数据</h2><h2 id="主机-1-向主机-2-发送数据-7"><a href="#主机-1-向主机-2-发送数据-7" class="headerlink" title="主机 1 向主机 2 发送数据"></a>主机 1 向主机 2 发送数据</h2><h2 id="主机-1-向主机-2-发送数据-8"><a href="#主机-1-向主机-2-发送数据-8" class="headerlink" title="主机 1 向主机 2 发送数据"></a>主机 1 向主机 2 发送数据</h2><h2 id="主机-1-向主机-2-发送数据-9"><a href="#主机-1-向主机-2-发送数据-9" class="headerlink" title="主机 1 向主机 2 发送数据"></a>主机 1 向主机 2 发送数据</h2><h2 id="主机-1-向主机-2-发送数据-10"><a href="#主机-1-向主机-2-发送数据-10" class="headerlink" title="主机 1 向主机 2 发送数据"></a>主机 1 向主机 2 发送数据</h2><h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h2><h3 id="在发送端，先把较长的报文划分成较短的、固定长度的数据段。"><a href="#在发送端，先把较长的报文划分成较短的、固定长度的数据段。" class="headerlink" title="在发送端，先把较长的报文划分成较短的、固定长度的数据段。"></a>在发送端，先把较长的报文划分成较短的、固定长度的数据段。</h3><h3 id="添加首部构成分组"><a href="#添加首部构成分组" class="headerlink" title="添加首部构成分组"></a>添加首部构成分组</h3></li><li>每一个数据段前面添加上首部构成分组<h3 id="分组交换的传输单元"><a href="#分组交换的传输单元" class="headerlink" title="分组交换的传输单元"></a>分组交换的传输单元</h3></li><li>分组交换网以“分组”作为数据传输单元。</li><li>依次把各分组发送到接收端（假定接收端在左边）<h3 id="分组首部的重要性"><a href="#分组首部的重要性" class="headerlink" title="分组首部的重要性"></a>分组首部的重要性</h3></li><li>每一个分组的首部都含有地址等控制信息。</li><li>分组交换网中的结点交换机根据收到的分组的首部中的地址信息，把分组转发到下一个结点交换机。</li><li>用这样的存储转发方式，最后分组就能到达最终目的地。<h3 id="收到分组后剥去首部"><a href="#收到分组后剥去首部" class="headerlink" title="收到分组后剥去首部"></a>收到分组后剥去首部</h3></li><li>接收端收到分组后剥去首部还原成报文<h3 id="最后还原成原来的报文"><a href="#最后还原成原来的报文" class="headerlink" title="最后还原成原来的报文"></a>最后还原成原来的报文</h3><h3 id="分组交换的优点"><a href="#分组交换的优点" class="headerlink" title="分组交换的优点"></a>分组交换的优点</h3></li><li>高效    动态分配传输带宽，对通信链路是逐段占用。 </li><li>灵活    以分组为传送单位和查找路由。</li><li>迅速    不必先建立连接就能向其他主机发送分组。</li><li>可靠    保证可靠性的网络协议；分布式的路由选择协议使网络有很好的生存性。<h3 id="分组交换带来的问题"><a href="#分组交换带来的问题" class="headerlink" title="分组交换带来的问题"></a>分组交换带来的问题</h3></li><li>分组在各结点存储转发时需要排队，这就会造成一定的时延。 </li><li>分组必须携带的首部（里面有必不可少的控制信息）也造成了一定的开销。<h2 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h2><h3 id="两部电话机只需要用一对电线就能够互相连接起来。"><a href="#两部电话机只需要用一对电线就能够互相连接起来。" class="headerlink" title="两部电话机只需要用一对电线就能够互相连接起来。"></a>两部电话机只需要用一对电线就能够互相连接起来。</h3><h3 id="更多的电话机互相连通"><a href="#更多的电话机互相连通" class="headerlink" title="更多的电话机互相连通"></a>更多的电话机互相连通</h3></li><li>5 部电话机两两相连，需 10 对电线。</li><li>N 部电话机两两相连，需 N(N – 1)/2 对电线。</li><li>当电话机的数量很大时，这种连接方法需要的电线对的数量与电话机数的平方成正比。<h3 id="使用交换机"><a href="#使用交换机" class="headerlink" title="使用交换机"></a>使用交换机</h3></li><li>当电话机的数量增多时，就要使用交换机来完成全网的交换任务。<h3 id="电路交换的特点"><a href="#电路交换的特点" class="headerlink" title="电路交换的特点"></a>电路交换的特点</h3></li><li>电路交换必定是面向连接的。 </li><li>电路交换的三个阶段：<ul><li>建立连接</li><li>通信</li><li>释放连接</li></ul></li><li>电路交换传送计算机数据效率低<ul><li>计算机数据具有突发性。</li><li>这导致通信线路的利用率很低。<h2 id="三种交换的比较"><a href="#三种交换的比较" class="headerlink" title="三种交换的比较"></a>三种交换的比较</h2><h2 id="两种通信方式"><a href="#两种通信方式" class="headerlink" title="两种通信方式"></a>两种通信方式</h2><h3 id="客户服务器方式（C-S-方式）-即Client-Server方式"><a href="#客户服务器方式（C-S-方式）-即Client-Server方式" class="headerlink" title="客户服务器方式（C/S 方式）   即Client/Server方式"></a>客户服务器方式（C/S 方式）   即Client/Server方式</h3></li></ul></li><li>客户(client)和服务器(server)都是指通信中所涉及的两个应用进程。</li><li>客户服务器方式所描述的是进程之间服务和被服务的关系。</li><li>客户是服务的请求方，服务器是服务的提供方。<h3 id="对等方式（P2P-方式）-即-Peer-to-Peer方式"><a href="#对等方式（P2P-方式）-即-Peer-to-Peer方式" class="headerlink" title="对等方式（P2P 方式）   即 Peer-to-Peer方式"></a>对等方式（P2P 方式）   即 Peer-to-Peer方式</h3></li><li>对等连接(peer-to-peer，简写为 P2P)是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。</li><li>只要两个主机都运行了对等连接软件（P2P 软件），它们就可以进行平等的、对等连接通信。</li><li>双方都可以下载对方已经存储在硬盘中的共享文档。 </li><li>对等连接方式的特点<ul><li>对等连接方式从本质上看仍然是使用客户服务器方式，只是对等连接中的每一个主机既是客户又同时是服务器。</li><li>例如主机 C 请求 D 的服务时，C 是客户，D 是服务器。但如果 C 又同时向 F提供服务，那么 C 又同时起着服务器的作用。<h2 id="TCP-IP-的体系结构"><a href="#TCP-IP-的体系结构" class="headerlink" title="TCP/IP 的体系结构"></a>TCP/IP 的体系结构</h2><h2 id="关于开放系统互连参考模型OSI-RM"><a href="#关于开放系统互连参考模型OSI-RM" class="headerlink" title="关于开放系统互连参考模型OSI/RM"></a>关于开放系统互连参考模型OSI/RM</h2><h3 id="只要遵循-OSI-标准，一个系统就可以和位于世界上任何地方的、也遵循这同一标准的其他任何系统进行通信。"><a href="#只要遵循-OSI-标准，一个系统就可以和位于世界上任何地方的、也遵循这同一标准的其他任何系统进行通信。" class="headerlink" title="只要遵循 OSI 标准，一个系统就可以和位于世界上任何地方的、也遵循这同一标准的其他任何系统进行通信。"></a>只要遵循 OSI 标准，一个系统就可以和位于世界上任何地方的、也遵循这同一标准的其他任何系统进行通信。</h3><h3 id="在市场化方面-OSI-却失败了。"><a href="#在市场化方面-OSI-却失败了。" class="headerlink" title="在市场化方面 OSI 却失败了。"></a>在市场化方面 OSI 却失败了。</h3></li></ul></li><li>OSI 的专家们在完成 OSI 标准时没有商业驱动力；</li><li>OSI 的协议实现起来过分复杂，且运行效率很低；</li><li>OSI 标准的制定周期太长，因而使得按 OSI 标准生产的设备无法及时进入市场；</li><li>OSI 的层次划分并也不太合理，有些功能在多个层次中重复出现。  </li></ul><p><img src="https://github.com/SSHeRun/CS-Xmind-Note/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%201%20%E7%AB%A0%20%20%20%E6%A6%82%E8%BF%B0/%E7%AC%AC%201%20%E7%AB%A0%20%20%20%E6%A6%82%E8%BF%B0.png" alt="picture"></p><h1 id="第-2-章-物理层"><a href="#第-2-章-物理层" class="headerlink" title="第 2 章  物理层"></a>第 2 章  物理层</h1><h2 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h2><h3 id="物理层的主要任务描述为确定与传输媒体的接口的一些特性"><a href="#物理层的主要任务描述为确定与传输媒体的接口的一些特性" class="headerlink" title="物理层的主要任务描述为确定与传输媒体的接口的一些特性"></a>物理层的主要任务描述为确定与传输媒体的接口的一些特性</h3><ul><li>机械特性    指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。</li><li>电气特性    指明在接口电缆的各条线上出现的电压的范围。</li><li>功能特性    指明某条线上出现的某一电平的电压表示何种意义。</li><li>过程特性    指明对于不同功能的各种可能事件的出现顺序。 <h2 id="数据通信的基础知识"><a href="#数据通信的基础知识" class="headerlink" title="数据通信的基础知识"></a>数据通信的基础知识</h2><h3 id="数据通信系统的模型"><a href="#数据通信系统的模型" class="headerlink" title="数据通信系统的模型"></a>数据通信系统的模型</h3></li><li><h3 id="有关信道的几个基本概念"><a href="#有关信道的几个基本概念" class="headerlink" title="有关信道的几个基本概念"></a>有关信道的几个基本概念</h3></li><li>单向通信（单工通信）——只能有一个方向的通信而没有反方向的交互。</li><li>双向交替通信（半双工通信）——通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。</li><li>双向同时通信（全双工通信）——通信的双方可以同时发送和接收信息。 </li><li>几种最基本的调制方法<ul><li>调幅(AM)：载波的振幅随基带数字信号而变化。 </li><li>调频(FM)：载波的频率随基带数字信号而变化。</li><li>调相(PM) ：载波的初始相位随基带数字信号而变化。 </li><li>概要: 图片<h3 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h3></li></ul></li><li>信道能够通过的频率范围<ul><li>1924 年，奈奎斯特(Nyquist)就推导出了著名的奈氏准则。他给出了在假定的理想条件下，为了避免码间串扰，码元的传输速率的上限值</li></ul></li><li>信噪比<ul><li>香农(Shannon)用信息论的理论推导出了带宽受限且有高斯白噪声干扰的信道的极限、无差错的信息传输速率。<br>信道的极限信息传输速率 C 可表达为<br>C = W log2(1+S/N)  b/s<br>W 为信道的带宽（以 Hz 为单位）；<br>S 为信道内所传信号的平均功率；<br>N 为信道内部的高斯噪声功率。<ul><li>香农公式表明<ul><li>信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高。 </li><li>只要信息传输速率低于信道的极限信息传输速率，就一定可以找到某种办法来实现无差错的传输。 </li><li>若信道带宽 W 或信噪比 S/N 没有上限（当然实际信道不可能是这样的），则信道的极限信息传输速率 C 也就没有上限。</li><li>实际信道上能够达到的信息传输速率要比香农的极限传输速率低不少。<h3 id="信道的极限信息传输速率"><a href="#信道的极限信息传输速率" class="headerlink" title="信道的极限信息传输速率"></a>信道的极限信息传输速率</h3><h2 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h2><h3 id="导向传输媒体"><a href="#导向传输媒体" class="headerlink" title="导向传输媒体"></a>导向传输媒体</h3></li></ul></li></ul></li></ul></li><li>双绞线<ul><li>屏蔽双绞线 STP (Shielded Twisted Pair)</li><li>无屏蔽双绞线 UTP (Unshielded Twisted Pair) </li></ul></li><li>同轴电缆<ul><li>50 Ω同轴电缆</li><li>75 Ω 同轴电缆</li></ul></li><li>光缆 <ul><li>光纤的工作原理<ul><li>光线在纤芯中传输的方式是不断地全反射<h3 id="非导向传输媒体"><a href="#非导向传输媒体" class="headerlink" title="非导向传输媒体"></a>非导向传输媒体</h3></li></ul></li></ul></li><li>无线传输所使用的频段很广。</li><li>短波通信主要是靠电离层的反射，但短波信道的通信质量较差。</li><li>微波在空间主要是直线传播。 <ul><li>卫星通信  </li><li>地面微波接力通信<h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><h3 id="频分复用、时分复用和统计时分复用"><a href="#频分复用、时分复用和统计时分复用" class="headerlink" title="频分复用、时分复用和统计时分复用"></a>频分复用、时分复用和统计时分复用</h3></li></ul></li><li>频分复用 FDM(Frequency Division Multiplexing) <ul><li>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。<ul><li>示意图</li></ul></li></ul></li><li>时分复用TDM(Time Division Multiplexing) <ul><li>时分复用则是将时间划分为一段段等长的时分复用帧（TDM 帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。<ul><li>示意图</li></ul></li></ul></li><li>统计时分复用 STDM(Statistic TDM)  <ul><li>是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。<ul><li>示意图<h3 id="波分复用"><a href="#波分复用" class="headerlink" title="波分复用"></a>波分复用</h3></li></ul></li></ul></li><li>波分复用 WDM(Wavelength Division Multiplexing)  <ul><li>光的频分复用。由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。<h3 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h3></li></ul></li><li>码分复用 CDM(Code Division Multiplexing)  <ul><li>常用的名词是码分多址 CDMA     (Code Division Multiple Access)。</li><li>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。</li><li>这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。 </li><li>每一个比特时间划分为 m 个短的间隔，称为码片(chip)。</li><li>具体内容<ul><li>1.为每个用户分配 m bit 的码片，并且所有的码片正交，对于任意两个码片 S 和 T 有</li><li>2.为了讨论方便，取 m=8，设码片 s 为 00011011。在拥有该码片的用户发送比特 1 时就发送该码片，发送比特 0 时就发送该码片的反码 11100100。</li></ul></li></ul></li></ul><p>在计算时将 00011011 记作 (-1 -1 -1 +1 +1 -1 +1 +1)，可以得到(其中 S’ 为 S 的反码。)</p><pre><code>    * 3.利用上面的式子我们知道，当接收端使用码片  对接收到的数据进行内积运算时，结果为 0 的是其它用户发送的数据，结果为 1 的是用户发送的比特 1，结果为 -1 的是用户发送的比特 0。* 码分复用需要发送的数据量为原先的 m 倍。</code></pre><h2 id="数字传输系统"><a href="#数字传输系统" class="headerlink" title="数字传输系统"></a>数字传输系统</h2><h3 id="脉码调制-PCM-体制"><a href="#脉码调制-PCM-体制" class="headerlink" title="脉码调制 PCM 体制"></a>脉码调制 PCM 体制</h3><h3 id="同步光纤网-SONET-和同步数字系列-SDH"><a href="#同步光纤网-SONET-和同步数字系列-SDH" class="headerlink" title="同步光纤网 SONET 和同步数字系列 SDH"></a>同步光纤网 SONET 和同步数字系列 SDH</h3><h2 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h2><h3 id="xDSL技术"><a href="#xDSL技术" class="headerlink" title="xDSL技术"></a>xDSL技术</h3><ul><li>xDSL 技术就是用数字技术对现有的模拟电话用户线进行改造，使它能够承载宽带业务。把 0~4 kHz 低端频谱留给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用。<h3 id="光纤同轴混合网（HFC-网）"><a href="#光纤同轴混合网（HFC-网）" class="headerlink" title="光纤同轴混合网（HFC 网）"></a>光纤同轴混合网（HFC 网）</h3></li><li>HFC 网是在目前覆盖面很广的有线电视网 CATV 的基础上开发的一种居民宽带接入网。HFC 网除可传送 CATV 外，还提供电话、数据和其他宽带交互型业务。<h3 id="FTTx-技术"><a href="#FTTx-技术" class="headerlink" title="FTTx 技术"></a>FTTx 技术</h3></li><li>FTTx（光纤到……）也是一种实现宽带居民接入网的方案。这里字母 x 可代表不同意思。<ul><li>光纤到家 FTTH (Fiber To The Home)：光纤一直铺设到用户家庭可能是居民接入网最后的解决方法。</li><li>光纤到大楼 FTTB (Fiber To The Building)：光纤进入大楼后就转换为电信号，然后用电缆或双绞线分配到各用户。</li><li>光纤到路边 FTTC (Fiber To The Curb)：从路边到各用户可使用星形结构双绞线作为传输媒体。<br><img src="https://github.com/SSHeRun/CS-Xmind-Note/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%202%20%E7%AB%A0%20%20%E7%89%A9%E7%90%86%E5%B1%82/%E7%AC%AC%202%20%E7%AB%A0%20%20%E7%89%A9%E7%90%86%E5%B1%82.png" alt="picture"></li></ul></li></ul><h1 id="第-3-章-数据链路层"><a href="#第-3-章-数据链路层" class="headerlink" title="第 3 章  数据链路层"></a>第 3 章  数据链路层</h1><h2 id="使用点对点信道的数据链路层"><a href="#使用点对点信道的数据链路层" class="headerlink" title="使用点对点信道的数据链路层"></a>使用点对点信道的数据链路层</h2><h3 id="数据链路和帧"><a href="#数据链路和帧" class="headerlink" title="数据链路和帧"></a>数据链路和帧</h3><ul><li>数据链路层使用的信道主要有以下两种类型：<ul><li>点对点信道。这种信道使用一对一的点对点通信方式。</li><li>广播信道。这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发 </li></ul></li><li>数据链路层模型</li><li>链路(link)是一条无源的点到点的物理线路段，中间没有任何其他的交换结点。</li><li>数据链路(data link) 除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。</li><li>数据链路层传送的是帧<h3 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h3></li><li>(1) 封装成帧<ul><li>将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。<ul><li></li></ul></li></ul></li><li>(2) 透明传输<ul><li>透明表示一个实际存在的事物看起来好像不存在一样。</li><li>帧使用首部和尾部进行定界，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据部分出现首部尾部相同的内容前面插入转义字符。如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。<ul><li></li></ul></li></ul></li><li><p>(3) 差错控制 </p><ul><li>循环冗余检验 CRC<br>目前数据链路层广泛使用了循环冗余检验（CRC）来检查比特差错。</li><li>帧检验序列 FCS<br>在数据后面添加上的冗余码称为帧检验序列 FCS (Frame Check Sequence)。</li><li><p>冗余码的计算</p><ul><li>例子：<br>现在 k = 6, M = 101001。<br>设 n = 3, 除数 P = 1101，<br>被除数是 2^nM = 101001000。<br>模 2 运算的结果是：商 Q = 110101，<br> 余数 R = 001。<br>把余数 R 作为冗余码添加在数据 M 的后面发送出去。发送的数据是：2^nM + R<br>即：101001001，共 (k + n) 位。 </li></ul></li><li><p>概要: CRC 是一种常用的检错方法，而 FCS 是添加在数据后面的冗余码。<br>FCS 可以用 CRC 这种方法得出，但 CRC 并非用来获得 FCS 的唯一方法。</p><h2 id="点对点协议-PPP"><a href="#点对点协议-PPP" class="headerlink" title="点对点协议 PPP"></a>点对点协议 PPP</h2><h3 id="PPP-协议的特点"><a href="#PPP-协议的特点" class="headerlink" title="PPP 协议的特点"></a>PPP 协议的特点</h3></li></ul></li><li>互联网用户通常需要连接到某个 ISP 之后才能接入到互联网，PPP 协议是用户计算机和 ISP 进行通信时所使用的数据链路层协议。<h3 id="PPP-协议的帧格式"><a href="#PPP-协议的帧格式" class="headerlink" title="PPP 协议的帧格式"></a>PPP 协议的帧格式</h3></li><li>示意图：<br>F 字段为帧的定界符<br>A 和 C 字段暂时没有意义<br>FCS 字段是使用 CRC 的检验序列<br>信息部分的长度不超过 1500<h3 id="PPP-协议的工作状态"><a href="#PPP-协议的工作状态" class="headerlink" title="PPP 协议的工作状态"></a>PPP 协议的工作状态</h3></li><li>过程：<br>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。<br>PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。<br>这些分组及其响应选择一些 PPP 参数，和进行网络层配置，NCP 给新接入的 PC机分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。<br>通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。<h2 id="使用广播信道的数据链路层"><a href="#使用广播信道的数据链路层" class="headerlink" title="使用广播信道的数据链路层"></a>使用广播信道的数据链路层</h2><h3 id="局域网的数据链路层"><a href="#局域网的数据链路层" class="headerlink" title="局域网的数据链路层"></a>局域网的数据链路层</h3></li><li>局域网是一种典型的广播信道，主要特点是网络为一个单位所拥有，且地理范围和站点数目均有限。</li><li>主要有以太网、令牌环网、FDDI 和 ATM 等局域网技术，目前以太网占领着有线局域网市场。</li><li>可以按照网络拓扑结构对局域网进行分类：<ul><li>星形网</li><li>环形网</li><li>总线网</li><li>树形网 </li></ul></li><li>数据链路层的两个子层 <ul><li>逻辑链路控制 LLC (Logical Link Control)子层</li><li>媒体接入控制 MAC (Medium Access Control)子层。</li><li>概要: 与接入到传输媒体有关的内容都放在 MAC子层，而 LLC 子层则与传输媒体无关，不管采用何种协议的局域网对 LLC 子层来说都是透明的<br>所以以后一般不考虑 LLC 子层 </li></ul></li><li>适配器<ul><li>网络接口板又称为通信适配器(adapter)或网络接口卡 NIC (Network Interface Card)，或“网卡”。<ul><li>适配器的重要功能：<ul><li>进行串行/并行转换。</li><li>对数据进行缓存。</li><li>在计算机的操作系统安装设备驱动程序。</li><li>实现以太网协议。 <h3 id="CSMA-CD-协议"><a href="#CSMA-CD-协议" class="headerlink" title="CSMA/CD 协议"></a>CSMA/CD 协议</h3></li></ul></li></ul></li></ul></li><li>CSMA/CD 表示载波监听多点接入 / 碰撞检测。<ul><li>多点接入 ：说明这是总线型网络，许多主机以多点的方式连接到总线上。</li><li>载波监听 ：每个主机都必须不停地监听信道。在发送前，如果监听到信道正在使用，就必须等待。</li><li>碰撞检测 ：在发送中，如果监听到信道已有其它主机正在发送数据，就表示发生了碰撞。虽然每个主机在发送数据之前都已经监听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。</li></ul></li><li>具体内容<ul><li>记端到端的传播时延为 τ，最先发送的站点最多经过 2τ 就可以知道是否发生了碰撞，称 2τ 为 争用期 。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</li><li>当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用 截断二进制指数退避算法 来确定。从离散的整数集合 {0, 1, .., (2k-1)} 中随机取出一个数，记作 r，然后取 r 倍的争用期作为重传等待时间。</li><li>概要: 示意图<h2 id="使用广播信道的以太网"><a href="#使用广播信道的以太网" class="headerlink" title="使用广播信道的以太网"></a>使用广播信道的以太网</h2><h3 id="使用集线器的星形拓扑"><a href="#使用集线器的星形拓扑" class="headerlink" title="使用集线器的星形拓扑"></a>使用集线器的星形拓扑</h3></li></ul></li><li>传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆，最后发展为使用更便宜和更灵活的双绞线。<br>这种以太网采用星形拓扑，在星形的中心则增加了一种可靠性非常高的设备，叫做集线器(hub)  <h3 id="以太网的信道利用率"><a href="#以太网的信道利用率" class="headerlink" title="以太网的信道利用率"></a>以太网的信道利用率</h3></li><li>一个帧从开始发送，经可能发生的碰撞后，将再重传数次，到发送成功且信道转为空闲(即再经过时间 τ  使得信道上无信号在传播)时为止，是发送一帧所需的平均时间。 </li><li>发送一帧占用线路的时间是 T0 +  τ ，而帧本身的发送时间是 T0。于是我们可计算出理想情况下的极限信道利用率 Smax为： <h3 id="以太网的-MAC-层"><a href="#以太网的-MAC-层" class="headerlink" title="以太网的 MAC 层"></a>以太网的 MAC 层</h3></li><li>MAC 地址是链路层地址，长度为 6 字节（48 位），用于唯一标识网络适配器（网卡）。</li><li>一台主机拥有多少个网络适配器就有多少个 MAC 地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个 MAC 地址。<h3 id="以太网帧格式："><a href="#以太网帧格式：" class="headerlink" title="以太网帧格式："></a>以太网帧格式：</h3></li><li>类型 ：标记上层使用的协议；<br>数据 ：长度在 46-1500 之间，如果太小则需要填充；<br>FCS ：帧检验序列，使用的是 CRC 检验方法；<h2 id="扩展的以太网"><a href="#扩展的以太网" class="headerlink" title="扩展的以太网"></a>扩展的以太网</h2><h3 id="在物理层扩展以太网"><a href="#在物理层扩展以太网" class="headerlink" title="在物理层扩展以太网"></a>在物理层扩展以太网</h3></li><li>用多个集线器可连成更大的局域网<ul><li>用集线器组成更大的局域网都在一个碰撞域中<ul><li>优点<ul><li>使原来属于不同碰撞域的局域网上的计算机能够进行跨碰撞域的通信。</li><li>扩大了局域网覆盖的地理范围。</li></ul></li><li>缺点<ul><li>碰撞域增大了，但总的吞吐量并未提高。</li><li>如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。<h3 id="在数据链路层扩展以太网"><a href="#在数据链路层扩展以太网" class="headerlink" title="在数据链路层扩展以太网"></a>在数据链路层扩展以太网</h3></li></ul></li></ul></li></ul></li><li>在数据链路层扩展局域网是使用网桥。<ul><li>网桥工作在数据链路层，它根据 MAC 帧的目的地址对收到的帧进行转发。<br>网桥具有过滤帧的功能。当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的 MAC 地址，然后再确定将该帧转发到哪一个接口 。<ul><li>优点<ul><li>过滤通信量。 </li><li>扩大了物理范围。</li><li>提高了可靠性。</li><li>可互连不同物理层、不同 MAC 子层和不同速率（如10 Mb/s 和 100 Mb/s 以太网）的局域网。</li></ul></li><li>缺点<ul><li>存储转发增加了时延。 </li><li>在MAC 子层并没有流量控制功能。 </li><li>具有不同 MAC 子层的网段桥接在一起时时延更大。</li><li>网桥只适合于用户数不太多(不超过几百个)和通信量不太大的局域网，否则有时还会因传播过多的广播信息而产生网络拥塞。这就是所谓的广播风暴。  </li></ul></li></ul></li><li>交换机<ul><li>交换机具有自学习能力，学习的是交换表的内容，交换表中存储着 MAC 地址到接口的映射。<br>正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。<ul><li>下图中，交换机有 4 个接口，主机 A 向主机 B 发送数据帧时，交换机把主机 A 到接口 1 的映射写入交换表中。为了发送数据帧到 B，先查交换表，此时没有主机 B 的表项，那么主机 A 就发送广播帧，主机 C 和主机 D 会丢弃该帧，主机 B 回应该帧向主机 A 发送数据包时，交换机查找交换表得到主机 A 映射的接口为 1，就发送数据帧到接口 1，同时交换机添加主机 B 到接口 2 的映射。<h3 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h3></li></ul></li></ul></li></ul></li><li>虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息。</li><li>例如下图中 (A1, A2, A3, A4) 属于一个虚拟局域网，A1 发送的广播会被 A2、A3、A4 收到，而其它站点收不到。</li><li>使用 VLAN 干线连接来建立虚拟局域网，每台交换机上的一个特殊接口被设置为干线接口，以互连 VLAN 交换机。IEEE 定义了一种扩展的以太网帧格式 802.1Q，它在标准以太网帧上加进了 4 字节首部 VLAN 标签，用于表示该帧属于哪一个虚拟局域网。<h2 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h2><h3 id="100BASE-T-以太网"><a href="#100BASE-T-以太网" class="headerlink" title="100BASE-T 以太网"></a>100BASE-T 以太网</h3></li><li>速率达到或超过 100 Mb/s 的以太网称为高速以太网</li><li>可在全双工方式下工作而无冲突发生。因此，不使用 CSMA/CD 协议。<h3 id="吉比特以太网"><a href="#吉比特以太网" class="headerlink" title="吉比特以太网"></a>吉比特以太网</h3></li><li>允许在 1 Gb/s 下全双工和半双工两种方式工作。</li><li>在半双工方式下使用 CSMA/CD 协议（全双工方式不需要使用 CSMA/CD 协议）。<h3 id="10-吉比特以太网"><a href="#10-吉比特以太网" class="headerlink" title="10 吉比特以太网"></a>10 吉比特以太网</h3></li><li>10 吉比特以太网只工作在全双工方式</li><li>也不使用 CSMA/CD 协议。<h3 id="使用高速以太网进行宽带接入"><a href="#使用高速以太网进行宽带接入" class="headerlink" title="使用高速以太网进行宽带接入"></a>使用高速以太网进行宽带接入</h3></li><li>以太网接入的重要特点是它可提供双向的宽带通信，并且可根据用户对带宽的需求灵活地进行带宽升级。</li><li>采用以太网接入可实现端到端的以太网传输，中间不需要再进行帧格式的转换。这就提高了数据的传输效率和降低了传输的成本。  <h2 id="其他类型的高速局域网接口"><a href="#其他类型的高速局域网接口" class="headerlink" title="其他类型的高速局域网接口"></a>其他类型的高速局域网接口</h2><h2 id="集线器在转发帧时，不对传输媒体进行检测。"><a href="#集线器在转发帧时，不对传输媒体进行检测。" class="headerlink" title="集线器在转发帧时，不对传输媒体进行检测。"></a>集线器在转发帧时，不对传输媒体进行检测。</h2>网桥在转发帧之前必须执行 CSMA/CD 算法。</li></ul><p><img src="https://github.com/SSHeRun/CS-Xmind-Note/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%203%20%E7%AB%A0%20%20%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC%203%20%E7%AB%A0%20%20%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82.png" alt="picture"></p><h1 id="第-4-章-网络层"><a href="#第-4-章-网络层" class="headerlink" title="第 4 章  网络层"></a>第 4 章  网络层</h1><h2 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h2><h3 id="虚电路服务"><a href="#虚电路服务" class="headerlink" title="虚电路服务"></a>虚电路服务</h3><h3 id="数据报服务"><a href="#数据报服务" class="headerlink" title="数据报服务"></a>数据报服务</h3><h3 id="概要-虚电路服务与数据报服务的对比"><a href="#概要-虚电路服务与数据报服务的对比" class="headerlink" title="概要: 虚电路服务与数据报服务的对比"></a>概要: 虚电路服务与数据报服务的对比</h3><h2 id="网际协议-IP"><a href="#网际协议-IP" class="headerlink" title="网际协议 IP"></a>网际协议 IP</h2><h3 id="网际协议-IP-是-TCP-IP-体系中两个最主要的协议之一。与-IP-协议配套使用的还有四个协议："><a href="#网际协议-IP-是-TCP-IP-体系中两个最主要的协议之一。与-IP-协议配套使用的还有四个协议：" class="headerlink" title="网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一。与 IP 协议配套使用的还有四个协议："></a>网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一。与 IP 协议配套使用的还有四个协议：</h3><ul><li>地址解析协议 ARP (Address Resolution Protocol)</li><li>逆地址解析协议 RARP   (Reverse Address Resolution Protocol)</li><li>网际控制报文协议 ICMP   (Internet Control Message Protocol)</li><li>网际组管理协议 IGMP   (Internet Group Management Protocol)</li><li>概要: 示意图<h3 id="虚拟互连网络"><a href="#虚拟互连网络" class="headerlink" title="虚拟互连网络"></a>虚拟互连网络</h3></li><li>网络互相连接起来要使用一些中间设备<ul><li>物理层中继系统：转发器(repeater)。</li><li>数据链路层中继系统：网桥或桥接器(bridge)。</li><li>网络层中继系统：路由器(router)。</li><li>网桥和路由器的混合物：桥路器(brouter)。</li><li>网络层以上的中继系统：网关(gateway)。  <h3 id="IP-数据报的格式"><a href="#IP-数据报的格式" class="headerlink" title="IP 数据报的格式"></a>IP 数据报的格式</h3></li></ul></li><li>版本 : 有 4（IPv4）和 6（IPv6）两个值；</li><li>首部长度 : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。</li><li>区分服务 : 用来获得更好的服务，一般情况下不使用。</li><li>总长度 : 包括首部长度和数据部分长度。</li><li>生存时间 ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。</li><li>协议 ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。</li><li>首部检验和 ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。</li><li>标识 : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。</li><li>片偏移 : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。<ul><li>IP数据报分片</li></ul></li><li>概要: 示意图<h3 id="分类的-IP-地址"><a href="#分类的-IP-地址" class="headerlink" title="分类的 IP 地址"></a>分类的 IP 地址</h3></li><li>IP 地址的编址方式经历了三个历史阶段：<ul><li>分类<ul><li>由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。<br>IP 地址 ::= {&lt; 网络号 &gt;, &lt; 主机号 &gt;}<ul><li>示意图</li></ul></li></ul></li><li>子网划分<ul><li>通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。</li></ul></li></ul></li></ul><p>IP 地址 ::= {&lt; 网络号 &gt;, &lt; 子网号 &gt;, &lt; 主机号 &gt;}</p><p>要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 00000000，也就是 255.255.192.0。</p><p>注意，外部网络看不到子网的存在。</p><pre><code>* 无分类    * 无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。</code></pre><p>IP 地址 ::= {&lt; 网络前缀号 &gt;, &lt; 主机号 &gt;}</p><p>CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。</p><p>CIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。</p><p>一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 构成超网 。</p><p>在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。</p><h3 id="IP-地址与硬件地址"><a href="#IP-地址与硬件地址" class="headerlink" title="IP 地址与硬件地址"></a>IP 地址与硬件地址</h3><ul><li>IP层抽象的互联网屏蔽了下层很复杂的细节<br>在抽象的网络层上讨论问题，就能够使用<br>统一的、抽象的 IP 地址<br>研究主机和主机或主机和路由器之间的通信 <ul><li>示意图<h3 id="地址解析协议-ARP-与逆地址解析协议RARP"><a href="#地址解析协议-ARP-与逆地址解析协议RARP" class="headerlink" title="地址解析协议 ARP 与逆地址解析协议RARP"></a>地址解析协议 ARP 与逆地址解析协议RARP</h3></li></ul></li><li>缘由<ul><li>网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。</li></ul></li><li>地址解析协议 ARP<ul><li>ARP 实现由 IP 地址得到 MAC 地址<ul><li>每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到 MAC 地址的映射表。</li></ul></li></ul></li></ul><p>如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射。</p><pre><code>        * 示意图</code></pre><ul><li>逆地址解析协议 RARP<ul><li>逆地址解析协议 RARP 使只知道自己硬件地址的主机能够知道其 IP 地址。<ul><li>这种主机往往是无盘工作站。 因此 RARP协议目前已很少使用。<h3 id="IP-层转发分组的流程"><a href="#IP-层转发分组的流程" class="headerlink" title="IP 层转发分组的流程"></a>IP 层转发分组的流程</h3></li></ul></li></ul></li><li>分组转发算法 <ul><li>(1)  从数据报的首部提取目的主机的 IP 地址 D, 得出目的网络地址为 N。</li><li>(2)  若网络 N 与此路由器直接相连，则把数据报直接交付目的主机 D；否则是间接交付，执行(3)。</li><li>(3)  若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器；否则，执行(4)。</li><li>(4)  若路由表中有到达网络 N 的路由，则把数据报传送给路由表指明的下一跳路由器；否则，执行(5)。</li><li>(5) 若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；否则，执行(6)。</li><li>(6)  报告转发分组出错。 </li><li>概要: 示意图<h2 id="划分子网和构造超网"><a href="#划分子网和构造超网" class="headerlink" title="划分子网和构造超网"></a>划分子网和构造超网</h2><h3 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h3><h3 id="使用子网时分组转发"><a href="#使用子网时分组转发" class="headerlink" title="使用子网时分组转发"></a>使用子网时分组转发</h3><h3 id="无分类编址-CIDR（构造超网）"><a href="#无分类编址-CIDR（构造超网）" class="headerlink" title="无分类编址 CIDR（构造超网）"></a>无分类编址 CIDR（构造超网）</h3><h2 id="网际控制报文协议-ICMP"><a href="#网际控制报文协议-ICMP" class="headerlink" title="网际控制报文协议 ICMP"></a>网际控制报文协议 ICMP</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3></li></ul></li><li>ICMP 是为了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。<h3 id="ICMP-报文的种类"><a href="#ICMP-报文的种类" class="headerlink" title="ICMP 报文的种类"></a>ICMP 报文的种类</h3></li><li>ICMP 差错报告报文<ul><li>终点不可达 </li><li>源点抑制(Source quench)  </li><li>时间超过 </li><li>参数问题 </li><li>改变路由（重定向）(Redirect)  </li></ul></li><li>ICMP 询问报文<ul><li>回送请求和回答报文</li><li>时间戳请求和回答报文</li></ul></li><li>ICMP 报文的前 4 个字节是统一的格式，共有三个字段：即类型、代码和检验和。接着的 4 个字节的内容与 ICMP 的类型有关。 <h3 id="ICMP-的应用举例"><a href="#ICMP-的应用举例" class="headerlink" title="ICMP 的应用举例"></a>ICMP 的应用举例</h3></li><li><ol><li>Ping<ul><li>Ping 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。</li></ul></li></ol></li></ul><p>Ping 的原理是通过向目的主机发送 ICMP Echo 请求报文，目的主机收到之后会发送 Echo 回答报文。Ping 会根据时间和成功响应的次数估算出数据包往返时间以及丢包率。</p><ul><li><ol><li>Traceroute<ul><li>Traceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径。</li></ul></li></ol></li></ul><p>Traceroute 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报，并由目的主机发送终点不可达差错报告报文。</p><pre><code>    * 源主机向目的主机发送一连串的 IP 数据报。第一个数据报 P1 的生存时间 TTL 设置为 1，当 P1 到达路径上的第一个路由器 R1 时，R1 收下它并把 TTL 减 1，此时 TTL 等于 0，R1 就把 P1 丢弃，并向源主机发送一个 ICMP 时间超过差错报告报文；    * 源主机接着发送第二个数据报 P2，并把 TTL 设置为 2。P2 先到达 R1，R1 收下后把 TTL 减 1 再转发给 R2，R2 收下后也把 TTL 减 1，由于此时 TTL 等于 0，R2 就丢弃 P2，并向源主机发送一个 ICMP 时间超过差错报文。    * 不断执行这样的步骤，直到最后一个数据报刚刚到达目的主机，主机不转发数据报，也不把 TTL 值减 1。但是因为数据报封装的是无法交付的 UDP，因此目的主机要向源主机发送 ICMP 终点不可达差错报告报文。    * 之后源主机知道了到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。</code></pre><h2 id="因特网的路由选择协议"><a href="#因特网的路由选择协议" class="headerlink" title="因特网的路由选择协议"></a>因特网的路由选择协议</h2><h3 id="有关路由选择协议的几个基本概念"><a href="#有关路由选择协议的几个基本概念" class="headerlink" title="有关路由选择协议的几个基本概念"></a>有关路由选择协议的几个基本概念</h3><ul><li>静态路由选择策略——即非自适应路由选择，其特点是简单和开销较小，但不能及时适应网络状态的变化。 </li><li>动态路由选择策略——即自适应路由选择，其特点是能较好地适应网络状态的变化，但实现起来较为复杂，开销也比较大。<h3 id="自治系统-AS-Autonomous-System"><a href="#自治系统-AS-Autonomous-System" class="headerlink" title="自治系统 AS(Autonomous System)"></a>自治系统 AS(Autonomous System)</h3></li><li>自治系统 AS 的定义：在单一的技术管理下的一组路由器，而这些路由器使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由，同时还使用一种 AS 之间的路由选择协议用以确定分组在 AS之间的路由。<h3 id="内部网关协议-IGP-Interior-Gateway-Protocol"><a href="#内部网关协议-IGP-Interior-Gateway-Protocol" class="headerlink" title="内部网关协议 IGP (Interior Gateway Protocol)"></a>内部网关协议 IGP (Interior Gateway Protocol)</h3></li><li>即在一个自治系统内部使用的路由选择协议。<ul><li>内部网关协议 RIP<ul><li>RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。</li></ul></li></ul></li></ul><p>RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。</p><pre><code>    * 距离向量算法：        * 对地址为 X 的相邻路由器发来的 RIP 报文，先修改报文中的所有项目，把下一跳字段中的地址改为 X，并把所有的距离字段加 1；        * 对修改后的 RIP 报文中的每一个项目，进行以下步骤：        * 若原来的路由表中没有目的网络 N，则把该项目添加到路由表中；        * 否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。        * 若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。    * RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。* 内部网关协议 OSPF    * 开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。</code></pre><p>开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。</p><pre><code>    * OSPF 具有以下特点：        * 向本自治系统中的所有路由器发送信息，这种方法是洪泛法。        * 发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。        * 只有当链路状态发生变化时，路由器才会发送信息。    * 所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。</code></pre><h3 id="外部网关协议-BGP-External-Gateway-Protocol"><a href="#外部网关协议-BGP-External-Gateway-Protocol" class="headerlink" title="外部网关协议 BGP (External Gateway Protocol)"></a>外部网关协议 BGP (External Gateway Protocol)</h3><ul><li>若源站和目的站处在不同的自治系统中，当数据报传到一个自治系统的边界时，就需要使用一种协议将路由选择信息传递到另一个自治系统中。</li><li>AS 之间的路由选择很困难，主要是由于：<ul><li>互联网规模很大；</li><li>各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；</li><li>AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。</li></ul></li><li>BGP 只能寻找一条比较好的路由，而不是最佳路由。</li></ul><p>每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。</p><pre><code>* 示意图</code></pre><h3 id="路由器的构成"><a href="#路由器的构成" class="headerlink" title="路由器的构成"></a>路由器的构成</h3><ul><li>路由器是一种具有多个输入端口和多个输出端口的专用计算机，其任务是转发分组。也就是说，将路由器某个输入端口收到的分组，按照分组要去的目的地（即目的网络），把该分组从路由器的某个合适的输出端口转发给下一跳路由器。</li><li>路由器从功能上可以划分为<ul><li>路由选择</li><li>分组转发</li></ul></li><li>分组转发结构由三个部分组成<ul><li>交换结构</li><li>一组输入端口</li><li>一组输出端口</li><li>概要: 示意图<h2 id="IP-多播"><a href="#IP-多播" class="headerlink" title="IP 多播"></a>IP 多播</h2><h3 id="IP-多播的基本概念"><a href="#IP-多播的基本概念" class="headerlink" title="IP 多播的基本概念"></a>IP 多播的基本概念</h3></li></ul></li><li>多播可明显地减少网络中资源的消耗<h3 id="在局域网上进行硬件多播"><a href="#在局域网上进行硬件多播" class="headerlink" title="在局域网上进行硬件多播"></a>在局域网上进行硬件多播</h3></li><li><h3 id="因特网组管理协议-IGMP-和多播路由选择协议"><a href="#因特网组管理协议-IGMP-和多播路由选择协议" class="headerlink" title="因特网组管理协议 IGMP 和多播路由选择协议"></a>因特网组管理协议 IGMP 和多播路由选择协议</h3></li><li>IGMP 使多播路由器知道多播组成员信息 </li><li>多播转发必须动态地适应多播组成员的变化（这时网络拓扑并未发生变化）。请注意，单播路由选择通常是在网络拓扑发生变化时才需要更新路由。<h2 id="虚拟专用网-VPN-和网络地址转换-NAT"><a href="#虚拟专用网-VPN-和网络地址转换-NAT" class="headerlink" title="虚拟专用网 VPN 和网络地址转换 NAT"></a>虚拟专用网 VPN 和网络地址转换 NAT</h2><h3 id="虚拟专用网-VPN"><a href="#虚拟专用网-VPN" class="headerlink" title="虚拟专用网 VPN"></a>虚拟专用网 VPN</h3></li><li>由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。<ul><li>有三个专用地址块：<ul><li>10.0.0.0 ~ 10.255.255.255</li><li>172.16.0.0 ~ 172.31.255.255</li><li>192.168.0.0 ~ 192.168.255.255</li></ul></li></ul></li><li>VPN 使用公用的互联网作为本机构各专用网之间的通信载体。专用指机构内的主机只与本机构内的其它主机通信；虚拟指好像是，而实际上并不是，它有经过公用的互联网。</li><li>下图中，场所 A 和 B 的通信经过互联网，如果场所 A 的主机 X 要和另一个场所 B 的主机 Y 通信，IP 数据报的源地址是 10.1.0.1，目的地址是 10.2.0.3。数据报先发送到与互联网相连的路由器 R1，R1 对内部数据进行加密，然后重新加上数据报的首部，源地址是路由器 R1 的全球地址 125.1.2.3，目的地址是路由器 R2 的全球地址 194.4.5.6。路由器 R2 收到数据报后将数据部分进行解密，恢复原来的数据报，此时目的地址为 10.2.0.3，就交付给 Y。<h3 id="网络地址转换-NAT"><a href="#网络地址转换-NAT" class="headerlink" title="网络地址转换 NAT"></a>网络地址转换 NAT</h3></li><li>专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。</li><li>在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把传输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。<h2 id="因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。"><a href="#因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。" class="headerlink" title="因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。"></a>因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。</h2><h2 id="因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。-1"><a href="#因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。-1" class="headerlink" title="因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。"></a>因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。</h2></li></ul><p><img src="https://github.com/SSHeRun/CS-Xmind-Note/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%204%20%E7%AB%A0%20%20%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC%204%20%E7%AB%A0%20%20%E7%BD%91%E7%BB%9C%E5%B1%82.png" alt="picture"></p><h1 id="第-5-章-运输层"><a href="#第-5-章-运输层" class="headerlink" title="第 5 章  运输层"></a>第 5 章  运输层</h1><h2 id="运输层协议概述"><a href="#运输层协议概述" class="headerlink" title="运输层协议概述"></a>运输层协议概述</h2><h3 id="进程之间的通信"><a href="#进程之间的通信" class="headerlink" title="进程之间的通信"></a>进程之间的通信</h3><ul><li>运输层向它上面的应用层提供通信服务，它属于面向通信部分的最高层，同时也是用户功能中的最低层。</li><li>两个主机进行通信实际上就是两个主机中的应用进程互相通信。 </li><li>应用进程之间的通信又称为端到端的通信。 </li><li>运输层协议和网络层协议的主要区别 <h3 id="运输层的两个主要协议"><a href="#运输层的两个主要协议" class="headerlink" title="运输层的两个主要协议"></a>运输层的两个主要协议</h3></li><li>(1) 用户数据报协议 UDP(User Datagram Protocol)<ul><li>UDP 传送的数据单位协议是 UDP 报文或用户数据报。 </li></ul></li><li>(2) 传输控制协议 TCP(Transmission Control Protocol)<ul><li>TCP 传送的数据单位协议是 TCP 报文段(segment)<h3 id="运输层的端口"><a href="#运输层的端口" class="headerlink" title="运输层的端口"></a>运输层的端口</h3></li></ul></li><li>软件端口与硬件端口<ul><li>在协议栈层间的抽象的协议端口是软件端口。</li><li>路由器或交换机上的端口是硬件端口。</li></ul></li><li>三类端口<ul><li>熟知端口，数值一般为 0~1023。</li><li>登记端口号，数值为1024~49151，为没有熟知端口号的应用程序使用的。使用这个范围的端口号必须在 IANA 登记，以防止重复。</li><li>客户端口号或短暂端口号，数值为49152~65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。<h2 id="用户数据报协议-UDP"><a href="#用户数据报协议-UDP" class="headerlink" title="用户数据报协议 UDP"></a>用户数据报协议 UDP</h2><h3 id="UDP-概述"><a href="#UDP-概述" class="headerlink" title="UDP 概述"></a>UDP 概述</h3></li></ul></li><li>用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。<h3 id="UDP-的首部格式"><a href="#UDP-的首部格式" class="headerlink" title="UDP 的首部格式"></a>UDP 的首部格式</h3><h2 id="传输控制协议-TCP-概述"><a href="#传输控制协议-TCP-概述" class="headerlink" title="传输控制协议 TCP 概述"></a>传输控制协议 TCP 概述</h2><h3 id="TCP-最主要的特点"><a href="#TCP-最主要的特点" class="headerlink" title="TCP 最主要的特点"></a>TCP 最主要的特点</h3></li><li>传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。<h3 id="TCP-的连接"><a href="#TCP-的连接" class="headerlink" title="TCP 的连接"></a>TCP 的连接</h3></li><li>TCP 连接的端点叫做套接字(socket)或插口。<ul><li>套接字 socket = (IP地址: 端口号) <h2 id="可靠传输的工作原理"><a href="#可靠传输的工作原理" class="headerlink" title="可靠传输的工作原理"></a>可靠传输的工作原理</h2><h3 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h3><h3 id="连续-ARQ-协议"><a href="#连续-ARQ-协议" class="headerlink" title="连续 ARQ 协议"></a>连续 ARQ 协议</h3><h2 id="TCP-报文段的首部格式"><a href="#TCP-报文段的首部格式" class="headerlink" title="TCP 报文段的首部格式"></a>TCP 报文段的首部格式</h2><h3 id="序号-：用于对字节流进行编号，例如序号为-301，表示第一个字节的编号为-301，如果携带的数据长度为-100-字节，那么下一个报文段的序号应为-401。"><a href="#序号-：用于对字节流进行编号，例如序号为-301，表示第一个字节的编号为-301，如果携带的数据长度为-100-字节，那么下一个报文段的序号应为-401。" class="headerlink" title="序号 ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。"></a>序号 ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</h3><h3 id="确认号-：期望收到的下一个报文段的序号。例如-B-正确收到-A-发送来的一个报文段，序号为-501，携带的数据长度为-200-字节，因此-B-期望下一个报文段的序号为-701，B-发送给-A-的确认报文段中确认号就为-701。"><a href="#确认号-：期望收到的下一个报文段的序号。例如-B-正确收到-A-发送来的一个报文段，序号为-501，携带的数据长度为-200-字节，因此-B-期望下一个报文段的序号为-701，B-发送给-A-的确认报文段中确认号就为-701。" class="headerlink" title="确认号 ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。"></a>确认号 ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</h3><h3 id="数据偏移-：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。"><a href="#数据偏移-：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。" class="headerlink" title="数据偏移 ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。"></a>数据偏移 ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</h3><h3 id="确认-ACK-：当-ACK-1-时确认号字段有效，否则无效。TCP-规定，在连接建立后所有传送的报文段都必须把-ACK-置-1。"><a href="#确认-ACK-：当-ACK-1-时确认号字段有效，否则无效。TCP-规定，在连接建立后所有传送的报文段都必须把-ACK-置-1。" class="headerlink" title="确认 ACK ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。"></a>确认 ACK ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</h3><h3 id="同步-SYN-：在连接建立时用来同步序号。当-SYN-1，ACK-0-时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中-SYN-1，ACK-1。"><a href="#同步-SYN-：在连接建立时用来同步序号。当-SYN-1，ACK-0-时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中-SYN-1，ACK-1。" class="headerlink" title="同步 SYN ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。"></a>同步 SYN ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。</h3><h3 id="终止-FIN-：用来释放一个连接，当-FIN-1-时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。"><a href="#终止-FIN-：用来释放一个连接，当-FIN-1-时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。" class="headerlink" title="终止 FIN ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。"></a>终止 FIN ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</h3><h3 id="窗口-：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。"><a href="#窗口-：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。" class="headerlink" title="窗口 ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。"></a>窗口 ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</h3><h3 id="概要-示意图"><a href="#概要-示意图" class="headerlink" title="概要: 示意图"></a>概要: 示意图</h3><h2 id="TCP-可靠传输的实现"><a href="#TCP-可靠传输的实现" class="headerlink" title="TCP 可靠传输的实现"></a>TCP 可靠传输的实现</h2><h3 id="以字节为单位的滑动窗口"><a href="#以字节为单位的滑动窗口" class="headerlink" title="以字节为单位的滑动窗口"></a>以字节为单位的滑动窗口</h3></li></ul></li><li>窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</li></ul><p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。</p><p>接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。</p><pre><code>* 1* 2* 3*  4</code></pre><h3 id="超时重传时间的选择"><a href="#超时重传时间的选择" class="headerlink" title="超时重传时间的选择"></a>超时重传时间的选择</h3><ul><li>超时重传<ul><li>TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。</li></ul></li></ul><p>一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下：</p><pre><code>* 其中，0 ≤ a ＜ 1，RTTs 随着 a 的增加更容易受到 RTT 的影响。</code></pre><p>超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下：（其中 RTTd 为偏差的加权平均值）</p><h3 id="选择确认-SACK"><a href="#选择确认-SACK" class="headerlink" title="选择确认 SACK"></a>选择确认 SACK</h3><h2 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h2><h3 id="利用滑动窗口实现流量控制"><a href="#利用滑动窗口实现流量控制" class="headerlink" title="利用滑动窗口实现流量控制"></a>利用滑动窗口实现流量控制</h3><ul><li>TCP 流量控制<ul><li>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</li></ul></li></ul><p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p><ul><li>流量控制举例<h3 id="必须考虑传输效率"><a href="#必须考虑传输效率" class="headerlink" title="必须考虑传输效率"></a>必须考虑传输效率</h3><h2 id="TCP-的拥塞控制"><a href="#TCP-的拥塞控制" class="headerlink" title="TCP 的拥塞控制"></a>TCP 的拥塞控制</h2><h3 id="拥塞控制的一般原理"><a href="#拥塞控制的一般原理" class="headerlink" title="拥塞控制的一般原理"></a>拥塞控制的一般原理</h3></li><li>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。</li><li>拥塞控制所起的作用<h3 id="几种拥塞控制方法"><a href="#几种拥塞控制方法" class="headerlink" title="几种拥塞控制方法"></a>几种拥塞控制方法</h3></li><li>TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。<ul><li>发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。</li></ul></li></ul><p>为了便于讨论，做如下假设：</p><p>接收方有足够大的接收缓存，因此不会发生流量控制；<br>虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。</p><pre><code>* 1. 慢开始与拥塞避免    * 发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 ...</code></pre><p>注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。</p><p>如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。</p><pre><code>* 2. 快重传与快恢复    * 在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。</code></pre><p>在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M2，则 M3 丢失，立即重传 M3。</p><p>在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。</p><p>慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。</p><h3 id="随机早期检测-RED"><a href="#随机早期检测-RED" class="headerlink" title="随机早期检测 RED"></a>随机早期检测 RED</h3><h2 id="TCP-的运输连接管理"><a href="#TCP-的运输连接管理" class="headerlink" title="TCP 的运输连接管理"></a>TCP 的运输连接管理</h2><h3 id="TCP-的连接建立"><a href="#TCP-的连接建立" class="headerlink" title="TCP 的连接建立"></a>TCP 的连接建立</h3><ul><li>假设 A 为客户端，B 为服务器端。</li></ul><p>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</p><p>A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。</p><p>B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。</p><p>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</p><p>B 收到 A 的确认后，连接建立。</p><ul><li>三次握手的原因<ul><li>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</li></ul></li></ul><p>客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。</p><h3 id="TCP-的连接释放"><a href="#TCP-的连接释放" class="headerlink" title="TCP 的连接释放"></a>TCP 的连接释放</h3><ul><li>以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。</li></ul><p>A 发送连接释放报文，FIN=1。</p><p>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</p><p>当 B 不再需要连接时，发送连接释放报文，FIN=1。</p><p>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</p><p>B 收到 A 的确认后释放连接。</p><ul><li>四次挥手的原因<ul><li>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</li></ul></li><li>TIME_WAIT<ul><li>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：<ul><li>确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。</li><li>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。<h3 id="TCP-的有限状态机"><a href="#TCP-的有限状态机" class="headerlink" title="TCP 的有限状态机"></a>TCP 的有限状态机</h3></li></ul></li></ul></li><li>粗实线箭头表示对客户进程的正常变迁。<br>粗虚线箭头表示对服务器进程的正常变迁。<br>另一种细线箭头表示异常变迁。</li></ul><p><img src="https://github.com/SSHeRun/CS-Xmind-Note/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%205%20%E7%AB%A0%20%20%E8%BF%90%E8%BE%93%E5%B1%82/%E7%AC%AC%205%20%E7%AB%A0%20%20%E8%BF%90%E8%BE%93%E5%B1%82.png" alt="picture"></p><h1 id="第-6-章-应用层"><a href="#第-6-章-应用层" class="headerlink" title="第 6 章  应用层"></a>第 6 章  应用层</h1><h2 id="域名系统-DNS"><a href="#域名系统-DNS" class="headerlink" title="域名系统 DNS"></a>域名系统 DNS</h2><h3 id="域名系统概述"><a href="#域名系统概述" class="headerlink" title="域名系统概述"></a>域名系统概述</h3><ul><li>DNS 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。<h3 id="因特网的域名结构"><a href="#因特网的域名结构" class="headerlink" title="因特网的域名结构"></a>因特网的域名结构</h3></li><li>域名具有层次结构，从上到下依次为：根域名、顶级域名、二级域名。<h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3></li><li>一个服务器所负责管辖的（或有权限的）范围叫做区(zone)。</li><li>每一个区设置相应的权限域名服务器，用来保存该区中的所有主机的域名到IP地址的映射。</li><li></li><li>DNS 可以使用 UDP 或者 TCP 进行传输，使用的端口号都为 53。大多数情况下 DNS 使用 UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。在两种情况下会使用 TCP 进行传输：<ul><li>如果返回的响应超过的 512 字节（UDP 最大只支持 512 字节的数据）。</li><li>区域传送（区域传送是主域名服务器向辅助域名服务器传送变化的那部分数据）。<h2 id="文件传送协议"><a href="#文件传送协议" class="headerlink" title="文件传送协议"></a>文件传送协议</h2><h3 id="FTP-概述"><a href="#FTP-概述" class="headerlink" title="FTP 概述"></a>FTP 概述</h3></li></ul></li><li>文件传送协议 FTP (File Transfer Protocol) 是因特网上使用得最广泛的文件传送协议。</li><li>FTP 提供交互式的访问，允许客户指明文件的类型与格式，并允许文件具有存取权限。</li><li>FTP 屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件。<h3 id="FTP-的基本工作原理"><a href="#FTP-的基本工作原理" class="headerlink" title="FTP 的基本工作原理"></a>FTP 的基本工作原理</h3></li><li>FTP 使用 TCP 进行连接，它需要两个连接来传送一个文件：<ul><li>控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传回服务器的应答。</li><li>数据连接：用来传送一个文件数据。</li></ul></li><li>根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：<ul><li>主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。</li><li>被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。</li><li>主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。<h3 id="简单文件传送协议-TFTP"><a href="#简单文件传送协议-TFTP" class="headerlink" title="简单文件传送协议 TFTP"></a>简单文件传送协议 TFTP</h3></li></ul></li><li>TFTP 是一个很小且易于实现的文件传送协议。</li><li>TFTP 使用客户服务器方式和使用 UDP 数据报，因此 TFTP 需要有自己的差错改正措施。</li><li>TFTP 只支持文件传输而不支持交互。</li><li>TFTP 没有一个庞大的命令集，没有列目录的功能，也不能对用户进行身份鉴别。 </li><li>TFTP 的主要特点是<ul><li>(1) 每次传送的数据 PDU 中有 512 字节的数据，但最后一次可不足 512 字节。</li><li>(2) 数据 PDU 也称为文件块(block)，每个块按序编号，从 1 开始。</li><li>(3) 支持 ASCII 码或二进制传送。</li><li>(4) 可对文件进行读或写。</li><li>(5) 使用很简单的首部。 <h2 id="远程终端协议-TELNET"><a href="#远程终端协议-TELNET" class="headerlink" title="远程终端协议 TELNET"></a>远程终端协议 TELNET</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3></li></ul></li><li>TELNET 是一个简单的远程终端协议，也是因特网的正式标准。</li><li>用户用 TELNET 就可在其所在地通过 TCP 连接注册（即登录）到远地的另一个主机上（使用主机名或 IP 地址）。</li><li>TELNET 能将用户的击键传到远地主机，同时也能将远地主机的输出通过 TCP 连接返回到用户屏幕。这种服务是透明的，因为用户感觉到好像键盘和显示器是直接连在远地主机上。 <h2 id="万维网-WWW"><a href="#万维网-WWW" class="headerlink" title="万维网 WWW"></a>万维网 WWW</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3></li><li>万维网 WWW (World Wide Web)并非某种特殊的计算机网络。</li><li>万维网是一个大规模的、联机式的信息储藏所。</li><li>万维网用链接的方法能非常方便地从因特网上的一个站点访问另一个站点，从而主动地按需获取丰富的信息。</li><li>这种访问方式称为“链接”。</li><li>万维网是分布式超媒体(hypermedia)系统，它是超文本(hypertext)系统的扩充。<h3 id="万维网的工作方式"><a href="#万维网的工作方式" class="headerlink" title="万维网的工作方式"></a>万维网的工作方式</h3></li><li>万维网以客户服务器方式工作。</li><li>浏览器就是在用户计算机上的万维网客户程序。万维网文档所驻留的计算机则运行服务器程序，因此这个计算机也称为万维网服务器。<h3 id="万维网必须解决的问题"><a href="#万维网必须解决的问题" class="headerlink" title="万维网必须解决的问题"></a>万维网必须解决的问题</h3></li><li>(1) 怎样标志分布在整个因特网上的万维网文档？<br>使用统一资源定位符 URL (Uniform Resource Locator)来标志万维网上的各种文档。<br>使每一个文档在整个因特网的范围内具有唯一的标识符 URL。 </li><li>(2) 用何协议实现万维网上各种超链的链接？<br>在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是超文本传送协议 HTTP (HyperText Transfer Protocol)。<br>HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送。 </li><li>(3) 怎样使各种万维网文档都能在因特网上的各种计算机上显示出来，同时使用户清楚地知道在什么地方存在着超链？<br>超文本标记语言 HTML (HyperText Markup Language)使得万维网页面的设计者可以很方便地用一个超链从本页面的某处链接到因特网上的任何一个万维网页面，并且能够在自己的计算机屏幕上将这些页面显示出来。 </li><li>(4) 怎样使用户能够很方便地找到所需的信息？<br>为了在万维网上方便地查找信息，用户可使用各种的搜索工具（即搜索引擎）。 <h3 id="统一资源定位符-URL"><a href="#统一资源定位符-URL" class="headerlink" title="统一资源定位符 URL"></a>统一资源定位符 URL</h3></li><li>统一资源定位符 URL 是对可以从因特网上得到的资源的位置和访问方法的一种简洁的表示。</li><li>URL 的一般形式是：&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt; <h3 id="超文本传送协议-HTTP"><a href="#超文本传送协议-HTTP" class="headerlink" title="超文本传送协议 HTTP"></a>超文本传送协议 HTTP</h3></li><li>HTTP 是面向事务的客户服务器协议。</li><li>HTTP 1.0 协议是无状态的(stateless)。</li><li>HTTP 协议本身也是无连接的，虽然它使用了面向连接的 TCP 向上提供的服务。<h3 id="万维网的文档"><a href="#万维网的文档" class="headerlink" title="万维网的文档"></a>万维网的文档</h3></li><li>超文本标记语言 HTML<ul><li>超文本标记语言 HTML 中的 Markup 的意思就是“设置标记”。</li><li>HTML 定义了许多用于排版的命令（即标签）。</li><li>HTML 把各种标签嵌入到万维网的页面中。这样就构成了所谓的 HTML 文档。HTML 文档是一种可以用任何文本编辑器创建的 ASCII 码文件。   </li></ul></li><li>动态万维网文档<ul><li>静态文档是指该文档创作完毕后就存放在万维网服务器中，在被用户浏览的过程中，内容不会改变。 </li><li>动态文档是指文档的内容是在浏览器访问万维网服务器时才由应用程序动态创建。</li><li>动态文档和静态文档之间的主要差别体现在服务器一端。这主要是文档内容的生成方法不同。而从浏览器的角度看，这两种文档并没有区别。  <h3 id="万维网的信息检索系统"><a href="#万维网的信息检索系统" class="headerlink" title="万维网的信息检索系统"></a>万维网的信息检索系统</h3></li></ul></li><li>全文检索搜索<ul><li>全文检索搜索引擎是一种纯技术型的检索工具。它的工作原理是通过搜索软件到因特网上的各网站收集信息，找到一个网站后可以从这个网站再链接到另一个网站。然后按照一定的规则建立一个很大的在线数据库供用户查询。</li></ul></li><li>分类目录搜索<ul><li>分类目录搜索引擎并不采集网站的任何信息，而是利用各网站向搜索引擎提交的网站信息时填写的关键词和网站描述等信息，经过人工审核编辑后，如果认为符合网站登录的条件，则输入到分类目录的数据库中，供网上用户查询。<h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><h3 id="电子邮件概述"><a href="#电子邮件概述" class="headerlink" title="电子邮件概述"></a>电子邮件概述</h3></li></ul></li><li>电子邮件(e-mail)是因特网上使用得最多的和最受用户欢迎的一种应用。</li><li>电子邮件把邮件发送到收件人使用的邮件服务器，并放在其中的收件人邮箱中，收件人可随时上网到自己使用的邮件服务器进行读取。</li><li>电子邮件不仅使用方便，而且还具有传递迅速和费用低廉的优点。</li><li>一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。<h3 id="电子邮件的最主要的组成构件"><a href="#电子邮件的最主要的组成构件" class="headerlink" title="电子邮件的最主要的组成构件"></a>电子邮件的最主要的组成构件</h3><h3 id="简单邮件传送协议-SMTP"><a href="#简单邮件传送协议-SMTP" class="headerlink" title="简单邮件传送协议 SMTP"></a>简单邮件传送协议 SMTP</h3></li><li>SMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。MIME 并没有改动或者取代 SMTP，而是增加邮件主体的结构，定义了非 ASCII 码的编码规则。<h3 id="电子邮件的信息格式"><a href="#电子邮件的信息格式" class="headerlink" title="电子邮件的信息格式"></a>电子邮件的信息格式</h3></li><li>一个电子邮件分为信封和内容两大部分。</li><li>RFC 822 只规定了邮件内容中的首部(header)格式，而对邮件的主体(body)部分则让用户自由撰写。<ul><li>邮件内容的首部<ul><li>“To:”后面填入一个或多个收件人的电子邮件地址。用户只需打开地址簿，点击收件人名字，收件人的电子邮件地址就会自动地填入到合适的位置上。</li><li>“Subject:”是邮件的主题。它反映了邮件的主要内容，便于用户查找邮件。</li><li>抄送 “Cc:” 表示应给某某人发送一个邮件副本。</li><li>“From” 和 “Date” 表示发信人的电子邮件地址和发信日期。“Reply-To” 是对方回信所用的地址。  <h3 id="邮件读取协议-POP3-和-IMAP"><a href="#邮件读取协议-POP3-和-IMAP" class="headerlink" title="邮件读取协议 POP3 和 IMAP"></a>邮件读取协议 POP3 和 IMAP</h3></li></ul></li></ul></li><li>POP3<ul><li>POP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。但最新版本的 POP3 可以不删除邮件。</li></ul></li><li>IMAP<ul><li>IMAP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以让用户随时随地去访问服务器上的邮件。<h3 id="基于万维网的电子邮件"><a href="#基于万维网的电子邮件" class="headerlink" title="基于万维网的电子邮件"></a>基于万维网的电子邮件</h3></li></ul></li><li>例子<ul><li>电子邮件从 A 发送到网易邮件服务器是使用 HTTP 协议。</li><li>两个邮件服务器之间的传送使用 SMTP。</li><li>邮件从新浪邮件服务器传送到 B 是使用 HTTP 协议。</li><li>概要: 示意图<h3 id="通用因特网邮件扩充-MIME"><a href="#通用因特网邮件扩充-MIME" class="headerlink" title="通用因特网邮件扩充 MIME"></a>通用因特网邮件扩充 MIME</h3></li></ul></li><li>MIME 概述<ul><li>MIME 并没有改动 SMTP 或取代它。</li><li>MIME 的意图是继续使用目前的[RFC 822]格式，但增加了邮件主体的结构，并定义了传送非 ASCII 码的编码规则。<h2 id="动态主机配置协议-DHCP"><a href="#动态主机配置协议-DHCP" class="headerlink" title="动态主机配置协议 DHCP"></a>动态主机配置协议 DHCP</h2><h3 id="DHCP-Dynamic-Host-Configuration-Protocol-提供了即插即用的连网方式，用户不再需要手动配置-IP-地址等信息。"><a href="#DHCP-Dynamic-Host-Configuration-Protocol-提供了即插即用的连网方式，用户不再需要手动配置-IP-地址等信息。" class="headerlink" title="DHCP (Dynamic Host Configuration Protocol) 提供了即插即用的连网方式，用户不再需要手动配置 IP 地址等信息。"></a>DHCP (Dynamic Host Configuration Protocol) 提供了即插即用的连网方式，用户不再需要手动配置 IP 地址等信息。</h3><h3 id="DHCP-配置的内容不仅是-IP-地址，还包括子网掩码、网关-IP-地址。"><a href="#DHCP-配置的内容不仅是-IP-地址，还包括子网掩码、网关-IP-地址。" class="headerlink" title="DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。"></a>DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。</h3><h3 id="DHCP-工作过程如下："><a href="#DHCP-工作过程如下：" class="headerlink" title="DHCP 工作过程如下："></a>DHCP 工作过程如下：</h3></li></ul></li><li>1.客户端发送 Discover 报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。<br>2.DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。<br>3.如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 Request 报文给该 DHCP 服务器。<br>4.DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。<h2 id="简单网络管理协议-SNMP"><a href="#简单网络管理协议-SNMP" class="headerlink" title="简单网络管理协议 SNMP"></a>简单网络管理协议 SNMP</h2><h3 id="网络管理的基本概念"><a href="#网络管理的基本概念" class="headerlink" title="网络管理的基本概念"></a>网络管理的基本概念</h3></li><li>网络管理包括对硬件、软件和人力的使用、综合与协调，以便对网络资源进行监视、测试、配置、分析、评价和控制，这样就能以合理的价格满足网络的一些需求，如实时运行性能，服务质量等。网络管理常简称为网管。</li><li>SNMP 的网络管理由三个部分组成 <ul><li>SNMP 本身<ul><li>SNMP 定义了管理站和代理之间所交换的分组格式。所交换的分组包含各代理中的对象（变量）名及其状态（值）。</li></ul></li><li>管理信息结构 SMI (Structure of Management Information)<ul><li>SMI 定义了命名对象和定义对象类型（包括范围和长度）的通用规则，以及把对象和对象的值进行编码的规则。</li></ul></li><li>管理信息库 MIB(Management Information Base)。<ul><li>MIB 在被管理的实体中创建了命名对象，并规定了其类型。<h3 id="管理信息结构-SMI"><a href="#管理信息结构-SMI" class="headerlink" title="管理信息结构 SMI"></a>管理信息结构 SMI</h3></li></ul></li></ul></li><li>SMI 的功能：<ul><li>(1) 被管对象应怎样命名；</li><li>(2) 用来存储被管对象的数据类型有哪些种；</li><li>(3) 在网络上传送的管理数据应如何编码。<h3 id="管理信息库-MIB"><a href="#管理信息库-MIB" class="headerlink" title="管理信息库 MIB"></a>管理信息库 MIB</h3></li></ul></li><li>被管对象必须维持可供管理程序读写的若干控制和状态信息。这些信息总称为管理信息库 MIB 。<h3 id="SNMP-的协议数据单元和报文"><a href="#SNMP-的协议数据单元和报文" class="headerlink" title="SNMP 的协议数据单元和报文"></a>SNMP 的协议数据单元和报文</h3></li><li>SNMP的操作只有两种基本的管理功能，即：<ul><li>“读”操作，用 get 报文来检测各被管对象的状况；</li><li>“写”操作，用 set 报文来改变各被管对象的状况。</li></ul></li><li>SNMP 的报文格式 <h2 id="应用进程跨越网络的通信"><a href="#应用进程跨越网络的通信" class="headerlink" title="应用进程跨越网络的通信"></a>应用进程跨越网络的通信</h2><h3 id="系统调用和应用编程接口"><a href="#系统调用和应用编程接口" class="headerlink" title="系统调用和应用编程接口"></a>系统调用和应用编程接口</h3><h3 id="几种常用的系统调用"><a href="#几种常用的系统调用" class="headerlink" title="几种常用的系统调用"></a>几种常用的系统调用</h3></li></ul><p><img src="https://github.com/SSHeRun/CS-Xmind-Note/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC%206%20%E7%AB%A0%20%20%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC%206%20%E7%AB%A0%20%20%E5%BA%94%E7%94%A8%E5%B1%82.png" alt="picture"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第-1-章-概述&quot;&gt;&lt;a href=&quot;#第-1-章-概述&quot; class=&quot;headerlink&quot; title=&quot;第 1 章   概述&quot;&gt;&lt;/a&gt;第 1 章   概述&lt;/h1&gt;&lt;h2 id=&quot;计算机网络在信息时代中的作用&quot;&gt;&lt;a href=&quot;#计算机网络在信息时代中
      
    
    </summary>
    
    
      <category term="408" scheme="lovemefan.win/tags/408/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04.1 LTS 安装tensorflow-gpu</title>
    <link href="lovemefan.win/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Ubuntu%2018.04.1%20LTS%20%E5%AE%89%E8%A3%85tensorflow-gpu/index.html%20%202019/03/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Ubuntu%2018.04.1%20LTS%20%E5%AE%89%E8%A3%85tensorflow-gpu/"/>
    <id>lovemefan.win/post/机器学习/Ubuntu 18.04.1 LTS 安装tensorflow-gpu/index.html  2019/03/04/机器学习/Ubuntu 18.04.1 LTS 安装tensorflow-gpu/</id>
    <published>2019-03-04T03:37:00.000Z</published>
    <updated>2019-03-04T14:41:39.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-18-04-1-LTS-安装tensorflow-gpu"><a href="#Ubuntu-18-04-1-LTS-安装tensorflow-gpu" class="headerlink" title="Ubuntu 18.04.1 LTS 安装tensorflow-gpu"></a>Ubuntu 18.04.1 LTS 安装tensorflow-gpu</h1><h2 id="1-安装驱动"><a href="#1-安装驱动" class="headerlink" title="1.安装驱动"></a>1.安装驱动</h2><p><img src="https://obs-one-for-fan.obs.cn-north-1.myhwclouds.com/imageHosting/1547012467893.png" alt="93"></p><h2 id="2-安装python3-6"><a href="#2-安装python3-6" class="headerlink" title="2.安装python3.6"></a>2.安装python3.6</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget http://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz </div><div class="line">tar -xvzf Python-3.6.4.tgz cd Python-3.6.4 </div><div class="line">./configure --with-ssl </div><div class="line">make </div><div class="line">sudo make install</div><div class="line">sudo apt-get install pip3</div></pre></td></tr></table></figure><h2 id="4-CUDA-Toolkit-9-0"><a href="#4-CUDA-Toolkit-9-0" class="headerlink" title="4.CUDA Toolkit 9.0"></a>4.CUDA Toolkit 9.0</h2><p><a href="https://developer.nvidia.com/cuda-90-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1604&amp;target_type=deblocal" target="_blank" rel="external">下载地址</a><br><img src="https://obs-one-for-fan.obs.cn-north-1.myhwclouds.com/imageHosting/1547038387531.png" alt="1547038387531"><br>进入步骤1.1中下载文件<br><code>cuda_9.0.176_384.81_linux.ru</code><br>在安装CUDA前先装依赖包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libglu1-mesa-dev</div></pre></td></tr></table></figure></p><p>所在目录，执行如下命令安装CUDA 9.0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo chmod +x cuda_9.0.176_384.81_linux.run </div><div class="line">sudo ./cuda_9.0.176_384.81_linux.run -override</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">Do you accept the previously read EULA?</div><div class="line">accept/decline/quit: accept</div><div class="line"></div><div class="line">You are attempting to install on an unsupported configuration. Do you wish to continue?</div><div class="line">(y)es/(n)o [ default is no ]: y</div><div class="line"></div><div class="line">Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 384.81?</div><div class="line">(y)es/(n)o/(q)uit: n</div><div class="line"></div><div class="line">Install the CUDA 9.0 Toolkit?</div><div class="line">(y)es/(n)o/(q)uit: y</div><div class="line"></div><div class="line">Enter Toolkit Location</div><div class="line"> [ default is /usr/local/cuda-9.0 ]: </div><div class="line"></div><div class="line">Do you want to install a symbolic link at /usr/local/cuda?</div><div class="line">(y)es/(n)o/(q)uit: y</div><div class="line"></div><div class="line">Install the CUDA 9.0 Samples?</div><div class="line">(y)es/(n)o/(q)uit: </div><div class="line">Install the CUDA 9.0 Samples?</div><div class="line">(y)es/(n)o/(q)uit: y</div><div class="line"></div><div class="line">Enter CUDA Samples Location</div><div class="line"> [ default is /home/lovemefan ]: </div><div class="line"></div><div class="line">Installing the CUDA Toolkit in /usr/local/cuda-9.0 ...</div><div class="line">Missing recommended library: libGLU.so</div><div class="line">Missing recommended library: libX11.so</div><div class="line">Missing recommended library: libXi.so</div><div class="line">Missing recommended library: libXmu.so</div><div class="line">Missing recommended library: libGL.so</div><div class="line"></div><div class="line">Installing the CUDA Samples in /home/lovemefan ...</div><div class="line">Copying samples to /home/lovemefan/NVIDIA_CUDA-9.0_Samples now...</div><div class="line">Finished copying samples.</div><div class="line"></div><div class="line">===========</div><div class="line">= Summary =</div><div class="line">===========</div><div class="line"></div><div class="line">Driver:   Not Selected</div><div class="line">Toolkit:  Installed in /usr/local/cuda-9.0</div><div class="line">Samples:  Installed in /home/lovemefan, but missing recommended libraries</div><div class="line"></div><div class="line">Please make sure that</div><div class="line"> -   PATH includes /usr/local/cuda-9.0/bin</div><div class="line"> -   LD_LIBRARY_PATH includes /usr/local/cuda-9.0/lib64, or, add /usr/local/cuda-9.0/lib64 to /etc/ld.so.conf and run ldconfig as root</div><div class="line"></div><div class="line">To uninstall the CUDA Toolkit, run the uninstall script in /usr/local/cuda-9.0/bin</div><div class="line"></div><div class="line">Please see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-9.0/doc/pdf for detailed information on setting up CUDA.</div><div class="line"></div><div class="line">***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 384.00 is required for CUDA 9.0 functionality to work.</div><div class="line">To install the driver using this installer, run the following command, replacing &lt;CudaInstaller&gt; with the name of this run file:</div><div class="line">    sudo &lt;CudaInstaller&gt;.run -silent -driver</div><div class="line"></div><div class="line">Logfile is /tmp/cuda_install_28234.log</div></pre></td></tr></table></figure><h2 id="4-CUDNN-7-0"><a href="#4-CUDNN-7-0" class="headerlink" title="4.CUDNN 7.0"></a>4.CUDNN 7.0</h2><p><a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="external">下载地址</a></p><p><img src="https://obs-one-for-fan.obs.cn-north-1.myhwclouds.com/imageHosting/1547025670135.png" alt="1547025670135"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar -xzvf cudnn-9.0-linux-x64-v7.4.2.24.tgz</div><div class="line">sudo cp cuda/include/cudnn.h /usr/local/cuda/include</div><div class="line">sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64</div><div class="line">sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</div></pre></td></tr></table></figure><h2 id="5-libcupti"><a href="#5-libcupti" class="headerlink" title="5.libcupti"></a>5.libcupti</h2><p>安装libcupti库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libcupti-dev</div></pre></td></tr></table></figure><hr><h2 id="6-配置"><a href="#6-配置" class="headerlink" title="6.配置"></a>6.配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gedit ~/.bashrc</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export CUDA_HOME=/usr/local/cuda</div><div class="line">export PATH=/usr/local/cuda-9.0/bin:$PATH</div><div class="line">export LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64:$LD_LIBRARY_PATH</div></pre></td></tr></table></figure><p>一定要执行下面命令刷新环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">. ~/.bashrc</div></pre></td></tr></table></figure><p>pycharm 中配置</p><p>打开 Run-Edit Configurations</p><p><img src="https://obs-one-for-fan.obs.cn-north-1.myhwclouds.com/imageHosting/1547275915797.png" alt="1547275915797"><br>将下面添加到环境变量<br><img src="https://obs-one-for-fan.obs.cn-north-1.myhwclouds.com/imageHosting/1547276126564.png" alt="1547276126564"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LD_LIBRARY_PATH=/usr/local/cuda-9.0=/usr/local/cuda-9.0</div></pre></td></tr></table></figure><h2 id="7-测试"><a href="#7-测试" class="headerlink" title="7.测试"></a>7.测试</h2><p>在pycharm中运行一个hello world<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span>  tensorflow <span class="keyword">as</span> tf</div><div class="line">hello = tf.constant(<span class="string">"hello tensorflow"</span>)</div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess :</div><div class="line">    print(sess.run(hello))</div></pre></td></tr></table></figure></p><p>结果如下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/usr/bin/python3 /home/lovemefan/python_project/practice/hello_tensorflow.py</div><div class="line">2019-01-12 15:01:21.072275: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA</div><div class="line">2019-01-12 15:01:21.253447: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:964] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero</div><div class="line">2019-01-12 15:01:21.253901: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1432] Found device 0 with properties: </div><div class="line">name: GeForce GTX 970M major: 5 minor: 2 memoryClockRate(GHz): 1.038</div><div class="line">pciBusID: 0000:01:00.0</div><div class="line">totalMemory: 2.95GiB freeMemory: 2.65GiB</div><div class="line">2019-01-12 15:01:21.253925: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1511] Adding visible gpu devices: 0</div><div class="line">2019-01-12 15:01:26.381187: I tensorflow/core/common_runtime/gpu/gpu_device.cc:982] Device interconnect StreamExecutor with strength 1 edge matrix:</div><div class="line">2019-01-12 15:01:26.381251: I tensorflow/core/common_runtime/gpu/gpu_device.cc:988]      0 </div><div class="line">2019-01-12 15:01:26.381271: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1001] 0:   N </div><div class="line">2019-01-12 15:01:26.381661: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1115] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 2345 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX 970M, pci bus id: 0000:01:00.0, compute capability: 5.2)</div><div class="line">b'hello tensorflow'</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu-18-04-1-LTS-安装tensorflow-gpu&quot;&gt;&lt;a href=&quot;#Ubuntu-18-04-1-LTS-安装tensorflow-gpu&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu 18.04.1 LTS 安装t
      
    
    </summary>
    
    
      <category term="机器学习" scheme="lovemefan.win/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="lovemefan.win/post/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/index.html%20%202019/03/04/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    <id>lovemefan.win/post/408/计算机组成/index.html  2019/03/04/408/计算机组成/</id>
    <published>2019-03-04T03:37:00.000Z</published>
    <updated>2019-12-05T07:54:30.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Principle-of-Computer-Composition"><a href="#Principle-of-Computer-Composition" class="headerlink" title="Principle-of-Computer-Composition"></a>Principle-of-Computer-Composition</h1><p>计算机组成原理思维导图</p><h1 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h1><h2 id="第一章-计算机系统概论"><a href="#第一章-计算机系统概论" class="headerlink" title="第一章 计算机系统概论"></a>第一章 计算机系统概论</h2><h3 id="冯诺依曼型计算机特点"><a href="#冯诺依曼型计算机特点" class="headerlink" title="冯诺依曼型计算机特点"></a>冯诺依曼型计算机特点</h3><ul><li>1.计算机由运算器，控制器，存储器，输入和输出设备5部分组成</li><li>2.采用存储程序的方式，程序和数据放在同一个存储器中，并以二进制表示。</li><li>3.指令由操作码和地址码组成</li><li>4.指令在存储器中按执行顺序存放，由指令计数器(即程序计数器PC)指明要执行的指令所在的储存单元地址，一般按顺序递增，但可按运算结果或外界条件而改变</li><li>5.机器以运算器为中心，输入输出设备与存储器间的数据传送都通过运算器<h3 id="区别以运算器为中心的计算机还是存储器的方法"><a href="#区别以运算器为中心的计算机还是存储器的方法" class="headerlink" title="区别以运算器为中心的计算机还是存储器的方法"></a>区别以运算器为中心的计算机还是存储器的方法</h3></li><li>看输入设备能否直接与存储器相连，是的话就是以存储器为中心<h3 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h3></li><li>硬件<ul><li>结构<ul><li>主机<ul><li>cpu<ul><li>ALU运算器</li><li>CU控制器</li></ul></li><li>存储器<ul><li>主存</li><li>辅存</li></ul></li></ul></li><li>I/O<ul><li>输入设备</li><li>输出设备</li></ul></li></ul></li><li>主要技术指标<ul><li>机器字长<ul><li>CPU一次能处理的数据位数</li></ul></li><li>存储容量<ul><li>存储容量＝存储单元个数×存储字长</li></ul></li><li>运算速度<ul><li>单位时间执行指令的平均条数，MIPS</li></ul></li></ul></li></ul></li><li>软件<ul><li>系统软件<ul><li>用来管理整个计算机系统 <ul><li>语言处理程序</li><li>操作系统</li><li>服务性程序</li><li>数据库管理系统</li><li>网络软件</li></ul></li></ul></li><li>应用软件<ul><li>按任务需要编制成的各种程序<h2 id="第三章-运算方法和运算部件"><a href="#第三章-运算方法和运算部件" class="headerlink" title="第三章 运算方法和运算部件"></a>第三章 运算方法和运算部件</h2><h3 id="数据的表示方法和转换"><a href="#数据的表示方法和转换" class="headerlink" title="数据的表示方法和转换"></a>数据的表示方法和转换</h3></li></ul></li></ul></li><li>机器数正0负1<ul><li>符号数值化的带符号二进制数，称为机器数。</li></ul></li><li>真值:符号位加绝对值</li><li>余三码:在8421码的基础上，把每个编码都加上0011<ul><li>当两个余三码想加不产生进位时，应从结果中减去0011;产生进位时，应将进位信号送入高位，本位加0011</li></ul></li><li>格雷码:任何两个相邻编码只有1个二进制位不同，而其余3个二进制位相同</li><li>8421码<ul><li>权值从高到低为8、4、2、1<ul><li>算术运算时，需对运算结果进行修正。           方法：如果小于、等于(1001)2，不需要修正；否则加6修正<h3 id="带符号的二进制数据在计算机中的表示方法及加减法运算"><a href="#带符号的二进制数据在计算机中的表示方法及加减法运算" class="headerlink" title="带符号的二进制数据在计算机中的表示方法及加减法运算"></a>带符号的二进制数据在计算机中的表示方法及加减法运算</h3></li></ul></li></ul></li><li>原码<ul><li>定义<ul><li>最高位为符号位0/1+数值的绝对值形式</li></ul></li><li>特点<ul><li>（1）值+0，-0的原码分别为00000、10000，形式不唯一；</li><li>（2）正数的原码码值随着真值增长而增长<ul><li>负数的原码码值随着真值增长而减少</li></ul></li><li>（3）n+1位原码表示定点整数范围－(2n－1)——2n－1<ul><li>n+1位原码表示定点小数范围 －(1－2－n)——1－2－n</li></ul></li></ul></li><li>运算<ul><li>绝对值相加减，由数值大小决定运算结果符号</li></ul></li></ul></li><li>补码<ul><li>定义，特点和运算<ul><li>运算:<br>结果不超过机器所能表示范围时，[X+Y]补=[X]补+[Y]补<br>减法运算:<br>[X–Y]补=[X+(–Y)]补=[X]补+[–Y]补</li><li>结论<ul><li>负数的补数＝模＋负数</li><li>互为补数的绝对值相加＝模</li><li>在补数中，减法运算即加法运算</li></ul></li><li>定义<ul><li>定义法，即[X]补=2·符号位+X     （MOD  2）</li><li>X为正数，则符号0+X的绝对值；X为负数，则X的绝对值取反+1。</li></ul></li><li>特点<ul><li>数值零的补码表示唯一</li><li>正数补码码值随着真值增大而增大，负数补码码值随着真值增大而增大</li><li>n+1位补码所表示定点整数范围－ 2n——2n－1，n+1位补码所表示定点小数范围－1——1－2－n</li></ul></li></ul></li><li>加法运算逻辑事例<ul><li>过程</li><li>加减法运算的溢出处理<ul><li>溢出定义<ul><li>当运算结果超出机器数所能表示的范围</li></ul></li><li>加减中，可能产生溢出的情况<ul><li>可能出现溢出<ul><li>同号数相加</li><li>异号数相减</li></ul></li><li>不可能出现溢出<ul><li>异号数相加</li><li>同号数相减</li></ul></li></ul></li><li>判断溢出的方法<ul><li>法一：当符号相同两数相加，结果符号和加数（或被加数）不相同，则溢出<ul><li>fa,fb表示两操作数（A,B）的符号位,fs为结果的符号位</li></ul></li><li>法二：任意符号相加，如果C=Cf，则结果正确，否则溢出；<ul><li>C为数值最高位的进位，Cf为符号位的进位</li></ul></li><li>法三：采用双符号相加，如果fs1=fs2，则结果正确，否则溢出；<ul><li>运算结果的符号位为fs2；</li><li>多符号位的补码，叫做变形补码；</li><li>如果采用双符号位，当数为小数时，模m=4;当数为整数时，模m=2的n+2次方</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>反码<ul><li>定义<ul><li>a.定义法，即[X]反=(2-2-n)·符号位+X   (MOD  2-2-n)</li><li>b.X是正数，[X]反=[X]原；X是负数，符号+数值取反。</li></ul></li><li>特点<ul><li>数值零的反码表示不唯一</li><li>正数反码码值随着真值增大而增大，负数反码码值随着真值增大而增大</li><li>n+1位反码所表示定点整数范围－ (2n－1)——2n－1，n+1位反码所表示定点小数范围－(1－2－n)——1－2－n</li></ul></li><li>加减运算特点<ul><li>在机器数范围内，反码运算满足[X+Y]反=[X]反+[Y]反<br>，[X－Y]反=[X]反+[－Y]反</li></ul></li><li>反码运算在最高位有进位时，要在最低位+1，此时要多进行一次加法运算，增加了复杂性，又影响了速度，因此很少采用</li><li>由于反码运算是以2-2的-次方为模，所以，当最高位有进位而丢掉进位(即2)时，要在最低位+/-1</li></ul></li><li>移码<ul><li>由来及窍门<ul><li>为了从码值直接判断对应真值的大小，所以引进移码</li><li>[X]补的符号位取反，即得[X]移 </li></ul></li><li>特点<ul><li>最高位是符号位，1表示正，0表示负</li><li>数据0有唯一的编码</li><li>移码码值随着真值增大而增大</li><li>n+1位移码所表示定点整数范围－ 2n——2n－1， n+1位移码所表示定点小数范围－1——1－2－n</li><li>计算机中，移码常用于表示阶码，故只执行加、减运算</li><li>计算机中，移码运算公式需要对结果进行修正</li></ul></li><li>浮点数的阶码运算<ul><li>移码定义:[X]移=2的n次方+X</li><li>补码定义:[X]补=2的n+1次方+Y</li><li>阶码求和公式<ul><li>[X]移+[Y]补=[X+Y]移  mod2的n+1次方</li><li>[X]移+[-Y]补=[X-Y]移</li><li>判溢方法<ul><li>双符号位参加运算，最高符号位恒置0</li><li>当结果最高符号位=1则溢出<ul><li>低位符号=0，则上溢；低位符号=1，则下溢；</li></ul></li><li>当结果最高符号位=0则未溢出<ul><li>低位符号=0，负数；低位符号=1，正数</li></ul></li></ul></li><li>说明:如果阶码运算的结果溢出，上述条件不成立。此时，使用双符号位的阶码加法器，并规定移码的第二个符号位，即最高符号位恒用0参加加减运算，则溢出条件是结果的最高符号位为1。此时低位符号为0时，表明结果上溢;为1时，表明结果下溢。当最高符号位为0时，表明没有溢出，低位符号位为1，表明结果为正;为0时表明结果为负。</li></ul></li></ul></li></ul></li><li>补，反，原，移码的相互转换<ul><li>反码-》原码<ul><li>方法：符号位不变，正数不变，负数数值部分取反。</li></ul></li><li>补码-》原码<ul><li>方法1：正数不变，负数数值部分求反加1。</li><li>方法2：串行转换<ul><li>从最后开始数，遇到第一个“1”，除第一个“1”不变，前面数字分别取反</li></ul></li></ul></li><li>移码-》原码<ul><li>方法：移码转换为补码，再转换为原码</li></ul></li></ul></li><li>数据从补码和反码表示形式转换成原码<ul><li>自低位开始转换，从低位向高位，在遇到第一个1之前，保存各位的0不变，第一个1也不变，以后得各位按位取反，最后保持符号位不变，经历一遍后，即可得到补码</li></ul></li><li>定点数和浮点数<ul><li>定点数<ul><li>小数点固定在某个位置上的数据<ul><li>32位定点小数、定点整数补码的范围<ul><li>32位定点小数-1～1-2-31</li><li>32位定点整数-231～231-1</li></ul></li></ul></li></ul></li><li>浮点数<ul><li>根据IEEE754国际标准，常用的浮点数有两种格式<ul><li>Nmax=Mmax<em>2的Emax<br>Nmin=Mmin</em>2的Emax</li><li>单精度(32位)=8位阶码+24位尾数<ul><li>单精度浮点数(32位)，阶码8位(含一位符号位)，尾数24(含一位符号位)，取值范围:-2的127次方～(1-2的-23次方)*2的127次方</li></ul></li><li>双精度(64位)=11位阶码+53位尾数<ul><li>双精度浮点数(64位)，阶码11位(含一位符号位)，尾数53位(含一位符号位)，取值范围:-2的1023次方～(1-2的-52次方)*2的1023次方</li></ul></li></ul></li><li>为了保证数据精度，尾数通常用规格化形式表示:当R=2，且尾数值不为0时，其绝对值应大于或等于(0.5)10<ul><li>左规</li><li>右规</li></ul></li><li>小数点位置可以浮动的数据。</li><li>表示形式：N = M · RE</li><li>计算机中存储形式<ul><li>Ms+Es+E(n位)+M(m位)<ul><li>阶码E，一般为整数，用补码或者移码表示；</li><li>尾数M，一般为规格化的定点小数，用补码表示；<h3 id="二进制乘法运算"><a href="#二进制乘法运算" class="headerlink" title="二进制乘法运算"></a>二进制乘法运算</h3></li></ul></li></ul></li></ul></li></ul></li><li>定点原码一位乘法<ul><li>两个原码数相乘，其乘积的符号为相乘两数符号的异或值，数值则为两数绝对值之积<ul><li>[X·Y]原=[X]原·[Y]原=(X0⊕Y0)|(X1X2..Xn) · (Y1Y2..Yn)</li></ul></li><li>几点结论<ul><li>从低到高根据乘数每位0、1决定相加被乘数还是0；</li><li>相加数每次左移，最后一起求积；</li><li>符号由异或决定</li></ul></li><li>表达式</li><li>电路框架</li><li>修正<ul><li>1.在机器内多个数据一般不能同时相加，一次加法操作只能求出两数之和，因此每每求得一个相加数，就与上次部分积相加</li><li>2.人工计算时，相加数逐次向左偏移一位，由于最后的乘积位数是乘数(或被乘数)的两倍，如按此算法在机器中运算，加法器也需增到两倍。观察计算过程很容易发现，在求本次部分积时，前一次部分积的最低位不再参与运算，因此可将其右移一位，相加数可直送而不必偏移，于是用N位加法器就可实现两个N位数相乘</li><li>部分积右移时，乘数寄存器同时右移一位，这样可以用乘数寄存器的最低位来控制相加数(取被乘数或零)，同时乘数寄存器的最高位可接受部分积右移出来的一位，因此，完成乘法运算后，A寄存器中保存乘积的高位部分，乘数寄存器中保存乘积低位部分</li></ul></li><li>例题</li><li>控制流程图</li></ul></li><li>定点补码一位乘法<ul><li>表达式</li><li>[X·Y]补=[X]补·(－Y0+Y1·2-1+….Yn·2-n)</li><li>注意：此处为双符号位，当最后乘积高位为负数时，需要补充加上[-|x|]补的操作<h3 id="二进制除法"><a href="#二进制除法" class="headerlink" title="二进制除法"></a>二进制除法</h3></li></ul></li><li>加减交替法<ul><li>当余数为正时，商上1，求下一位商的办法是，余数左移一位，再减去除数;当余数为负时，商上0，求下一位商的办法是，余数左移一位，再加上除数。此方法不用恢复余数，所以又叫不恢复余数法。但若最后一次上商为0而又需得到正确余数，则在这最后扔需恢复余数<h3 id="浮点数的运算方法"><a href="#浮点数的运算方法" class="headerlink" title="浮点数的运算方法"></a>浮点数的运算方法</h3></li></ul></li><li>浮点数的加减法运算<ul><li>1.对阶操作<ul><li>求出△E，再对小的进行移位</li></ul></li><li>2.尾数的加减运算</li><li>3.规格化操作<ul><li>规则简化是符号位和数值最高位不同，即00.1xxxx或11.0xxxx</li></ul></li><li>4.舍入<ul><li>超出表示范围的高位为1舍入</li></ul></li><li>5.检查阶码是否溢出</li></ul></li><li>浮点数的乘除法运算<ul><li>1.浮点数阶码运算(移码)<ul><li>牢记公式<ul><li>[X+Y]移=[X]移+[Y]补</li><li>[X–Y]移=[X]移+[–Y]补</li></ul></li></ul></li><li>2.按照一位乘或加减交替除运算<ul><li>先确定符号，在列式子计算<h3 id="运算部件"><a href="#运算部件" class="headerlink" title="运算部件"></a>运算部件</h3></li></ul></li></ul></li><li>ABC寄存器作业</li><li>定点运算部件</li><li>浮点运算部件<ul><li>由阶码运算部件和尾数运算部件组成<h3 id="数据校验码"><a href="#数据校验码" class="headerlink" title="数据校验码"></a>数据校验码</h3></li></ul></li><li>码距<ul><li>任意两个合法码之间不相同的二进制位数的最小值<ul><li>要具有差错能力，则码距&gt;1</li><li>合理增大码距，就能提高发现错误的能力</li></ul></li></ul></li><li>鉴定方法<ul><li>有无差错能力</li><li>是否能合理增大码距</li></ul></li><li>奇偶校验码<ul><li>能发现数据代码中一位或奇数个位出错情况的编码</li><li>实现原理是使码距由1增加到2<ul><li>步骤1：在字节高位补充一位，即校验位</li><li>步骤2：依据图3.10电路形成原始数据D8..D1的校验位值</li><li>步骤3：将9位数据写入主存</li><li>步骤4：读出该数据时，读取数据D8..D1通过图3.10判定合法性</li></ul></li><li>电路图</li><li>结论<ul><li>（1）奇偶校验码只能发现一位或奇位错，且不能确定出错位置</li><li>（2）奇偶校验码的码距=2</li></ul></li></ul></li><li>海明校验码<ul><li>海明码位号和校验位位号的关系<ul><li>Pi的位置在2的i-1次方，但是除了最高位</li></ul></li><li>笔记<ul><li>3,5,7||3,6,7||5,6,7</li></ul></li><li>电路图</li><li>海明码码距为4</li><li>纠一位错，查一位错<ul><li>2∧r≥k+r+1</li></ul></li><li>纠一位错，查两位错<ul><li>2∧(r–1)≥k+r</li></ul></li></ul></li><li>循环冗余校验码(CRC)<ul><li>CRC码可以发现并纠正信息存储或传送过程中连续出现的多位错误</li><li>CRC码一般是指k位信息码之后拼接r位校验码</li><li>模2运算<ul><li>模2加减</li><li>模2乘除</li><li>异或逻辑</li></ul></li><li>CRC的译码与纠错<ul><li>更换不同的待测码字可以证明:余数与出错位的对应关系是不变，只与码制和生成多项式有关</li><li>图<h2 id="第四章-主存储器"><a href="#第四章-主存储器" class="headerlink" title="第四章 主存储器"></a>第四章 主存储器</h2><h3 id="主存储器处于全机中心低位"><a href="#主存储器处于全机中心低位" class="headerlink" title="主存储器处于全机中心低位"></a>主存储器处于全机中心低位</h3><h3 id="辅助存储器或称为外存储器，通常用来存放主存的副本和当前不在运行的程序和数据"><a href="#辅助存储器或称为外存储器，通常用来存放主存的副本和当前不在运行的程序和数据" class="headerlink" title="辅助存储器或称为外存储器，通常用来存放主存的副本和当前不在运行的程序和数据"></a>辅助存储器或称为外存储器，通常用来存放主存的副本和当前不在运行的程序和数据</h3><h3 id="主存储器的类型"><a href="#主存储器的类型" class="headerlink" title="主存储器的类型"></a>主存储器的类型</h3></li></ul></li></ul></li><li>随机存储器RAM</li><li>非易失性存储器<h3 id="主存储器的主要技术指标"><a href="#主存储器的主要技术指标" class="headerlink" title="主存储器的主要技术指标"></a>主存储器的主要技术指标</h3></li><li>主存容量<ul><li>64×8等等</li><li>计算机可寻址的最小信息单元是一个存储字</li><li>主存储器存储单元的总数</li></ul></li><li>存取速度<ul><li>由存储器存取时间和存储周期表示</li></ul></li><li>存储器存取时间<ul><li>启动一次存储器操作(读/写)到完成该操作所经历的时间</li></ul></li><li>存储周期<ul><li>连续启动两次独立的存储器操作所间隔的最小时间<h3 id="主存储器的基本操作"><a href="#主存储器的基本操作" class="headerlink" title="主存储器的基本操作"></a>主存储器的基本操作</h3></li></ul></li><li>CPU通过使用AR(地址寄存器)和DR(数据寄存器)和主存进行数据传送</li><li>若AR为K位字长，DR为n位字长，则允许主存包含2∧k个可寻址单元</li><li>CPU与主存采取异步工作方式，以ready信号表示一次访存操作的结束<h3 id="读-写存储器"><a href="#读-写存储器" class="headerlink" title="读/写存储器"></a>读/写存储器</h3></li><li>随机存储器(RAM)按存储元件在运行中能否长时间保存信息分为静态存储器和动态存储器</li><li>静态存储器，利用触发器保存信息，只要不断电，信息就不会丢失<ul><li>电路简图</li><li>MOS静态存储结构图</li></ul></li><li>动态存储器，利用MOS电容存储电荷来保存信息，需要不断给电容充电才能使信息来保存信息<ul><li>电路简图</li><li>16K×1位动态存储器框图</li><li>再生<ul><li>集中式</li><li>分散式</li><li>时间小于或等于2ms</li><li>行读出再生<h3 id="非易失性半导体存储器"><a href="#非易失性半导体存储器" class="headerlink" title="非易失性半导体存储器"></a>非易失性半导体存储器</h3></li></ul></li></ul></li><li>只读存储器ROM<ul><li>只读不能写</li></ul></li><li>可编程序的只读存储器PROM<ul><li>一次性写入</li></ul></li><li>可擦可编程序的只读存储器EPROM<ul><li>可多次写入、读出</li></ul></li><li>可电擦可编程序只读存储器E2PROM<ul><li>可多次读出但写入次数有限</li></ul></li><li>快擦除读写存储器Flash Memory<ul><li>重复写入、读出<h3 id="存储器的组成与控制"><a href="#存储器的组成与控制" class="headerlink" title="存储器的组成与控制"></a>存储器的组成与控制</h3></li></ul></li><li>存储器容量扩展<ul><li>位扩展:用多个存储器芯片对字长进行扩充</li><li>字扩展:增加存储器中字的数量，提高存储器的寻址范围</li><li>字位扩展，假设一个存储器的容量为M×N位，若使用L×K位存储器芯片，那么，这个存储器共需要(M/L)×(N/K)个存储器芯片<h3 id="多体交叉存储器"><a href="#多体交叉存储器" class="headerlink" title="多体交叉存储器"></a>多体交叉存储器</h3></li></ul></li><li>提高访存速度的方式<ul><li>采用高速器件</li><li>采用层次结构</li><li>调整主存结构</li></ul></li><li>计算机中大容量的主存可由多个存储体组成，每个存储体都具有自己的读写线路，地址寄存器和数据寄存器，称为”存储模块”。这种多模块存储器可以实现重叠与交叉存取</li><li>第i个模块M的地址编号应按下式给出:M×j+i</li><li>连续地址分布在相邻的不同模块内，而同一模块内的地址都是不连续的<h2 id="第五章-指令系统"><a href="#第五章-指令系统" class="headerlink" title="第五章:指令系统"></a>第五章:指令系统</h2><h3 id="指令系统的发展"><a href="#指令系统的发展" class="headerlink" title="指令系统的发展"></a>指令系统的发展</h3></li><li>20世纪70年代末人们提出了便于VLSI实现的精简指令系统计算机，简称RISC，同时将指令系统越来越复杂的计算机称为复杂指令系统计算机，简称CISC<h3 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h3></li><li>结构(操作码+地址码)<ul><li>操作码</li><li>操作数的地址</li><li>操作结果的存储地址</li><li>下一条指令的地址</li></ul></li><li>地址码<ul><li>零地址指令</li><li>一地址指令<ul><li>寻址范围  224 = 16 M<ul><li>2次访存</li></ul></li></ul></li><li>二地址指令<ul><li>寻址范围  212 = 4 K<ul><li>4 次访存</li></ul></li></ul></li><li>三地址指令<ul><li>寻址范围  28 = 256<ul><li>4 次访存</li></ul></li></ul></li><li>多地址指令<ul><li>寻址范围  26 = 64<ul><li>4 次访存</li></ul></li></ul></li></ul></li><li>指令字长<ul><li>取决因素<ul><li>操作码的长度</li><li>操作数地址的长度</li><li>操作数地址的个数</li></ul></li><li>指令字长 固定<ul><li>指令字长 = 存储字长</li></ul></li><li>指令字长 可变<ul><li>按字节的倍数变化</li></ul></li><li>对准边界存放<ul><li>不连续存放数据</li><li>按字节编址<ul><li>a.半字地址最低位恒为0</li><li>b.字地址最低两位恒为0</li><li>c.双字地址的最低三位恒为0</li></ul></li><li>减少访存次数，浪费存储空间</li></ul></li><li>不 对 准 边 界 存 放<ul><li>连续存放数据</li><li>节约存储器空间，但增加访存次数，对多字节数据存在调整高 低字节位置的问题</li></ul></li></ul></li><li>寻址方式<ul><li>确定本条指令的数据地址</li><li>下一条要执行的指令地址的方法</li></ul></li><li>指令操作码的扩展技术<ul><li>指令操作码的长度决定了指令系统中完成不同操作的指令数</li><li>若某机器的操作码长度固定为K位，则它最多只能有2^K条不同指令</li><li>指令操作码两种格式<ul><li>固定格式<ul><li>优点:对于简化硬件设计，减少指令译码时间非常有利</li><li>缺点:指令少，浪费地址</li></ul></li><li>可变格式(分散地放在字的不同字段)<ul><li>优点:指令多，缩短指令平均长度，减少程序总位数，增加指令字所能表示的操作信息</li><li>缺点:译码复杂，控制器的设计难度增大</li></ul></li></ul></li><li>拓展方法的一个重要原则<ul><li>使用频度(即指令在程序中出现概率)高的指令应分配短的操作码，使用频度低的指令相应地分配较长的操作码</li></ul></li></ul></li><li>指令系统的兼容性<ul><li>保持系统向上兼容<h3 id="精简指令系统计算机（RISC）——用于小型机"><a href="#精简指令系统计算机（RISC）——用于小型机" class="headerlink" title="精简指令系统计算机（RISC）——用于小型机"></a>精简指令系统计算机（RISC）——用于小型机</h3><h3 id="复杂指令系统计算机（CISC）——用于大型机"><a href="#复杂指令系统计算机（CISC）——用于大型机" class="headerlink" title="复杂指令系统计算机（CISC）——用于大型机"></a>复杂指令系统计算机（CISC）——用于大型机</h3><h2 id="第六章：中央处理器"><a href="#第六章：中央处理器" class="headerlink" title="第六章：中央处理器"></a>第六章：中央处理器</h2><h3 id="计算机工作过程"><a href="#计算机工作过程" class="headerlink" title="计算机工作过程"></a>计算机工作过程</h3></li></ul></li><li>加电——》产生reset信号——》执行程序——》停机——》停电</li><li>产生reset信号的任务<ul><li>任务一：使计算机处于初始状态</li><li>任务二：从PC中取出指令地址</li></ul></li><li>控制器作用是协调并控制计算机各部件执行程序的指令序列<h3 id="控制器的组成"><a href="#控制器的组成" class="headerlink" title="控制器的组成"></a>控制器的组成</h3></li><li>控制器的功能<ul><li>取指令<ul><li>发出指令地址，取出指令的内容</li></ul></li><li>分析指令<ul><li>（1）对操作码译码产生操作相应部件的控制信号</li><li>（2）根据寻址方式形成操作数地址</li></ul></li><li>执行指令<ul><li>（1）根据分析指令后产生控制信号、操作数地址信号序列，通过CPU及输入输出设备的执行实现每条指令的功能</li><li>（2）结果回送存储器</li><li>（3）形成下条指令的地址</li></ul></li><li>控制程序和数据的输入和结果输出</li><li>对异常情况和某些请求的处理<ul><li>异常情况的处理：例如算术运算的溢出、数据传送奇偶错</li><li>某些请求的处理<ul><li>“中断请求”信号</li><li>DMA请求信号</li></ul></li></ul></li></ul></li><li>控制器的组成<ul><li>程序计数器（PC）<ul><li>即地址寄存器，用来存放当前正在执行的指令地址或即将要执行的下一条指令地址</li></ul></li><li>指令寄存器（IR）<ul><li>用以存放当前正在执行的指令，以便在指令执行过程中控制完成一条指令的全部功能</li></ul></li><li>指令译码器或操作码译码器<ul><li>对指令寄存器中的操作码进行分析解释，产生相应的控制信号</li></ul></li><li>脉冲源及启停线路<ul><li>脉冲源参数一定评率的脉冲作为整个机器的时钟脉冲，是机器周期和工作脉冲的基准信号，在机器刚加电时，还应产生一个总清信号（reset）</li></ul></li><li>时序控制信号形成部件<ul><li>当程序启动后，在CLK时钟作用下，根据当前正在执行的指令的需要，产生相应的时序控制信号，并根据被控制功能部件的反馈信号调整时序控制信号<ul><li>控制存储器</li><li>微指令寄存器<ul><li>控制字段+下址</li></ul></li></ul></li></ul></li><li>周期概念<ul><li>指令周期<ul><li>完成一条指令所需的时间，包括取指令、分析指令、执行指令</li></ul></li><li>机器周期<ul><li>也称为CPU周期，是CPU从内存中读取一个指令的时间，通常等于取指周期</li></ul></li><li>时钟周期<ul><li>称为节拍脉冲或T周期，是基准脉冲信号</li></ul></li></ul></li><li>三条假设<ul><li>程序是存放在主存中的，当执行完一条指令后才从主存中取下一条指令（非流水线）</li><li>指令的长度是固定的，并限制了寻址方式的多样化</li><li>在程序运行前，程序和数据都已存在主存中</li></ul></li></ul></li><li>指令执行过程（运算器和控制器配合）<ul><li>组成控制器的基本电路<ul><li>具有记忆功能的触发器以及由它组成的寄存器，计数器和存储单元</li><li>没有记忆功能的门电路及由它组成的加法器，算术逻辑运算单元（ALU）和各种逻辑电路</li></ul></li><li>举例<ul><li>加法<ul><li>取指令——》计算操作数地址——》取操作数——》执行结果并运算送结果</li></ul></li><li>要能看懂时序图<ul><li>哪些指令在对应的时间有效</li></ul></li><li>条件转移指令<ul><li>取指令——》计算地址</li></ul></li></ul></li><li>控制器的功能就是按每一条指令的要求产生所需的控制信号</li><li>产生控制信号的方法<ul><li>微程序控制</li><li>硬布线控制<h3 id="微程序控制计算机的基本工作原理"><a href="#微程序控制计算机的基本工作原理" class="headerlink" title="微程序控制计算机的基本工作原理"></a>微程序控制计算机的基本工作原理</h3></li></ul></li></ul></li><li>基本概念<ul><li>微指令<ul><li>在微程序控制的计算机中，将由同时发出的控制信号所执行的一组微操作</li></ul></li><li>微命令<ul><li>将指令分为若干条微指令，按次序执行这些微指令。组成微指令的操作即微命令</li></ul></li><li>微程序<ul><li>计算机的程序由指令序列构成，而计算机每条指令的功能均由微指令序列解释完成，这些微指令序列的集合就叫做微程序</li></ul></li><li>控制存储器<ul><li>微程序一般是存放在专门的存储器中的，由于该存储器主要存放控制命令（信号）与下一条执行的微指令地址（简称下址）</li><li>存储单元内容<ul><li>（1）微指令的控制信号——控制位</li><li>（2）下条微指令的地址——下址字段</li></ul></li><li>存储芯片：ROM</li></ul></li><li>执行一条指令实际上就是执行一段存放在控制存储器中的微程序</li></ul></li><li>实现微程序控制的基本原理<ul><li>控制信号（23条）</li><li>书上P123页为加法的过程</li><li>微指令格式：控制字段+下址字段</li><li>23个控制位，12个下址位——》容量为4K</li><li>取址微指令的操作对所有指令都是相同的，所以是一条公用的微指令，其下址由操作码译码产生</li></ul></li><li>微程序控制器</li><li>时序信号及工作脉冲的形成</li><li>停机和停电的区别<ul><li>停机<ul><li>电压：稳定<ul><li>存放内容：保持<ul><li>重启PC内容：断点指令地址</li></ul></li></ul></li></ul></li><li>停电<ul><li>电压：消失<ul><li>存放内容：RAM的内容消失<ul><li>重启PC内容：第一条指令地址<h3 id="微程序设计技术"><a href="#微程序设计技术" class="headerlink" title="微程序设计技术"></a>微程序设计技术</h3></li></ul></li></ul></li></ul></li></ul></li><li>如何缩短微指令字长<ul><li>直接控制法（容量太小）<ul><li>编译方法：每一位代表一个控制信号，直接送往相应的控制点</li><li>优点：控制简单</li><li>缺点：微指令字长过大</li></ul></li><li>字段直接编译法<ul><li>选出互斥的微指令</li><li>每个字段都要留出一个代码，表示本段不发出任何指令（000）</li><li>优点：节省微指令的字长</li><li>缺点：增加了额外的硬件开销</li></ul></li><li>字段间接编译法<ul><li>指令之间相互联系的情况</li><li>举例：A为0-7，B为0-3，如果是直接编译——3+2=5，如果是间接编译——3+1=4</li><li>编码方法：在字段直接编译法中，译码输出端要兼由另一字段中的某些微命令配合解释</li><li>优点：减少了微指令长度</li><li>缺点：可能削弱微指令的并行控制能力，同时增加硬件开销</li></ul></li><li>常熟源字段E(了解)</li></ul></li><li>如何减少微指令长度<ul><li>现行微指令/微地址<ul><li>现行微指令：当前正在执行的指令</li><li>现行微地址：存放现行微指令的控制器存储单元</li></ul></li><li>后继微指令/微地址<ul><li>后继微指令：下一条要执行的微指令</li><li>后继微地址：存放后继微指令的控制器存储单元</li></ul></li><li>增量与下址字段结合产生后继微指令的方法<ul><li>下址字段分成：转移控制字段BCF和转移地址字段BAF<ul><li>BCF：控制微程序的转移情况</li><li>BAF：转移后的微指令所在地址</li></ul></li><li>BAF有两种情况<ul><li>与uPC的位数相等——转移灵活，但增加微指令长度</li><li>比uPC短——转移地址收到限制，但可缩短微指令长度</li></ul></li><li>优点<ul><li>微指令的下址字段很短，仅用于选择输入uPC计数器的某条线路有效</li></ul></li><li>缺点<ul><li>微程序转移不灵活，使得微程序在控存中的物理空间分配有困难</li></ul></li></ul></li><li>多路转移方式<ul><li>一条微指令存在多个转移分支的情况称为多路转移</li></ul></li><li>微中断<ul><li>1.微中断请求信号是由程序中断请求信号引起的</li><li>2.在完成现行指令的微程序后响应该微中断请求</li><li>3.由硬件产生对应微中断处理程序在控存中的入口地址</li></ul></li></ul></li><li>如何提高微程序的执行速度</li><li>微指令格式<ul><li>水平型微指令——直接控制，字段编译（直接、间接）<ul><li>特点：在一条微指令中定义并并行执行多个微命令</li></ul></li><li>垂直型微指令<ul><li>特点：不强调实现微指令的并行控制功能</li><li>定义：采用微操作码编译法，由操作码规定微指令的功能</li></ul></li></ul></li><li>微程序控制存储器<ul><li>一般采用ROM存储器</li><li>也可采用RAM，为防止断电后内容消失，则必须开机后将外存中存放的微程序调入控存RAM，然后才能执行程序。</li><li>当前为了能不断扩展指令系统，通常采用ROM+RAM</li></ul></li><li>动态微程序设计<ul><li>定义：能根据用户要求改变微程序</li><li>优点：是计算机能更灵活、有效的适应于各种不同的应用目标</li></ul></li><li>控制存储器的操作（P136）<ul><li>串行方式</li><li>并行方式——比串行多了微指令寄存器<ul><li>微周期=max(取微指令时间,执行微指令时间)</li><li>由于取微指令、执行微指令同时进行，故对于某些后继微地址的产生根据处理结果而定的微指令，则延迟一个微周期再取微指令<h3 id="硬布线控制的计算机（RISC）——特点快"><a href="#硬布线控制的计算机（RISC）——特点快" class="headerlink" title="硬布线控制的计算机（RISC）——特点快"></a>硬布线控制的计算机（RISC）——特点快</h3></li></ul></li></ul></li><li>形成操作控制信号的逻辑框图（P141）</li><li>操作控制信号的产生<ul><li>取值周期cy1所产生的信号对所有指令都是相同的，即与当前执行的指令无关，逻辑式得到最简单的形式</li><li>通常，同一个控制控制信号在若干条指令的某些周期（或再加上一些条件）中都需要，为此需要把它们组合起来</li><li>同种类型的指令所需要的控制信号大部分是相同的，仅有少量区别</li><li>在确定指令的操作码时（即对具体指令赋予二进制操作码），为了便于逻辑表达式的化简以减少逻辑电路数量，往往给予特别关注</li></ul></li><li>设计组合逻辑电路从而产生需要的控制信号的步骤<ul><li>1.实际逻辑问题2.真值表3.公式化简4.逻辑电路图</li></ul></li><li>设计目标<ul><li>使用最少的电路元件达到最高的操作速度<h3 id="流水线工作原理"><a href="#流水线工作原理" class="headerlink" title="流水线工作原理"></a>流水线工作原理</h3></li></ul></li><li>几点结论<ul><li>每条指令的执行时间不变</li><li>每条指令处理结果的时间缩短</li><li>流水线处理速率最高时=流水线处于满载的稳定状态</li><li>流水线处理速率最低时=流水线未满载状态</li><li>为了满足在重叠时间段不同指令的机器周期能够完成指定的操作，将时间段=操作完成的最长时间</li><li>为了保证一个周期内流水线的输入信号不变，相邻时间段之间必须设置锁存器或寄存器</li><li>除了指令执行流水线，还有运算操作流水线</li></ul></li><li>相关问题<ul><li>流水线阻塞（P163-6.15）<ul><li>数据相关产生<ul><li>假设第二条指令需要的操作数是第一条指令运算的结果，那么出现了数据相关</li></ul></li><li>指令执行时间不同产生</li><li>程序转移的影响</li><li>异常情况响应中断<h2 id="第七章：存储系统"><a href="#第七章：存储系统" class="headerlink" title="第七章：存储系统"></a>第七章：存储系统</h2><h3 id="存储系统的层次结构"><a href="#存储系统的层次结构" class="headerlink" title="存储系统的层次结构"></a>存储系统的层次结构</h3></li></ul></li></ul></li><li>cache-&gt;主存-&gt;辅存<h3 id="高速缓冲存储器"><a href="#高速缓冲存储器" class="headerlink" title="高速缓冲存储器"></a>高速缓冲存储器</h3></li><li>cache的工作原理<ul><li>局部性原理</li><li>主存地址和cache地址（P166 图7.2）</li><li>块长<ul><li>块长一般取一个主存周期所能调出的信息长度（一般为16个字）</li></ul></li><li>cache的容量和块的大小是影响cache的效率的重要因素</li><li>命中率<ul><li>CPU所要访问的信息是否在cache中的比率，而将所要访问的信息不在cache中的比率称为失败率</li></ul></li><li>一致性策略<ul><li>标志交换方式（写回法）</li><li>通过式写入（写通法）</li><li>写操作直接对主存进行，而不写入cache</li></ul></li><li>cache的存取时间<ul><li>平均存取时间=h*tc+(1-h)(tc+tm) </li></ul></li><li>最好替换策略<ul><li>按照被替换的字块是下一段时间最少使用的，由替换部件实现</li></ul></li></ul></li><li>cache组织<ul><li>地址映像<ul><li>直接映像<ul><li>cache中许多空的位置被浪费</li><li>主存地址：主存字块标记+cache字块地址+字块内地址</li></ul></li><li>全相联映像<ul><li>成本太高而不能采用</li><li>主存地址：主存字块标记+字块内地址</li><li>优点<ul><li>方式灵活，缩小了块发生冲突的概率</li></ul></li><li>缺点<ul><li>增加了标识位位数</li><li>增加了寻找主存块在cache中对应块的时间</li></ul></li></ul></li><li>组相联映像<ul><li>直接映像和全相联映像的折衷</li><li>主存地址：主存字块标记+组地址+块内地址<h3 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h3></li></ul></li></ul></li></ul></li><li>存储管理部件（MMU）<ul><li>现代计算机一般都有辅助存储器，但具有辅存的存储系统不一定是虚拟存储系统</li><li>虚拟存储系统的特点<ul><li>允许用户程序用比主存大的多的空间来访问主存</li><li>每次访存都要进行虚实地址的转换<h2 id="第八章：辅助存储器"><a href="#第八章：辅助存储器" class="headerlink" title="第八章：辅助存储器"></a>第八章：辅助存储器</h2><h3 id="半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器"><a href="#半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器" class="headerlink" title="半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器"></a>半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器</h3><h3 id="辅助存储器的种类"><a href="#辅助存储器的种类" class="headerlink" title="辅助存储器的种类"></a>辅助存储器的种类</h3></li></ul></li></ul></li><li>磁表面存储器<ul><li>数字式磁记录<ul><li>硬盘、软盘和磁带</li></ul></li><li>模拟式磁记录<ul><li>录音、录像设备</li></ul></li></ul></li><li>光存储器<ul><li>光盘<h3 id="串行存储器"><a href="#串行存储器" class="headerlink" title="串行存储器"></a>串行存储器</h3></li></ul></li><li>顺序存取存储器</li><li>直接存取存储器<h3 id="辅助存储器的技术指标"><a href="#辅助存储器的技术指标" class="headerlink" title="辅助存储器的技术指标"></a>辅助存储器的技术指标</h3></li><li>存储密度<ul><li>定义：单位长度或单位面积磁层表面磁层所存储的二进制信息量</li><li>道密度<ul><li>沿磁盘半径方向单位长度的磁道数称为道密度，单位为道/英寸tpi或道/毫米tpmm</li></ul></li><li>位密度或线密度<ul><li>单位长度磁道所能记录二进制信息的位数叫位密度或线密度，单位为位/英寸bpi或位/毫米bpmm</li></ul></li><li>每个磁道所存储的信息量是一样的</li></ul></li><li>存储容量<ul><li>C = n × k × s</li></ul></li><li>寻址时间<ul><li>平均寻址时间Ta=平均找道时间Ts+平均等待时间Tw</li><li>辅存的速度<ul><li>寻址时间</li><li>磁头读写时间</li></ul></li></ul></li><li>数据传输率<ul><li>Dr  = D × V</li></ul></li><li>误码率</li><li>价格<h3 id="硬磁盘存储器的类型"><a href="#硬磁盘存储器的类型" class="headerlink" title="硬磁盘存储器的类型"></a>硬磁盘存储器的类型</h3></li><li>(1) 固定磁头和移动磁头</li><li>(2) 可换盘和固定盘<h3 id="磁盘存储器"><a href="#磁盘存储器" class="headerlink" title="磁盘存储器"></a>磁盘存储器</h3></li><li>温彻斯特磁盘简称温盘</li><li>磁盘存储器由驱动器（HDD），控制器（HDC）和盘片组成</li><li>最外面的同心圆叫0磁道，最里面的同心圆假设称为n磁道</li><li>驱动器的定位驱动系统实现快速精准的磁头定位</li><li>主轴系统的作用是带动盘片按额定转速稳定旋转</li><li>数据控制系统的作用是控制数据的写入和读出，包括寻址，磁头旋转，写电流控制，读出放大，数据分离</li><li>磁盘控制器有两个方向的接口<ul><li>与主机的接口</li><li>与驱动器（设备）的接口<h3 id="光盘"><a href="#光盘" class="headerlink" title="光盘"></a>光盘</h3></li></ul></li><li>采用光存储技术<ul><li>利用激光写入和读出</li><li>第一代光存储技术<ul><li>采用非磁性介质<ul><li>不可擦写</li></ul></li></ul></li><li>第二代光存储技术<ul><li>采用磁性介质<ul><li>可擦写</li></ul></li></ul></li></ul></li><li>光盘的存储原理<ul><li>只读型和只写一次型<ul><li>热作用（物理或化学变化）</li></ul></li><li>可擦写光盘<ul><li>热磁效应<h2 id="第九-十章：输出输出（I-O）设备-系统"><a href="#第九-十章：输出输出（I-O）设备-系统" class="headerlink" title="第九/十章：输出输出（I/O）设备/系统"></a>第九/十章：输出输出（I/O）设备/系统</h2><h3 id="设备控制器（I-O）的基本功能"><a href="#设备控制器（I-O）的基本功能" class="headerlink" title="设备控制器（I/O）的基本功能"></a>设备控制器（I/O）的基本功能</h3></li></ul></li></ul></li><li>实现主机和外部设备之间的数据传送</li><li>实现数据缓冲，以达到主机同外部设备之间的速度匹配</li><li>接受主机的命令，提供设备接口的设备，并按照主机的命令控制设备<h3 id="I-O-编址方式"><a href="#I-O-编址方式" class="headerlink" title="I/O 编址方式"></a>I/O 编址方式</h3></li><li>(1) 统一编址：用取数、存数指令</li><li>(2) 不统一编址：有专门的 I/O 指令<h3 id="I-O-与主机的连接方式"><a href="#I-O-与主机的连接方式" class="headerlink" title="I/O 与主机的连接方式"></a>I/O 与主机的连接方式</h3></li><li>辐射式连接<ul><li>每台设备都配有一套</li><li>控制线路和一组信号线</li><li>不便于增删设备</li></ul></li><li>总线连接<ul><li>便于增删设备<h3 id="I-O设备"><a href="#I-O设备" class="headerlink" title="I/O设备"></a>I/O设备</h3></li></ul></li><li>人机交互设备<ul><li>键盘、鼠标等</li></ul></li><li>计算机信息的驻留设备<ul><li>硬盘、光盘等</li></ul></li><li>机——机通信设备<ul><li>MODEN等<h3 id="为什么要设置接口？"><a href="#为什么要设置接口？" class="headerlink" title="为什么要设置接口？"></a>为什么要设置接口？</h3></li></ul></li><li><ol><li>实现设备的选择</li></ol></li><li><ol><li>实现数据缓冲达到速度匹配</li></ol></li><li><ol><li>实现数据串     并格式转换</li></ol></li><li><ol><li>实现电平转换</li></ol></li><li><ol><li>传送控制命令</li></ol></li><li><ol><li>反映设备的状态<ul><li>（“忙”、“就绪”、“中断请求”）<h3 id="中断服务程序的流程"><a href="#中断服务程序的流程" class="headerlink" title="中断服务程序的流程"></a>中断服务程序的流程</h3></li></ul></li></ol></li><li>(1) 保护现场<ul><li>程序断点的保护</li><li>寄存器内容的保护</li></ul></li><li>(2) 中断服务<ul><li>对不同的 I/O 设备具有不同内容的设备服务</li></ul></li><li>(3) 恢复现场<ul><li>出栈指令</li></ul></li><li>(4) 中断返回<ul><li>中断返回指令<h3 id="单重中断和多重中断"><a href="#单重中断和多重中断" class="headerlink" title="单重中断和多重中断"></a>单重中断和多重中断</h3></li></ul></li><li>单重 中断<ul><li>不允许中断 现行的 中断服务程序</li></ul></li><li>多重 中断<ul><li>允许级别更高 的中断源</li><li>中断 现行的 中断服务程序<h3 id="DMA-方式"><a href="#DMA-方式" class="headerlink" title="DMA 方式"></a>DMA 方式</h3></li></ul></li><li>主存和 I/O 之间有一条直接数据通道</li><li>CPU 和 I/O 并行工作</li><li>DMA 的三种工作方式<ul><li>(1) CPU暂停方式</li><li>(2) CPU周期窃取方式</li><li>(3)直接访问存储器</li></ul></li><li>DMA 接口功能<ul><li>(1) 向 CPU 申请 DMA 传送</li><li>(2) 处理总线 控制权的转交</li><li>(3) 管理 系统总线、控制 数据传送</li><li>(4) 确定 数据传送的 首地址和长度，修正 传送过程中的数据地址和长度</li><li>(5) DMA 传送结束时，给出操作完成信号</li></ul></li><li>DMA 传送过程<ul><li>预处理、数据传送、后处理<h3 id="外设接口"><a href="#外设接口" class="headerlink" title="外设接口"></a>外设接口</h3></li></ul></li><li>设备与主机相连时，必须按照规定的物理互连特性、电气特性等进行连接，这些特性的技术规范称为接口标准</li></ul><p><img src="https://img-blog.csdn.net/20180620085759852?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nhb3lhbmdfSGU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="计算机组成原理思维导图图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Principle-of-Computer-Composition&quot;&gt;&lt;a href=&quot;#Principle-of-Computer-Composition&quot; class=&quot;headerlink&quot; title=&quot;Principle-of-Computer-Comp
      
    
    </summary>
    
    
      <category term="408" scheme="lovemefan.win/tags/408/"/>
    
  </entry>
  
  <entry>
    <title>个人网站首次备案的记录</title>
    <link href="lovemefan.win/post/%E5%85%B6%E4%BB%96/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%A4%87%E6%A1%88/index.html%20%202018/10/12/%E5%85%B6%E4%BB%96/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%A4%87%E6%A1%88/"/>
    <id>lovemefan.win/post/其他/为什么要备案/index.html  2018/10/12/其他/为什么要备案/</id>
    <published>2018-10-12T01:37:00.000Z</published>
    <updated>2018-10-12T01:39:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要备案"><a href="#为什么要备案" class="headerlink" title="为什么要备案"></a>为什么要备案</h2><blockquote><p>根据国务院令第292号《互联网信息服务管理办法》和工信部令第 33 号《非经营性互联网信息服务备案管理办法》规定，国家对经营性互联网信息服务实行许可制度，对非经营性互联网信息服务实行备案制度。未取得许可或者未履行备案手续的，不得从事互联网信息服务，否则属于违法行为。</p><h3 id="不备案的影响"><a href="#不备案的影响" class="headerlink" title="不备案的影响"></a>不备案的影响</h3><p>域名将无法解析<br>也就是说，使用<code>中国大陆境</code>内的服务器开办网站必须先办理网站备案，备案成功才能合法的使用域名解析,不然买个域名啥都没用.不想备案就只能使用香港或境外服务器,笔者学生党买不起</p><h2 id="如何备案"><a href="#如何备案" class="headerlink" title="如何备案"></a>如何备案</h2><p>目前阿里云,腾讯云,百度云都可代理备案<br>首先备案需要个人真实信息,不需要收费</p><h3 id="备案基本流程"><a href="#备案基本流程" class="headerlink" title="备案基本流程"></a>备案基本流程</h3><p> <img src="http://oskhhyaq3.bkt.clouddn.com/img/180918/7dgiEHL5EG.png?imageslim" alt="mark"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>网站名称要求三个字以上（含三个字）,不可以有敏感词啦,个人网站名称要尽量体现个人网站的主要内容；例如，技术分享类，个人爱好类；不能涉及到论坛、博客、行业、企业、产品、经营性等信息，且个人网站名称请勿涉及个人姓名、域名、地名、成语。(<code>不合格则驳回</code>)</li><li>域名千万别解析,管局规则要求，未取得备案号的域名，在备案期间禁止打开访问(<code>解析就驳回</code>)<h2 id="进度记录"><a href="#进度记录" class="headerlink" title="进度记录"></a>进度记录</h2><h3 id="完成备案信息"><a href="#完成备案信息" class="headerlink" title="完成备案信息"></a>完成备案信息</h3><img src="http://oskhhyaq3.bkt.clouddn.com/img/180918/8cE6agi6hb.png?imageslim" alt="mark"><br>上传材料有身份证正反面,还有穿着衣服的非裸贷手持身份证照片(+_+)以及网站核验单(按要求来)</li></ul></blockquote><p>我的<code>核验单</code>长这个样子,腾讯云的<br><img src="http://oskhhyaq3.bkt.clouddn.com/img/180918/AhLEmdeG58.png?imageslim" alt="mark"></p><h3 id="备案信息第一次提交结果"><a href="#备案信息第一次提交结果" class="headerlink" title="备案信息第一次提交结果"></a>备案信息第一次提交结果</h3><p><img src="http://oskhhyaq3.bkt.clouddn.com/img/180918/iKBL70kCIl.png?imageslim" alt="mark"><br>审核倒是挺快的,第二天就完成审核</p><p>第一次有三点不合格</p><ul><li>核验单未按手印</li><li>网站名称不合格</li><li>把域名解析到了服务器上…  (ˉ▽ˉ；)…</li></ul><h3 id="备案信息第二次提交结果"><a href="#备案信息第二次提交结果" class="headerlink" title="备案信息第二次提交结果"></a>备案信息第二次提交结果</h3><p><img src="http://oskhhyaq3.bkt.clouddn.com/img/180919/4Jj31KllkF.png?imageslim" alt="mark"><br>第二次审核同样是第二天出结果,通过了φ(*￣0￣)<br>接下来申请幕布拍照</p><h3 id="幕布拍照"><a href="#幕布拍照" class="headerlink" title="幕布拍照"></a>幕布拍照</h3><p>要求:上传在指定幕布的上身照<br>审核通过(刚好碰上国庆假期,用了五六天)</p><h3 id="管局审核"><a href="#管局审核" class="headerlink" title="管局审核"></a>管局审核</h3><p>这个速度厉害了,国庆放假后一个星期就通过了,感动(ಥ _ ಥ)<br><img src="http://oskhhyaq3.bkt.clouddn.com/img/181012/dhK7F8Id2c.png?imageslim" alt="mark"><br>个人网站备案完成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要备案&quot;&gt;&lt;a href=&quot;#为什么要备案&quot; class=&quot;headerlink&quot; title=&quot;为什么要备案&quot;&gt;&lt;/a&gt;为什么要备案&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;根据国务院令第292号《互联网信息服务管理办法》和工信部令第 33 号《非经营性互
      
    
    </summary>
    
    
      <category term="其他" scheme="lovemefan.win/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>视频解析工具分享</title>
    <link href="lovemefan.win/post/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/ivideo/index.html%20%202018/09/06/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/ivideo/"/>
    <id>lovemefan.win/post/学习资料/ivideo/index.html  2018/09/06/学习资料/ivideo/</id>
    <published>2018-09-06T07:26:00.000Z</published>
    <updated>2018-09-06T07:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ivideo"><a href="#ivideo" class="headerlink" title="ivideo"></a>ivideo</h1><p>发现一款好东西当然要分享出来了<br><a href="https://github.com/phobal/ivideo" target="_blank" rel="external">Windows,Linux,Mac原项目链接</a><br><a href="https://github.com/CrazyDudo/fvip" target="_blank" rel="external">安卓版原项目链接</a><br><a href="https://github.com/alphardex/ivideo-python" target="_blank" rel="external">网页版原项目链接</a></p><h2 id="产品介绍"><a href="#产品介绍" class="headerlink" title="产品介绍"></a>产品介绍</h2><blockquote><p>基于 Electron 开发的跨平台客户端版本的视频播放器，该播放器包括国内主流视频平台视频资源，你不用去单独下载各个平台的客户端，只需要使用这一个客户端就能查看所有平台的视频，并且内置了各大视频网站 VIP 资源。</p></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>下载客户端 </li></ol><ul><li><a href="https://github.com/phobal/ivideo/releases/download/1.1.1/ivideo-1.1.1-mac.zip" target="_blank" rel="external">Mac</a></li><li><a href="https://github.com/phobal/ivideo/releases/download/1.1.1/ivideo-1.1.1-win.zip" target="_blank" rel="external">Windows</a></li><li><a href="https://github.com/phobal/ivideo/releases/download/1.0.0/linux-unpacked.v1.0.0.zip" target="_blank" rel="external">Linux</a></li><li><a href="https://fir.im/qu73" target="_blank" rel="external">Android</a> </li><li><a href="https://ivideo-python.herokuapp.com/" target="_blank" rel="external">网页版</a></li></ul><ol><li>选择视频资源  </li></ol><p>比方说看腾讯视频上的 VIP 才能看的《下一站,别离》</p><p><img src="https://github.com/phobal/ivideo/blob/master/resources/showcase01.jpg?raw=true" alt=""></p><p>点击进去以后提示需要开通VIP才能看</p><p><img src="https://github.com/phobal/ivideo/blob/master/resources/showcase02.jpg?raw=true" alt=""></p><ol><li>选择资源播放接口  </li></ol><p><img src="https://github.com/phobal/ivideo/blob/master/resources/showcase03.jpg?raw=true" alt=""></p><p>点击【确定】按钮就可以播放了，如果遇到无法播放的情况，请多换几条线路试试</p><p><img src="https://github.com/phobal/ivideo/blob/master/resources/showcase04.jpg?raw=true" alt=""></p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ul><li>Electron</li><li>React</li><li>Redux</li></ul><h3 id="如何启动"><a href="#如何启动" class="headerlink" title="如何启动"></a>如何启动</h3><blockquote><p>node version &gt;= 7.6</p></blockquote><ol><li>clone 项目到本地</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">git <span class="built_in">clone</span> https://github.com/phobal/ivideo.git</div></pre></td></tr></table></figure><ol><li>进入项目 <code>cd ivideo</code></li><li>安装依赖 <code>yarn install</code>(如果没有的话，请全局安装yarn, <code>npm i yarn -g</code>)</li><li>打开开发环境 <code>yarn start</code></li></ol><h3 id="如何编译"><a href="#如何编译" class="headerlink" title="如何编译"></a>如何编译</h3><ul><li>编译全平台 <code>yarn package-all</code></li><li>编译当前平台 <code>yarn package</code></li><li>windows: <code>yarn package-win</code></li><li>Linux <code>yarn package-linux</code></li></ul><p>编译出来的包都放在 <code>release</code> 目录下</p><p>该项目是基于 <a href="https://github.com/chentsulin/electron-react-boilerplate" target="_blank" rel="external">electron-react-boilerplate</a> 脚手架 进行创建，感谢 @<a href="https://github.com/chentsulin" target="_blank" rel="external">chentsulin</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ivideo&quot;&gt;&lt;a href=&quot;#ivideo&quot; class=&quot;headerlink&quot; title=&quot;ivideo&quot;&gt;&lt;/a&gt;ivideo&lt;/h1&gt;&lt;p&gt;发现一款好东西当然要分享出来了&lt;br&gt;&lt;a href=&quot;https://github.com/phobal/
      
    
    </summary>
    
    
      <category term="其他" scheme="lovemefan.win/tags/%E5%85%B6%E4%BB%96/"/>
    
      <category term="学习资料" scheme="lovemefan.win/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>后端架构师技术图谱 --来自github</title>
    <link href="lovemefan.win/post/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E3%80%8A%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1%E3%80%8B/index.html%20%202018/09/05/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E3%80%8A%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1%E3%80%8B/"/>
    <id>lovemefan.win/post/学习资料/《后端架构师技术图谱》/index.html  2018/09/05/学习资料/《后端架构师技术图谱》/</id>
    <published>2018-09-05T02:11:00.000Z</published>
    <updated>2018-09-05T02:21:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>原文地址</code><a href="https://github.com/xingshaocheng/architect-awesome" target="_blank" rel="external">https://github.com/xingshaocheng/architect-awesome</a><br><code>笔者只是Mark一下,侵删</code></p><h1>《后端架构师技术图谱》</h1><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="external"><img src="https://img.shields.io/badge/License-Creative%20Commons-DC3D24.svg" alt="知识共享协议（CC协议）"></a><br><a href="https://github.com/xingshaocheng/architect-awesome/stargazers" target="_blank" rel="external"><img src="https://img.shields.io/github/stars/xingshaocheng/architect-awesome.svg?style=flat&amp;label=Star" alt="GitHub stars"></a><br><a href="https://github.com/xingshaocheng/architect-awesome/fork" target="_blank" rel="external"><img src="https://img.shields.io/github/forks/xingshaocheng/architect-awesome.svg?style=flat&amp;label=Fork" alt="GitHub forks"></a><br><a href="https://github.com/xingshaocheng/architect-awesome/watchers" target="_blank" rel="external"><img src="https://img.shields.io/github/watchers/xingshaocheng/architect-awesome.svg?style=flat&amp;label=Watch" alt="GitHub watchers"></a></p><p><strong>更新于20180624</strong></p><ul><li><a href="#数据结构">数据结构</a><ul><li><a href="#队列">队列</a></li><li><a href="#集合">集合</a></li><li><a href="#链表数组">链表、数组</a></li><li><a href="#字典关联数组">字典、关联数组</a></li><li><a href="#栈">栈</a></li><li><a href="#树">树</a><ul><li><a href="#二叉树">二叉树</a></li><li><a href="#完全二叉树">完全二叉树</a></li><li><a href="#平衡二叉树">平衡二叉树</a></li><li><a href="#二叉查找树bst">二叉查找树（BST）</a></li><li><a href="#红黑树">红黑树</a></li><li><a href="#b-bb树">B-，B+，B*树</a></li><li><a href="#lsm-树">LSM 树</a></li></ul></li><li><a href="#bitset">BitSet</a></li></ul></li><li><a href="#常用算法">常用算法</a><ul><li><a href="#排序查找算法">排序、查找算法</a><ul><li><a href="#选择排序">选择排序</a></li><li><a href="#冒泡排序">冒泡排序</a></li><li><a href="#插入排序">插入排序</a></li><li><a href="#快速排序">快速排序</a></li><li><a href="#归并排序">归并排序</a></li><li><a href="#希尔排序">希尔排序</a></li><li><a href="#堆排序">堆排序</a></li><li><a href="#计数排序">计数排序</a></li><li><a href="#桶排序">桶排序</a></li><li><a href="#基数排序">基数排序</a></li><li><a href="#二分查找">二分查找</a></li><li><a href="#java-中的排序工具">Java 中的排序工具</a></li></ul></li><li><a href="#布隆过滤器">布隆过滤器</a></li><li><a href="#字符串比较">字符串比较</a><ul><li><a href="#kmp-算法">KMP 算法</a></li></ul></li><li><a href="#深度优先广度优先">深度优先、广度优先</a></li><li><a href="#贪心算法">贪心算法</a></li><li><a href="#回溯算法">回溯算法</a></li><li><a href="#剪枝算法">剪枝算法</a></li><li><a href="#动态规划">动态规划</a></li><li><a href="#朴素贝叶斯">朴素贝叶斯</a></li><li><a href="#推荐算法">推荐算法</a></li><li><a href="#最小生成树算法">最小生成树算法</a></li><li><a href="#最短路径算法">最短路径算法</a></li></ul></li><li><a href="#并发">并发</a><ul><li><a href="#java-并发">Java 并发</a></li><li><a href="#多线程">多线程</a></li><li><a href="#线程安全">线程安全</a></li><li><a href="#一致性事务">一致性、事务</a><ul><li><a href="#事务-acid-特性">事务 ACID 特性</a></li><li><a href="#事务的隔离级别">事务的隔离级别</a></li><li><a href="#mvcc">MVCC</a></li></ul></li><li><a href="#锁">锁</a><ul><li><a href="#java中的锁和同步类">Java中的锁和同步类</a></li><li><a href="#公平锁--非公平锁">公平锁 &amp; 非公平锁</a></li><li><a href="#悲观锁">悲观锁</a></li><li><a href="#乐观锁--cas">乐观锁 &amp; CAS</a></li><li><a href="#aba-问题">ABA 问题</a></li><li><a href="#copyonwrite容器">CopyOnWrite容器</a></li><li><a href="#ringbuffer">RingBuffer</a></li><li><a href="#可重入锁--不可重入锁">可重入锁 &amp; 不可重入锁</a></li><li><a href="#互斥锁--共享锁">互斥锁 &amp; 共享锁</a></li><li><a href="#死锁">死锁</a></li></ul></li></ul></li><li><a href="#操作系统">操作系统</a><ul><li><a href="#计算机原理">计算机原理</a></li><li><a href="#cpu">CPU</a><ul><li><a href="#多级缓存">多级缓存</a></li></ul></li><li><a href="#进程">进程</a></li><li><a href="#线程">线程</a></li><li><a href="#协程">协程</a></li><li><a href="#linux">Linux</a></li></ul></li><li><a href="#设计模式">设计模式</a><ul><li><a href="#设计模式的六大原则">设计模式的六大原则</a></li><li><a href="#23种常见设计模式">23种常见设计模式</a></li><li><a href="#应用场景">应用场景</a></li><li><a href="#单例模式">单例模式</a></li><li><a href="#责任链模式">责任链模式</a></li><li><a href="#mvc">MVC</a></li><li><a href="#ioc">IOC</a></li><li><a href="#aop">AOP</a></li><li><a href="#uml">UML</a></li><li><a href="#微服务思想">微服务思想</a><ul><li><a href="#康威定律">康威定律</a></li></ul></li></ul></li><li><a href="#运维--统计--技术支持">运维 &amp; 统计 &amp; 技术支持</a><ul><li><a href="#常规监控">常规监控</a></li><li><a href="#apm">APM</a></li><li><a href="#统计分析">统计分析</a></li><li><a href="#持续集成cicd">持续集成(CI/CD)</a><ul><li><a href="#jenkins">Jenkins</a></li><li><a href="#环境分离">环境分离</a></li></ul></li><li><a href="#自动化运维">自动化运维</a><ul><li><a href="#ansible">Ansible</a></li><li><a href="#puppet">puppet</a></li><li><a href="#chef">chef</a></li></ul></li><li><a href="#测试">测试</a><ul><li><a href="#tdd-理论">TDD 理论</a></li><li><a href="#单元测试">单元测试</a></li><li><a href="#压力测试">压力测试</a></li><li><a href="#全链路压测">全链路压测</a></li><li><a href="#ab-灰度蓝绿测试">A/B 、灰度、蓝绿测试</a></li></ul></li><li><a href="#虚拟化">虚拟化</a><ul><li><a href="#kvm">KVM</a></li><li><a href="#xen">Xen</a></li><li><a href="#openvz">OpenVZ</a></li></ul></li><li><a href="#容器技术">容器技术</a><ul><li><a href="#docker">Docker</a></li></ul></li><li><a href="#云技术">云技术</a><ul><li><a href="#openstack">OpenStack</a></li></ul></li><li><a href="#devops">DevOps</a></li><li><a href="#文档管理">文档管理</a></li></ul></li><li><a href="#中间件">中间件</a><ul><li><a href="#web-server">Web Server</a><ul><li><a href="#nginx">Nginx</a></li><li><a href="#openresty">OpenResty</a>  </li><li><a href="#Tengine">Tengine</a>  </li><li><a href="#apache-httpd">Apache Httpd</a></li><li><a href="#tomcat">Tomcat</a><ul><li><a href="#架构原理">架构原理</a></li><li><a href="#调优方案">调优方案</a></li></ul></li><li><a href="#jetty">Jetty</a></li></ul></li><li><a href="#缓存">缓存</a><ul><li><a href="#本地缓存">本地缓存</a></li></ul></li><li><a href="#客户端缓存">客户端缓存</a></li><li><a href="#服务端缓存">服务端缓存</a><ul><li><a href="#web缓存">Web缓存</a></li><li><a href="#memcached">Memcached</a></li><li><a href="#redis">Redis</a><ul><li><a href="#架构">架构</a></li><li><a href="#回收策略">回收策略</a></li></ul></li><li><a href="#tair">Tair</a></li></ul></li><li><a href="#消息队列">消息队列</a><ul><li><a href="#消息总线">消息总线</a></li><li><a href="#消息的顺序">消息的顺序</a></li><li><a href="#rabbitmq">RabbitMQ</a></li><li><a href="#rocketmq">RocketMQ</a></li><li><a href="#activemq">ActiveMQ</a></li><li><a href="#kafka">Kafka</a></li><li><a href="#redis-消息推送">Redis 消息推送</a></li><li><a href="#zeromq">ZeroMQ</a></li></ul></li><li><a href="#定时调度">定时调度</a><ul><li><a href="#单机定时调度">单机定时调度</a></li><li><a href="#分布式定时调度">分布式定时调度</a></li></ul></li><li><a href="#rpc">RPC</a><ul><li><a href="#dubbo">Dubbo</a></li><li><a href="#thrift">Thrift</a></li><li><a href="#grpc">gRPC</a></li></ul></li><li><a href="#数据库中间件">数据库中间件</a><ul><li><a href="#sharding-jdbc">Sharding Jdbc</a></li></ul></li><li><a href="#日志系统">日志系统</a><ul><li><a href="#日志搜集">日志搜集</a></li></ul></li><li><a href="#配置中心">配置中心</a></li><li><a href="#api-网关">API 网关</a></li></ul></li><li><a href="#网络">网络</a><ul><li><a href="#协议">协议</a><ul><li><a href="#osi-七层协议">OSI 七层协议</a></li><li><a href="#tcpip">TCP/IP</a></li><li><a href="#http">HTTP</a></li><li><a href="#http20">HTTP2.0</a></li><li><a href="#https">HTTPS</a></li></ul></li><li><a href="#网络模型">网络模型</a><ul><li><a href="#epoll">Epoll</a></li><li><a href="#java-nio">Java NIO</a></li><li><a href="#kqueue">kqueue</a></li></ul></li><li><a href="#连接和短连接">连接和短连接</a></li><li><a href="#框架">框架</a></li><li><a href="#零拷贝zero-copy">零拷贝（Zero-copy）</a></li><li><a href="#序列化二进制协议">序列化(二进制协议)</a><ul><li><a href="#hessian">Hessian</a></li><li><a href="#protobuf">Protobuf</a></li></ul></li></ul></li><li><a href="#数据库">数据库</a><ul><li><a href="#基础理论">基础理论</a><ul><li><a href="#数据库设计的三大范式">数据库设计的三大范式</a></li></ul></li><li><a href="#mysql">MySQL</a><ul><li><a href="#原理">原理</a></li><li><a href="#innodb">InnoDB</a></li><li><a href="#优化">优化</a></li><li><a href="#索引">索引</a><ul><li><a href="#聚集索引-非聚集索引">聚集索引, 非聚集索引</a></li><li><a href="#复合索引">复合索引</a></li><li><a href="#自适应哈希索引ahi">自适应哈希索引(AHI)</a></li></ul></li><li><a href="#explain">explain</a></li></ul></li><li><a href="#nosql">NoSQL</a><ul><li><a href="#mongodb">MongoDB</a></li><li><a href="#hbase">Hbase</a></li></ul></li></ul></li><li><a href="#搜索引擎">搜索引擎</a><ul><li><a href="#搜索引擎原理">搜索引擎原理</a></li><li><a href="#lucene">Lucene</a></li><li><a href="#elasticsearch">Elasticsearch</a></li><li><a href="#solr">Solr</a></li><li><a href="#sphinx">sphinx</a></li></ul></li><li><a href="#性能">性能</a><ul><li><a href="#性能优化方法论">性能优化方法论</a></li><li><a href="#容量评估">容量评估</a></li><li><a href="#cdn-网络">CDN 网络</a></li><li><a href="#连接池">连接池</a></li><li><a href="#性能调优">性能调优</a></li></ul></li><li><a href="#大数据">大数据</a><ul><li><a href="#流式计算">流式计算</a><ul><li><a href="#storm">Storm</a></li><li><a href="#flink">Flink</a></li><li><a href="#kafka-stream">Kafka Stream</a></li><li><a href="#应用场景-1">应用场景</a></li></ul></li><li><a href="#hadoop">Hadoop</a><ul><li><a href="#hdfs">HDFS</a></li><li><a href="#mapreduce">MapReduce</a></li><li><a href="#yarn">Yarn</a></li></ul></li><li><a href="#spark">Spark</a></li></ul></li><li><a href="#安全">安全</a><ul><li><a href="#web-安全">web 安全</a><ul><li><a href="#xss">XSS</a></li><li><a href="#csrf">CSRF</a></li><li><a href="#sql-注入">SQL 注入</a></li><li><a href="#hash-dos">Hash Dos</a></li><li><a href="#脚本注入">脚本注入</a></li><li><a href="#漏洞扫描工具">漏洞扫描工具</a></li><li><a href="#验证码">验证码</a></li></ul></li><li><a href="#ddos-防范">DDoS 防范</a></li><li><a href="#用户隐私信息保护">用户隐私信息保护</a></li><li><a href="#序列化漏洞">序列化漏洞</a></li><li><a href="#加密解密">加密解密</a><ul><li><a href="#对称加密">对称加密</a></li><li><a href="#哈希算法">哈希算法</a></li><li><a href="#非对称加密">非对称加密</a></li></ul></li><li><a href="#服务器安全">服务器安全</a></li><li><a href="#数据安全">数据安全</a><ul><li><a href="#数据备份">数据备份</a></li></ul></li><li><a href="#网络隔离">网络隔离</a><ul><li><a href="#内外网分离">内外网分离</a></li><li><a href="#登录跳板机">登录跳板机</a></li></ul></li><li><a href="#授权认证">授权、认证</a><ul><li><a href="#rbac">RBAC</a></li><li><a href="#oauth20">OAuth2.0</a></li><li><a href="#双因素认证2fa">双因素认证（2FA）</a></li><li><a href="#单点登录sso">单点登录(SSO)</a></li></ul></li></ul></li><li><a href="#常用开源框架">常用开源框架</a><ul><li><a href="#开源协议">开源协议</a></li><li><a href="#日志框架">日志框架</a><ul><li><a href="#log4jlog4j2">Log4j、Log4j2</a></li><li><a href="#logback">Logback</a></li></ul></li><li><a href="#orm">ORM</a></li><li><a href="#网络框架">网络框架</a></li><li><a href="#web-框架">Web 框架</a><ul><li><a href="#spring-家族">Spring 家族</a></li></ul></li><li><a href="#工具框架">工具框架</a></li></ul></li><li><a href="#分布式设计">分布式设计</a><ul><li><a href="#扩展性设计">扩展性设计</a></li><li><a href="#稳定性--高可用">稳定性 &amp; 高可用</a><ul><li><a href="#硬件负载均衡">硬件负载均衡</a></li><li><a href="#软件负载均衡">软件负载均衡</a></li><li><a href="#限流">限流</a></li><li><a href="#应用层容灾">应用层容灾</a></li><li><a href="#跨机房容灾">跨机房容灾</a></li><li><a href="#容灾演练流程">容灾演练流程</a></li><li><a href="#平滑启动">平滑启动</a></li></ul></li><li><a href="#数据库扩展">数据库扩展</a><ul><li><a href="#读写分离模式">读写分离模式</a></li><li><a href="#分片模式">分片模式</a></li></ul></li><li><a href="#服务治理">服务治理</a><ul><li><a href="#服务注册与发现">服务注册与发现</a></li><li><a href="#服务路由控制">服务路由控制</a></li></ul></li><li><a href="#分布式一致">分布式一致</a><ul><li><a href="#cap-与-base-理论">CAP 与 BASE 理论</a></li><li><a href="#分布式锁">分布式锁</a></li><li><a href="#分布式一致性算法">分布式一致性算法</a><ul><li><a href="#paxos">PAXOS</a></li><li><a href="#zab">Zab</a></li><li><a href="#raft">Raft</a></li><li><a href="#gossip">Gossip</a></li><li><a href="#两阶段提交多阶段提交">两阶段提交、多阶段提交</a></li></ul></li><li><a href="#幂等">幂等</a></li><li><a href="#分布式一致方案">分布式一致方案</a></li><li><a href="#分布式-leader-节点选举">分布式 Leader 节点选举</a></li><li><a href="#tcctryconfirmcancel-柔性事务">TCC(Try/Confirm/Cancel) 柔性事务</a></li></ul></li><li><a href="#分布式文件系统">分布式文件系统</a></li><li><a href="#唯一id-生成">唯一ID 生成</a><ul><li><a href="#全局唯一id">全局唯一ID</a></li></ul></li><li><a href="#一致性hash算法">一致性Hash算法</a></li></ul></li><li><a href="#设计思想--开发模式">设计思想 &amp; 开发模式</a><ul><li><a href="#ddddomain-driven-design---领域驱动设计">DDD(Domain-driven Design - 领域驱动设计)</a><ul><li><a href="#命令查询职责分离cqrs">命令查询职责分离(CQRS)</a></li><li><a href="#贫血充血模型">贫血，充血模型</a></li></ul></li><li><a href="#actor-模式">Actor 模式</a></li><li><a href="#响应式编程">响应式编程</a><ul><li><a href="#reactor">Reactor</a></li><li><a href="#rxjava">RxJava</a></li><li><a href="#vertx">Vert.x</a></li></ul></li><li><a href="#dodaf20">DODAF2.0</a></li><li><a href="#serverless">Serverless</a></li><li><a href="#service-mesh">Service Mesh</a></li></ul></li><li><a href="#项目管理">项目管理</a><ul><li><a href="#架构评审">架构评审</a></li><li><a href="#重构">重构</a></li><li><a href="#代码规范">代码规范</a></li><li><a href="#代码-review">代码 Review</a></li><li><a href="#rup">RUP</a></li><li><a href="#看板管理">看板管理</a></li><li><a href="#scrum">SCRUM</a></li><li><a href="#敏捷开发">敏捷开发</a></li><li><a href="#极限编程xp">极限编程（XP）</a></li><li><a href="#结对编程">结对编程</a></li><li><a href="#pdca-循环质量管理">PDCA 循环质量管理</a></li><li><a href="#fmea管理模式">FMEA管理模式</a></li></ul></li><li><a href="#通用业务术语">通用业务术语</a></li><li><a href="#技术趋势">技术趋势</a></li><li><a href="#政策法规">政策、法规</a><ul><li><a href="#法律">法律</a><ul><li><a href="#严格遵守刑法253法条">严格遵守刑法253法条</a></li></ul></li></ul></li><li><a href="#架构师素质">架构师素质</a></li><li><a href="#团队管理">团队管理</a><ul><li><a href="#招聘">招聘</a></li></ul></li><li><a href="#资讯">资讯</a><ul><li><a href="#行业资讯">行业资讯</a></li><li><a href="#公众号列表">公众号列表</a></li><li><a href="#博客">博客</a><ul><li><a href="#团队博客">团队博客</a></li><li><a href="#个人博客">个人博客</a></li></ul></li><li><a href="#综合门户社区">综合门户、社区</a></li><li><a href="#问答讨论类社区">问答、讨论类社区</a></li><li><a href="#行业数据分析">行业数据分析</a></li><li><a href="#专项网站">专项网站</a></li><li><a href="#其他类">其他类</a></li><li><a href="#推荐参考书">推荐参考书</a><ul><li><a href="#在线电子书">在线电子书</a></li><li><a href="#纸质书">纸质书</a><ul><li><a href="#开发方面">开发方面</a></li><li><a href="#架构方面">架构方面</a></li><li><a href="#技术管理方面">技术管理方面</a></li><li><a href="#基础理论-1">基础理论</a></li><li><a href="#工具方面">工具方面</a></li><li><a href="#大数据方面">大数据方面</a></li></ul></li></ul></li></ul></li><li><a href="#技术资源">技术资源</a><ul><li><a href="#开源资源">开源资源</a></li><li><a href="#手册文档教程">手册、文档、教程</a></li><li><a href="#在线课堂">在线课堂</a></li><li><a href="#会议活动">会议、活动</a></li><li><a href="#常用app">常用APP</a></li><li><a href="#找工作">找工作</a></li><li><a href="#工具">工具</a></li><li><a href="#代码托管">代码托管</a></li><li><a href="#文件服务">文件服务</a></li><li><a href="#综合云服务商">综合云服务商</a><ul><li><a href="#vps">VPS</a></li></ul></li></ul></li></ul><p><strong>（Toc generated by <a href="https://github.com/xingshaocheng/simple-php-github-toc" target="_blank" rel="external">simple-php-github-toc</a> ）</strong></p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><ul><li><p><a href="https://www.cnblogs.com/lemon-flm/p/7877898.html" target="_blank" rel="external">《java队列——queue详细分析》</a></p><ul><li>非阻塞队列：ConcurrentLinkedQueue(无界线程安全)，采用CAS机制（compareAndSwapObject原子操作）。</li><li>阻塞队列：ArrayBlockingQueue(有界)、LinkedBlockingQueue（无界）、DelayQueue、PriorityBlockingQueue，采用锁机制；使用 ReentrantLock 锁。</li></ul></li><li><p><a href="https://www.cnblogs.com/mantu/p/5802393.html" target="_blank" rel="external">《LinkedList、ConcurrentLinkedQueue、LinkedBlockingQueue对比分析》</a></p></li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul><li><a href="https://blog.csdn.net/qq_33642117/article/details/52040345" target="_blank" rel="external">《Java Set集合的详解》</a></li></ul><h2 id="链表、数组"><a href="#链表、数组" class="headerlink" title="链表、数组"></a>链表、数组</h2><ul><li><a href="https://blog.csdn.net/wz249863091/article/details/52853360" target="_blank" rel="external">《Java集合详解—什么是List》</a></li></ul><h2 id="字典、关联数组"><a href="#字典、关联数组" class="headerlink" title="字典、关联数组"></a>字典、关联数组</h2><ul><li><a href="https://baike.xsoftlab.net/view/250.html" target="_blank" rel="external">《Java map 详解 - 用法、遍历、排序、常用API等》</a></li></ul><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ul><li><a href="https://blog.csdn.net/javazejian/article/details/53362993" target="_blank" rel="external">《java数据结构与算法之栈（Stack）设计与实现》</a></li><li><a href="http://www.runoob.com/java/java-stack-class.html" target="_blank" rel="external">《Java Stack 类》</a></li><li><a href="https://blog.csdn.net/f2006116/article/details/51375225" target="_blank" rel="external">《java stack的详细实现分析》</a><ul><li>Stack 是线程安全的。</li><li>内部使用数组保存数据，不够时翻倍。</li></ul></li></ul><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>每个节点最多有两个叶子节点。</p><ul><li><a href="https://blog.csdn.net/cai2016/article/details/52589952" target="_blank" rel="external">《二叉树》</a></li></ul><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><ul><li><a href="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin" target="_blank" rel="external">《完全二叉树》</a><ul><li>叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树。</li></ul></li></ul><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><ul><li><a href="http://www.cnblogs.com/polly333/p/4798944.html" target="_blank" rel="external">《浅谈数据结构-平衡二叉树》</a></li><li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-2-3-Search-Tree.html" target="_blank" rel="external">《浅谈算法和数据结构: 八 平衡查找树之2-3树》</a></li></ul><h3 id="二叉查找树（BST）"><a href="#二叉查找树（BST）" class="headerlink" title="二叉查找树（BST）"></a>二叉查找树（BST）</h3><p>二叉查找树（Binary Search Tree），也称有序二叉树（ordered binary tree）,排序二叉树（sorted binary tree）。</p><ul><li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-Binary-Search-Tree.html" target="_blank" rel="external">《浅谈算法和数据结构: 七 二叉查找树》</a></li></ul><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><ul><li><a href="https://blog.csdn.net/sun_tttt/article/details/65445754" target="_blank" rel="external">《最容易懂得红黑树》</a><ul><li>添加阶段后，左旋或者右旋从而再次达到平衡。 </li></ul></li><li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-Red-Black-Tree.html" target="_blank" rel="external">《浅谈算法和数据结构: 九 平衡查找树之红黑树》</a></li></ul><h3 id="B-，B-，B-树"><a href="#B-，B-，B-树" class="headerlink" title="B-，B+，B*树"></a>B-，B+，B*树</h3><p>MySQL是基于B+树聚集索引组织表</p><ul><li><a href="https://blog.csdn.net/aqzwss/article/details/53074186" target="_blank" rel="external">《B-树，B+树，B*树详解》</a></li><li><a href="https://blog.csdn.net/bigtree_3721/article/details/73632405" target="_blank" rel="external">《B-树，B+树与B*树的优缺点比较》</a><ul><li>B+ 树的叶子节点链表结构相比于 B- 树便于扫库，和范围检索。<h3 id="LSM-树"><a href="#LSM-树" class="headerlink" title="LSM 树"></a>LSM 树</h3></li></ul></li></ul><p>LSM（Log-Structured Merge-Trees）和 B+ 树相比，是牺牲了部分读的性能来换取写的性能(通过批量写入)，实现读写之间的。<br>Hbase、LevelDB、Tair（Long DB）、nessDB 采用 LSM 树的结构。LSM可以快速建立索引。</p><ul><li><p><a href="https://blog.csdn.net/dbanote/article/details/8897599" target="_blank" rel="external">《LSM树 VS B+树》</a></p><ul><li>B+ 树读性能好，但由于需要有序结构，当key比较分散时，磁盘寻道频繁，造成写性能。</li><li>LSM 是将一个大树拆分成N棵小树，先写到内存（无寻道问题，性能高），在内存中构建一颗有序小树（有序树），随着小树越来越大，内存的小树会flush到磁盘上。当读时，由于不知道数据在哪棵小树上，因此必须遍历（二分查找）所有的小树，但在每颗小树内部数据是有序的。</li></ul></li><li><p><a href="https://blog.csdn.net/u014774781/article/details/52105708" target="_blank" rel="external">《LSM树（Log-Structured Merge Tree）存储引擎》</a></p><ul><li>极端的说，基于LSM树实现的HBase的写性能比MySQL高了一个数量级，读性能低了一个数量级。</li><li>优化方式：Bloom filter 替代二分查找；compact 小数位大树，提高查询性能。</li><li>Hbase 中，内存中达到一定阈值后，整体flush到磁盘上、形成一个文件（B+数），HDFS不支持update操作，所以Hbase做整体flush而不是merge update。flush到磁盘上的小树，定期会合并成一个大树。</li></ul></li></ul><h2 id="BitSet"><a href="#BitSet" class="headerlink" title="BitSet"></a>BitSet</h2><p>经常用于大规模数据的排重检查。</p><ul><li><a href="http://www.runoob.com/java/java-bitset-class.html" target="_blank" rel="external">《Java Bitset类》</a></li><li><a href="https://blog.csdn.net/caiandyong/article/details/51581160" target="_blank" rel="external">《Java BitSet（位集）》</a></li></ul><h1 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h1><ul><li><a href="https://blog.csdn.net/gane_cheng/article/details/52652705" target="_blank" rel="external">《常见排序算法及对应的时间复杂度和空间复杂度》</a></li></ul><h2 id="排序、查找算法"><a href="#排序、查找算法" class="headerlink" title="排序、查找算法"></a>排序、查找算法</h2><ul><li><a href="https://blog.csdn.net/gane_cheng/article/details/52652705" target="_blank" rel="external">《常见排序算法及对应的时间复杂度和空间复杂度》</a></li></ul><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul><li><a href="https://www.cnblogs.com/shen-hua/p/5424059.html" target="_blank" rel="external">《Java中的经典算法之选择排序（SelectionSort）》</a><ul><li>每一趟从待排序的记录中选出最小的元素，顺序放在已排好序的序列最后，直到全部记录排序完毕。</li></ul></li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li><a href="https://blog.csdn.net/shuaizai88/article/details/73250615" target="_blank" rel="external">《冒泡排序的2种写法》</a><ul><li>相邻元素前后交换、把最大的排到最后。</li><li>时间复杂度 O(n²) </li></ul></li></ul><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><ul><li><a href="https://www.cnblogs.com/hapjin/p/5517667.html" target="_blank" rel="external">《排序算法总结之插入排序》</a></li></ul><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul><li><a href="http://developer.51cto.com/art/201403/430986.htm" target="_blank" rel="external">《坐在马桶上看算法：快速排序》</a><ul><li>一侧比另外一次都大或小。 <h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3></li></ul></li><li><a href="http://www.cnblogs.com/chengxiao/p/6194356.html" target="_blank" rel="external">《图解排序算法(四)之归并排序》</a><ul><li>分而治之，分成小份排序，在合并(重建一个新空间进行复制)。 </li></ul></li></ul><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>TODO</p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><ul><li><a href="https://www.cnblogs.com/chengxiao/p/6129630.html" target="_blank" rel="external">《图解排序算法(三)之堆排序》</a><ul><li>排序过程就是构建最大堆的过程，最大堆：每个结点的值都大于或等于其左右孩子结点的值，堆顶元素是最大值。</li></ul></li></ul><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><ul><li><a href="https://www.cnblogs.com/suvllian/p/5495780.html" target="_blank" rel="external">《计数排序和桶排序》</a><ul><li>和桶排序过程比较像，差别在于桶的数量。</li></ul></li></ul><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><ul><li><a href="http://blog.51cto.com/ahalei/1362789" target="_blank" rel="external">《【啊哈！算法】最快最简单的排序——桶排序》</a></li><li><a href="https://blog.csdn.net/sunjinshengli/article/details/70738527" target="_blank" rel="external">《排序算法（三）：计数排序与桶排序》</a><ul><li>桶排序将[0,1)区间划分为n个相同的大小的子区间，这些子区间被称为桶。</li><li>每个桶单独进行排序，然后再遍历每个桶。</li></ul></li></ul><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>按照个位、十位、百位、…依次来排。</p><ul><li><a href="https://blog.csdn.net/lemon_tree12138/article/details/51695211" target="_blank" rel="external">《排序算法系列：基数排序》</a></li><li><a href="https://www.cnblogs.com/skywang12345/p/3603669.html" target="_blank" rel="external">《基数排序》</a></li></ul><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><ul><li><p><a href="https://www.cnblogs.com/coderising/p/5708632.html" target="_blank" rel="external">《二分查找(java实现)》</a></p><ul><li>要求待查找的序列有序。</li><li>时间复杂度 O(logN)。</li></ul></li><li><p><a href="https://blog.csdn.net/maoyuanming0806/article/details/78176957" target="_blank" rel="external">《java实现二分查找-两种方式》</a></p><ul><li>while + 递归。<h3 id="Java-中的排序工具"><a href="#Java-中的排序工具" class="headerlink" title="Java 中的排序工具"></a>Java 中的排序工具</h3></li></ul></li><li><a href="https://blog.csdn.net/u011410529/article/details/56668545?locationnum=6&amp;fps=1" target="_blank" rel="external">《Arrays.sort和Collections.sort实现原理解析》</a><ul><li>Collections.sort算法调用的是合并排序。</li><li>Arrays.sort() 采用了2种排序算法 — 基本类型数据使用快速排序法，对象数组使用归并排序。</li></ul></li></ul><h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>常用于大数据的排重，比如email，url 等。<br>核心原理：将每条数据通过计算产生一个指纹（一个字节或多个字节，但一定比原始数据要少很多），其中每一位都是通过随机计算获得，在将指纹映射到一个大的按位存储的空间中。注意：会有一定的错误率。<br>优点：空间和时间效率都很高。<br>缺点：随着存入的元素数量增加，误算率随之增加。</p><ul><li><a href="https://segmentfault.com/a/1190000002729689" target="_blank" rel="external">《布隆过滤器 — 空间效率很高的数据结构》</a></li><li><a href="https://blog.csdn.net/zdxiq000/article/details/57626464" target="_blank" rel="external">《大量数据去重：Bitmap和布隆过滤器(Bloom Filter)》</a></li><li><a href="https://blog.csdn.net/qq_30242609/article/details/71024458" target="_blank" rel="external">《基于Redis的布隆过滤器的实现》</a><ul><li>基于 Redis 的 Bitmap 数据结构。</li></ul></li><li><a href="https://blog.csdn.net/lemon_tree12138/article/details/47973715" target="_blank" rel="external">《网络爬虫：URL去重策略之布隆过滤器(BloomFilter)的使用》</a><ul><li>使用Java中的 BitSet 类 和 加权和hash算法。</li></ul></li></ul><h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><h3 id="KMP-算法"><a href="#KMP-算法" class="headerlink" title="KMP 算法"></a>KMP 算法</h3><p>KMP：Knuth-Morris-Pratt算法（简称KMP）<br>核心原理是利用一个“部分匹配表”，跳过已经匹配过的元素。</p><ul><li><a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" target="_blank" rel="external">《字符串匹配的KMP算法》</a></li></ul><h2 id="深度优先、广度优先"><a href="#深度优先、广度优先" class="headerlink" title="深度优先、广度优先"></a>深度优先、广度优先</h2><ul><li><a href="https://www.cnblogs.com/0kk470/p/7555033.html" target="_blank" rel="external">《广度优先搜索BFS和深度优先搜索DFS》</a></li></ul><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><ul><li><a href="https://www.cnblogs.com/MrSaver/p/8641971.html" target="_blank" rel="external">《算法：贪婪算法基础》</a></li><li><a href="https://blog.csdn.net/a345017062/article/details/52443781" target="_blank" rel="external">《常见算法及问题场景——贪心算法》</a></li></ul><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><ul><li><a href="https://blog.csdn.net/qfikh/article/details/51960331" target="_blank" rel="external">《 五大常用算法之四：回溯法》</a></li></ul><h2 id="剪枝算法"><a href="#剪枝算法" class="headerlink" title="剪枝算法"></a>剪枝算法</h2><ul><li><a href="https://blog.csdn.net/luningcsdn/article/details/50930276" target="_blank" rel="external">《α-β剪枝算法》</a></li></ul><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><ul><li><a href="https://www.cnblogs.com/little-YTMM/p/5372680.html" target="_blank" rel="external">《详解动态规划——邹博讲动态规划》</a></li><li><a href="https://blog.csdn.net/yao_zi_jie/article/details/54580283" target="_blank" rel="external">《动态规划算法的个人理解》</a></li></ul><h2 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h2><ul><li><p><a href="https://blog.csdn.net/amds123/article/details/70173402" target="_blank" rel="external">《带你搞懂朴素贝叶斯分类算法》</a></p><ul><li>P(B|A)=P(A|B)P(B)/P(A)</li></ul></li><li><p><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_one.html" target="_blank" rel="external">《贝叶斯推断及其互联网应用1》</a></p></li><li><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_two.html" target="_blank" rel="external">《贝叶斯推断及其互联网应用2》</a></li></ul><h2 id="推荐算法"><a href="#推荐算法" class="headerlink" title="推荐算法"></a>推荐算法</h2><ul><li><a href="http://www.infoq.com/cn/articles/recommendation-algorithm-overview-part01" target="_blank" rel="external">《推荐算法综述》</a></li><li><a href="https://www.oschina.net/news/51297/top-10-open-source-recommendation-systems" target="_blank" rel="external">《TOP 10 开源的推荐系统简介》</a></li></ul><h2 id="最小生成树算法"><a href="#最小生成树算法" class="headerlink" title="最小生成树算法"></a>最小生成树算法</h2><ul><li><a href="https://blog.csdn.net/luoshixian099/article/details/51908175" target="_blank" rel="external">《算法导论—最小生成树（Kruskal和Prim算法）》</a></li></ul><h2 id="最短路径算法"><a href="#最短路径算法" class="headerlink" title="最短路径算法"></a>最短路径算法</h2><ul><li><a href="https://blog.csdn.net/qq_35644234/article/details/60870719" target="_blank" rel="external">《Dijkstra算法详解》</a></li></ul><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><h2 id="Java-并发"><a href="#Java-并发" class="headerlink" title="Java 并发"></a>Java 并发</h2><ul><li><a href="https://github.com/CL0610/Java-concurrency" target="_blank" rel="external">Java 并发知识合集</a></li><li><a href="https://github.com/CL0610/Java-concurrency/blob/master/Java并发知识图谱.png" target="_blank" rel="external">JAVA并发知识图谱</a></li></ul><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><ul><li><a href="http://www.importnew.com/18459.html" target="_blank" rel="external">《40个Java多线程问题总结》</a></li></ul><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><ul><li><a href="https://www.cnblogs.com/zhanht/p/5450325.html" target="_blank" rel="external">《Java并发编程——线程安全及解决机制简介》</a></li></ul><h2 id="一致性、事务"><a href="#一致性、事务" class="headerlink" title="一致性、事务"></a>一致性、事务</h2><h3 id="事务-ACID-特性"><a href="#事务-ACID-特性" class="headerlink" title="事务 ACID 特性"></a>事务 ACID 特性</h3><ul><li><a href="https://blog.csdn.net/u012440687/article/details/52116108" target="_blank" rel="external">《数据库事务ACID特性》</a></li></ul><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><ul><li>未提交读：一个事务可以读取另一个未提交的数据，容易出现脏读的情况。</li><li>读提交：一个事务等另外一个事务提交之后才可以读取数据，但会出现不可重复读的情况（多次读取的数据不一致），读取过程中出现UPDATE操作，会多。（大多数数据库默认级别是RC，比如SQL Server，Oracle），读取的时候不可以修改。</li><li>可重复读： 同一个事务里确保每次读取的时候，获得的是同样的数据，但不保障原始数据被其他事务更新（幻读），Mysql InnoDB 就是这个级别。</li><li><p>序列化：所有事物串行处理（牺牲了效率）</p></li><li><p><a href="https://blog.csdn.net/qq_33290787/article/details/51924963" target="_blank" rel="external">《理解事务的4种隔离级别》</a></p></li><li><p><a href="https://www.cnblogs.com/z-sm/p/7245981.html" target="_blank" rel="external">数据库事务的四大特性及事务隔离级别</a></p></li><li><p><a href="http://blog.sina.com.cn/s/blog_499740cb0100ugs7.html" target="_blank" rel="external">《MySQL的InnoDB的幻读问题 》</a></p><ul><li>幻读的例子非常清楚。</li><li>通过 SELECT … FOR UPDATE 解决。</li></ul></li><li><p><a href="http://database.51cto.com/art/201804/570101.htm" target="_blank" rel="external">《一篇文章带你读懂MySQL和InnoDB》</a></p><ul><li>图解脏读、不可重复读、幻读问题。</li></ul></li></ul><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><ul><li><p><a href="https://www.cnblogs.com/chenpingzhao/p/5065316.html" target="_blank" rel="external">《【mysql】关于innodb中MVCC的一些理解》</a></p><ul><li>innodb 中 MVCC 用在 Repeatable-Read 隔离级别。</li><li>MVCC 会产生幻读问题（更新时异常。）</li></ul></li><li><p><a href="https://blog.csdn.net/whoamiyang/article/details/51901888" target="_blank" rel="external">《轻松理解MYSQL MVCC 实现机制》</a></p><ul><li>通过隐藏版本列来实现 MVCC 控制，一列记录创建时间、一列记录删除时间，这里的时间</li><li>每次只操作比当前版本小（或等于）的 行。</li></ul></li></ul><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="Java中的锁和同步类"><a href="#Java中的锁和同步类" class="headerlink" title="Java中的锁和同步类"></a>Java中的锁和同步类</h3><ul><li><p><a href="https://www.cnblogs.com/qifengshi/p/6831055.html" target="_blank" rel="external">《Java中的锁分类》</a></p><ul><li>主要包括 synchronized、ReentrantLock、和 ReadWriteLock。 </li></ul></li><li><p><a href="https://www.cnblogs.com/waterystone/p/4920797.html" target="_blank" rel="external">《Java并发之AQS详解》</a></p></li><li><p><a href="http://cuisuqiang.iteye.com/blog/2020146" target="_blank" rel="external">《Java中信号量 Semaphore》</a></p><ul><li>有数量控制</li><li>申请用 acquire，申请不要则阻塞；释放用 release。</li></ul></li><li><p><a href="https://www.cnblogs.com/davidwang456/p/6094947.html" target="_blank" rel="external">《java开发中的Mutex vs Semaphore》</a></p><ul><li>简单的说 就是Mutex是排它的，只有一个可以获取到资源， Semaphore也具有排它性，但可以定义多个可以获取的资源的对象。     </li></ul></li></ul><h3 id="公平锁-amp-非公平锁"><a href="#公平锁-amp-非公平锁" class="headerlink" title="公平锁 &amp; 非公平锁"></a>公平锁 &amp; 非公平锁</h3><p>公平锁的作用就是严格按照线程启动的顺序来执行的，不允许其他线程插队执行的；而非公平锁是允许插队的。</p><ul><li><a href="https://blog.csdn.net/EthanWhite/article/details/55508357" target="_blank" rel="external">《公平锁与非公平锁》</a><ul><li>默认情况下 ReentrantLock 和 synchronized 都是非公平锁。ReentrantLock 可以设置成公平锁。</li></ul></li></ul><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>悲观锁如果使用不当（锁的条数过多），会引起服务大面积等待。推荐优先使用乐观锁+重试。</p><ul><li><p><a href="https://www.cnblogs.com/zhiqian-ali/p/6200874.html" target="_blank" rel="external">《【MySQL】悲观锁&amp;乐观锁》</a></p><ul><li>乐观锁的方式：版本号+重试方式</li><li>悲观锁：通过 select … for update 进行行锁(不可读、不可写，share 锁可读不可写)。</li></ul></li><li><p><a href="https://www.cnblogs.com/Lawson/p/5008741.html" target="_blank" rel="external">《Mysql查询语句使用select.. for update导致的数据库死锁分析》</a></p><ul><li>mysql的innodb存储引擎实务锁虽然是锁行，但它内部是锁索引的。</li><li>锁相同数据的不同索引条件可能会引起死锁。</li></ul></li><li><p><a href="https://www.cnblogs.com/zejin2008/p/5262751.html" target="_blank" rel="external">《Mysql并发时经典常见的死锁原因及解决方法》</a></p></li></ul><h3 id="乐观锁-amp-CAS"><a href="#乐观锁-amp-CAS" class="headerlink" title="乐观锁 &amp; CAS"></a>乐观锁 &amp; CAS</h3><ul><li><a href="http://www.importnew.com/20472.html" target="_blank" rel="external">《乐观锁的一种实现方式——CAS》</a><ul><li>和MySQL乐观锁方式相似，只不过是通过和原值进行比较。     </li></ul></li></ul><h3 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h3><p>由于高并发，在CAS下，更新后可能此A非彼A。通过版本号可以解决，类似于上文Mysql 中提到的的乐观锁。</p><ul><li><a href="https://www.cnblogs.com/549294286/p/3766717.html" target="_blank" rel="external">《Java CAS 和ABA问题》</a></li><li><a href="https://blog.csdn.net/li954644351/article/details/50511879" target="_blank" rel="external">《Java 中 ABA问题及避免》</a><ul><li>AtomicStampedReference 和 AtomicStampedReference。 </li></ul></li></ul><h3 id="CopyOnWrite容器"><a href="#CopyOnWrite容器" class="headerlink" title="CopyOnWrite容器"></a>CopyOnWrite容器</h3><p>可以对CopyOnWrite容器进行并发的读，而不需要加锁。CopyOnWrite并发容器用于读多写少的并发场景。比如白名单，黑名单，商品类目的访问和更新场景，不适合需要数据强一致性的场景。</p><ul><li><p><a href="https://www.cnblogs.com/hapjin/p/4840107.html" target="_blank" rel="external">《JAVA中写时复制(Copy-On-Write)Map实现》</a></p><ul><li>实现读写分离，读取发生在原始数据上，写入发生在副本上。  </li><li>不用加锁，通过最终一致实现一致性。</li></ul></li><li><p><a href="https://blog.csdn.net/a494303877/article/details/53404623" target="_blank" rel="external">《聊聊并发-Java中的Copy-On-Write容器》</a></p></li></ul><h3 id="RingBuffer"><a href="#RingBuffer" class="headerlink" title="RingBuffer"></a>RingBuffer</h3><ul><li><a href="http://www.cnblogs.com/l00l/p/4115001.html" target="_blank" rel="external">《线程安全的无锁RingBuffer的实现【一个读线程，一个写线程】》</a></li></ul><h3 id="可重入锁-amp-不可重入锁"><a href="#可重入锁-amp-不可重入锁" class="headerlink" title="可重入锁 &amp; 不可重入锁"></a>可重入锁 &amp; 不可重入锁</h3><ul><li><p><a href="https://www.cnblogs.com/dj3839/p/6580765.html" target="_blank" rel="external">《可重入锁和不可重入锁》</a></p><ul><li>通过简单代码举例说明可重入锁和不可重入锁。</li><li>可重入锁指同一个线程可以再次获得之前已经获得的锁。</li><li>可重入锁可以用户避免死锁。</li><li>Java中的可重入锁：synchronized 和 java.util.concurrent.locks.ReentrantLock</li></ul></li><li><p><a href="https://www.cnblogs.com/baizhanshi/p/7211802.html" target="_blank" rel="external">《ReenTrantLock可重入锁（和synchronized的区别）总结》</a></p><ul><li>synchronized 使用方便，编译器来加锁，是非公平锁。</li><li>ReenTrantLock 使用灵活，锁的公平性可以定制。</li><li>相同加锁场景下，推荐使用 synchronized。</li></ul></li></ul><h3 id="互斥锁-amp-共享锁"><a href="#互斥锁-amp-共享锁" class="headerlink" title="互斥锁 &amp; 共享锁"></a>互斥锁 &amp; 共享锁</h3><p>互斥锁：同时只能有一个线程获得锁。比如，ReentrantLock 是互斥锁，ReadWriteLock 中的写锁是互斥锁。<br>共享锁：可以有多个线程同时或的锁。比如，Semaphore、CountDownLatch 是共享锁，ReadWriteLock 中的读锁是共享锁。</p><ul><li><a href="https://www.cnblogs.com/liang1101/p/6475555.html" target="_blank" rel="external">《ReadWriteLock场景应用》</a></li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li><a href="https://blog.csdn.net/yunfenglw/article/details/45950305" target="_blank" rel="external">《“死锁”四个必要条件的合理解释》</a><ul><li>互斥、持有、不可剥夺、环形等待。</li></ul></li><li><p><a href="https://blog.csdn.net/u014039577/article/details/52351626" target="_blank" rel="external">Java如何查看死锁？</a></p><ul><li>JConsole 可以识别死锁。</li></ul></li><li><p><a href="https://blog.csdn.net/bohu83/article/details/51135061" target="_blank" rel="external">java多线程系列：死锁及检测</a></p><ul><li>jstack 可以显示死锁。</li></ul></li></ul><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="计算机原理"><a href="#计算机原理" class="headerlink" title="计算机原理"></a>计算机原理</h2><ul><li><a href="https://segmentfault.com/a/1190000003692840" target="_blank" rel="external">《操作系统基础知识——操作系统的原理，类型和结构》</a></li></ul><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><h3 id="多级缓存"><a href="#多级缓存" class="headerlink" title="多级缓存"></a>多级缓存</h3><p>典型的 CPU 有三级缓存，距离核心越近，速度越快，空间越小。L1 一般 32k，L2 一般 256k，L3 一般12M。内存速度需要200个 CPU 周期，CPU 缓存需要1个CPU周期。</p><ul><li><a href="https://blog.csdn.net/zero__007/article/details/54089730" target="_blank" rel="external">《从Java视角理解CPU缓存和伪共享》</a></li></ul><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>TODO</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><ul><li><a href="https://blog.csdn.net/asdf_1024/article/details/78978437" target="_blank" rel="external">《线程的生命周期及状态转换详解》</a></li></ul><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><ul><li><a href="https://www.thinksaas.cn/group/topic/839375/" target="_blank" rel="external">《终结python协程——从yield到actor模型的实现》</a><ul><li>线程的调度是由操作系统负责，协程调度是程序自行负责</li><li>与线程相比，协程减少了无谓的操作系统切换.</li><li>实际上当遇到IO操作时做切换才更有意义，（因为IO操作不用占用CPU），如果没遇到IO操作，按照时间片切换.</li></ul></li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul><li><a href="http://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="external">《Linux 命令大全》</a></li></ul><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><ul><li><a href="https://blog.csdn.net/q291611265/article/details/48465113" target="_blank" rel="external">《设计模式的六大原则》</a><ul><li>开闭原则：对扩展开放,对修改关闭，多使用抽象类和接口。</li><li>里氏替换原则：基类可以被子类替换，使用抽象类继承,不使用具体类继承。</li><li>依赖倒转原则：要依赖于抽象,不要依赖于具体，针对接口编程,不针对实现编程。</li><li>接口隔离原则：使用多个隔离的接口,比使用单个接口好，建立最小的接口。</li><li>迪米特法则：一个软件实体应当尽可能少地与其他实体发生相互作用，通过中间类建立联系。</li><li>合成复用原则：尽量使用合成/聚合,而不是使用继承。</li></ul></li></ul><h2 id="23种常见设计模式"><a href="#23种常见设计模式" class="headerlink" title="23种常见设计模式"></a>23种常见设计模式</h2><ul><li><a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="external">《设计模式》</a></li><li><a href="https://www.cnblogs.com/susanws/p/5510229.html" target="_blank" rel="external">《23种设计模式全解析》</a></li><li><a href="https://github.com/ToryZhou/design-pattern" target="_blank" rel="external">《设计模式类图与示例》</a></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li><p><a href="http://blog.jobbole.com/62314/" target="_blank" rel="external">《细数JDK里的设计模式》</a></p><ul><li><p>结构型模式：</p><ul><li>适配器：用来把一个接口转化成另一个接口，如 java.util.Arrays#asList()。</li><li>桥接模式：这个模式将抽象和抽象操作的实现进行了解耦，这样使得抽象和实现可以独立地变化，如JDBC；</li><li>组合模式：使得客户端看来单个对象和对象的组合是同等的。换句话说，某个类型的方法同时也接受自身类型作为参数，如 Map.putAll，List.addAll、Set.addAll。</li><li>装饰者模式：动态的给一个对象附加额外的功能，这也是子类的一种替代方式，如 java.util.Collections#checkedList|Map|Set|SortedSet|SortedMap。</li><li>享元模式：使用缓存来加速大量小对象的访问时间，如 valueOf(int)。</li><li>代理模式：代理模式是用一个简单的对象来代替一个复杂的或者创建耗时的对象，如 java.lang.reflect.Proxy</li></ul></li><li><p>创建模式:</p><ul><li>抽象工厂模式：抽象工厂模式提供了一个协议来生成一系列的相关或者独立的对象，而不用指定具体对象的类型，如 java.util.Calendar#getInstance()。</li><li>建造模式(Builder)：定义了一个新的类来构建另一个类的实例，以简化复杂对象的创建，如：java.lang.StringBuilder#append()。</li><li>工厂方法：就是 <strong>一个返*</strong> 回具体对象的方法，而不是多个，如 java.lang.Object#toString()、java.lang.Class#newInstance()。</li><li>原型模式：使得类的实例能够生成自身的拷贝、如：java.lang.Object#clone()。</li><li>单例模式：全局只有一个实例，如 java.lang.Runtime#getRuntime()。</li></ul></li><li>行为模式：<ul><li>责任链模式：通过把请求从一个对象传递到链条中下一个对象的方式，直到请求被处理完毕，以实现对象间的解耦。如 javax.servlet.Filter#doFilter()。</li><li>命令模式：将操作封装到对象内，以便存储，传递和返回，如：java.lang.Runnable。</li><li>解释器模式：定义了一个语言的语法，然后解析相应语法的语句，如，java.text.Format，java.text.Normalizer。</li><li>迭代器模式：提供一个一致的方法来顺序访问集合中的对象，如 java.util.Iterator。</li><li>中介者模式：通过使用一个中间对象来进行消息分发以及减少类之间的直接依赖，java.lang.reflect.Method#invoke()。</li><li>空对象模式：如 java.util.Collections#emptyList()。</li><li>观察者模式：它使得一个对象可以灵活的将消息发送给感兴趣的对象，如 java.util.EventListener。</li><li>模板方法模式：让子类可以重写方法的一部分，而不是整个重写，如 java.util.Collections#sort()。</li></ul></li></ul></li><li><p><a href="https://www.cnblogs.com/hwaggLee/p/4510687.html" target="_blank" rel="external">《Spring-涉及到的设计模式汇总》</a></p></li><li><a href="https://blog.csdn.net/u012387062/article/details/54719114" target="_blank" rel="external">《Mybatis使用的设计模式》</a></li></ul><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul><li><a href="https://blog.csdn.net/YECrazy/article/details/79481964" target="_blank" rel="external">《单例模式的三种实现 以及各自的优缺点》</a></li><li><a href="https://www.cnblogs.com/ttylinux/p/6498822.html" target="_blank" rel="external">《单例模式－－反射－－防止序列化破坏单例模式》</a><ul><li>使用枚举类型。</li></ul></li></ul><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>TODO</p><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><ul><li><a href="http://www.runoob.com/design-pattern/mvc-pattern.html" target="_blank" rel="external">《MVC 模式》</a><ul><li>模型(model)－视图(view)－控制器(controller) </li></ul></li></ul><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><ul><li><a href="https://www.zhihu.com/question/23277575" target="_blank" rel="external">《理解 IOC》</a></li><li><a href="https://www.cnblogs.com/NancyStartOnce/p/6813162.html" target="_blank" rel="external">《IOC 的理解与解释》</a><ul><li>正向控制：传统通过new的方式。反向控制，通过容器注入对象。</li><li>作用：用于模块解耦。</li><li>DI：Dependency Injection，即依赖注入，只关心资源使用，不关心资源来源。</li></ul></li></ul><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><ul><li><a href="https://blog.csdn.net/yanquan345/article/details/19760027" target="_blank" rel="external">《轻松理解AOP(面向切面编程)》</a></li><li><a href="https://www.cnblogs.com/hongwz/p/5764917.html" target="_blank" rel="external">《Spring AOP详解》</a></li><li><a href="http://www.importnew.com/24305.html" target="_blank" rel="external">《Spring AOP的实现原理》</a><ul><li>Spring AOP使用的动态代理，主要有两种方式：JDK动态代理和CGLIB动态代理。</li></ul></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/" target="_blank" rel="external">《Spring AOP 实现原理与 CGLIB 应用》</a><ul><li>Spring AOP 框架对 AOP 代理类的处理原则是：如果目标对象的实现类实现了接口，Spring AOP 将会采用 JDK 动态代理来生成 AOP 代理类；如果目标对象的实现类没有实现接口，Spring AOP 将会采用 CGLIB 来生成 AOP 代理类 </li></ul></li></ul><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><ul><li><a href="https://www.w3cschool.cn/uml_tutorial/" target="_blank" rel="external">《UML教程》</a></li></ul><h2 id="微服务思想"><a href="#微服务思想" class="headerlink" title="微服务思想"></a>微服务思想</h2><ul><li><a href="https://www.cnblogs.com/wintersun/p/6219259.html" target="_blank" rel="external">《微服务架构设计》</a></li><li><a href="http://www.infoq.com/cn/articles/micro-service-technology-stack" target="_blank" rel="external">《微服务架构技术栈选型手册》</a></li></ul><h3 id="康威定律"><a href="#康威定律" class="headerlink" title="康威定律"></a>康威定律</h3><ul><li><p><a href="https://yq.aliyun.com/articles/8611" target="_blank" rel="external">《微服务架构的理论基础 - 康威定律》</a></p><ul><li>定律一：组织沟通方式会通过系统设计表达出来，就是说架构的布局和组织结构会有相似。</li><li>定律二：时间再多一件事情也不可能做的完美，但总有时间做完一件事情。一口气吃不成胖子，先搞定能搞定的。</li><li>定律三：线型系统和线型组织架构间有潜在的异质同态特性。种瓜得瓜，做独立自治的子系统减少沟通成本。</li><li>定律四：大的系统组织总是比小系统更倾向于分解。合久必分，分而治之。</li></ul></li><li><p><a href="https://static.geekbang.org/PDF-%E4%BF%AE%E6%94%B9%E7%89%88-%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4-%E5%9B%BE%E7%89%87-%E6%9D%A8%E6%B3%A2-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.pdf" target="_blank" rel="external">《微服务架构核⼼20讲》</a></p></li></ul><h1 id="运维-amp-统计-amp-技术支持"><a href="#运维-amp-统计-amp-技术支持" class="headerlink" title="运维 &amp; 统计 &amp; 技术支持"></a>运维 &amp; 统计 &amp; 技术支持</h1><h2 id="常规监控"><a href="#常规监控" class="headerlink" title="常规监控"></a>常规监控</h2><ul><li><p><a href="https://blog.csdn.net/enweitech/article/details/77849205" target="_blank" rel="external">《腾讯业务系统监控的修炼之路》</a></p><ul><li>监控的方式：主动、被动、旁路(比如舆情监控)</li><li>监控类型： 基础监控、服务端监控、客户端监控、<br>监控、用户端监控</li><li>监控的目标：全、块、准</li><li>核心指标：请求量、成功率、耗时</li></ul></li><li><p><a href="https://www.oschina.net/news/67525/monitoring-tools" target="_blank" rel="external">《开源还是商用？十大云运维监控工具横评》</a></p><ul><li>Zabbix、Nagios、Ganglia、Zenoss、Open-falcon、监控宝、 360网站服务监控、阿里云监控、百度云观测、小蜜蜂网站监测等。</li></ul></li><li><p><a href="http://developer.51cto.com/art/201612/525373.htm" target="_blank" rel="external">《监控报警系统搭建及二次开发经验》</a></p></li></ul><p><strong>命令行监控工具</strong></p><ul><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/44-an-quan-yu-yun-wei/445-fu-wu-qi-zhuang-tai-jian-ce/4451-ming-ling-xing-gong-ju.html" target="_blank" rel="external">《常用命令行监控工具》</a></p><ul><li>top、sar、tsar、nload</li></ul></li><li><p><a href="http://blog.jobbole.com/96846/" target="_blank" rel="external">《20个命令行工具监控 Linux 系统性能》</a></p></li><li><p><a href="https://my.oschina.net/feichexia/blog/196575" target="_blank" rel="external">《JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解》</a></p></li></ul><h2 id="APM"><a href="#APM" class="headerlink" title="APM"></a>APM</h2><p>APM —  Application Performance Management</p><ul><li><p><a href="http://bigbully.github.io/Dapper-translation/" target="_blank" rel="external">《Dapper，大规模分布式系统的跟踪系统》</a></p></li><li><p><a href="http://opentracing.io" target="_blank" rel="external">CNCF OpenTracing</a>，<a href="https://github.com/opentracing-contrib/opentracing-specification-zh" target="_blank" rel="external">中文版</a></p></li><li><p>主要开源软件，按字母排序</p><ul><li><a href="https://github.com/apache/incubator-skywalking" target="_blank" rel="external">Apache SkyWalking</a></li><li><a href="https://github.com/dianping/cat" target="_blank" rel="external">CAT</a></li><li><a href="https://github.com/jaegertracing/jaeger" target="_blank" rel="external">CNCF jaeger</a></li><li><a href="https://github.com/naver/pinpoint" target="_blank" rel="external">Pinpoint</a></li><li><a href="https://github.com/openzipkin/zipkin" target="_blank" rel="external">Zipkin</a></li></ul></li><li><p><a href="http://www.infoq.com/cn/articles/apm-Pinpoint-practice" target="_blank" rel="external">《开源APM技术选型与实战》</a></p><ul><li>主要基于 Google的Dapper（大规模分布式系统的跟踪系统） 思想。</li></ul></li></ul><h2 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/25195217" target="_blank" rel="external">《流量统计的基础：埋点》</a></p><ul><li>常用指标：访问与访客、停留时长、跳出率、退出率、转化率、参与度</li></ul></li><li><p><a href="http://www.25xt.com/company/17066.html" target="_blank" rel="external">《APP埋点常用的统计工具、埋点目标和埋点内容》</a></p><ul><li>第三方统计：友盟、百度移动、魔方、App Annie、talking data、神策数据等。</li></ul></li><li><p><a href="https://tech.meituan.com/mt-mobile-analytics-practice.html" target="_blank" rel="external">《美团点评前端无痕埋点实践》</a></p><ul><li>所谓无痕、即通过可视化工具配置采集节点，在前端自动解析配置并上报埋点数据，而非硬编码。 </li></ul></li></ul><h2 id="持续集成-CI-CD"><a href="#持续集成-CI-CD" class="headerlink" title="持续集成(CI/CD)"></a>持续集成(CI/CD)</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="external">《持续集成是什么？》</a></li><li><a href="https://www.testwo.com/article/1170" target="_blank" rel="external">《8个流行的持续集成工具》</a></li></ul><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><ul><li><a href="https://www.liaoxuefeng.com/article/001463233913442cdb2d1bd1b1b42e3b0b29eb1ba736c5e000" target="_blank" rel="external">《使用Jenkins进行持续集成》</a></li></ul><h3 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h3><p>开发、测试、生成环境分离。</p><ul><li><a href="https://my.oschina.net/sancuo/blog/214904" target="_blank" rel="external">《开发环境、生产环境、测试环境的基本理解和区》</a></li></ul><h2 id="自动化运维"><a href="#自动化运维" class="headerlink" title="自动化运维"></a>自动化运维</h2><h3 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h3><ul><li><a href="http://www.ansible.com.cn/" target="_blank" rel="external">《Ansible中文权威指南》</a></li><li><a href="https://www.cnblogs.com/heiye123/articles/7855890.html" target="_blank" rel="external">《Ansible基础配置和企业级项目实用案例》</a></li></ul><h3 id="puppet"><a href="#puppet" class="headerlink" title="puppet"></a>puppet</h3><ul><li><a href="https://www.cnblogs.com/keerya/p/8040071.html" target="_blank" rel="external">《自动化运维工具——puppet详解》</a></li></ul><h3 id="chef"><a href="#chef" class="headerlink" title="chef"></a>chef</h3><ul><li><a href="https://www.ibm.com/developerworks/cn/cloud/library/1407_caomd_chef/" target="_blank" rel="external">《Chef 的安装与使用》</a></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="TDD-理论"><a href="#TDD-理论" class="headerlink" title="TDD 理论"></a>TDD 理论</h3><ul><li><a href="https://www.jianshu.com/p/62f16cd4fef3" target="_blank" rel="external">《深度解读 - TDD（测试驱动开发）》</a><ul><li>基于测试用例编码功能代码，XP（Extreme Programming）的核心实践.</li><li>好处：一次关注一个点，降低思维负担；迎接需求变化或改善代码的设计；提前澄清需求；快速反馈； </li></ul></li></ul><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ul><li><a href="https://www.cnblogs.com/happyzm/p/6482886.html" target="_blank" rel="external">《Java单元测试之JUnit篇》</a></li><li><a href="https://blog.csdn.net/hotdust/article/details/53406086" target="_blank" rel="external">《JUnit 4 与 TestNG 对比》</a><ul><li>TestNG 覆盖 JUnit 功能，适用于更复杂的场景。 </li></ul></li><li><a href="https://blog.csdn.net/wqetfg/article/details/50900512" target="_blank" rel="external">《单元测试主要的测试功能点》</a><ul><li>模块接口测试、局部数据结构测试、路径测试 、错误处理测试、边界条件测试 。 </li></ul></li></ul><h3 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h3><ul><li><a href="https://blog.csdn.net/blueheart20/article/details/52170790" target="_blank" rel="external">《Apache ab 测试使用指南》</a></li><li><a href="https://www.cnblogs.com/binyue/p/6141088.html" target="_blank" rel="external">《大型网站压力测试及优化方案》</a></li><li><a href="http://news.chinabyte.com/466/14126966.shtml" target="_blank" rel="external">《10大主流压力/负载/性能测试工具推荐》</a></li><li><a href="http://quentinxxz.iteye.com/blog/2249799" target="_blank" rel="external">《真实流量压测工具 tcpcopy应用浅析》</a></li><li><a href="https://www.cnblogs.com/jwentest/p/7136727.html" target="_blank" rel="external">《nGrinder 简易使用教程》</a></li></ul><h3 id="全链路压测"><a href="#全链路压测" class="headerlink" title="全链路压测"></a>全链路压测</h3><ul><li><a href="http://www.infoq.com/cn/articles/jd-618-upgrade-full-link-voltage-test-program-forcebot" target="_blank" rel="external">《京东618：升级全链路压测方案，打造军演机器人ForceBot》</a></li><li><a href="https://zhuanlan.zhihu.com/p/30306892" target="_blank" rel="external">《饿了么全链路压测的探索与实践》</a></li><li><a href="https://zhuanlan.zhihu.com/p/28355759" target="_blank" rel="external">《四大语言，八大框架｜滴滴全链路压测解决之道》</a></li><li><a href="https://www.jianshu.com/p/27060fd61f72" target="_blank" rel="external">《全链路压测经验》</a></li></ul><h3 id="A-B-、灰度、蓝绿测试"><a href="#A-B-、灰度、蓝绿测试" class="headerlink" title="A/B 、灰度、蓝绿测试"></a>A/B 、灰度、蓝绿测试</h3><ul><li><a href="https://testerhome.com/topics/11165" target="_blank" rel="external">《技术干货 | AB 测试和灰度发布探索及实践》</a></li><li><p><a href="http://blog.51cto.com/purplegrape/1403123" target="_blank" rel="external">《nginx 根据IP 进行灰度发布》</a></p></li><li><p><a href="https://www.v2ex.com/t/344341" target="_blank" rel="external">《蓝绿部署、A/B 测试以及灰度发布》</a></p></li></ul><h2 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h2><ul><li><a href="https://blog.csdn.net/enweitech/article/details/52910082" target="_blank" rel="external">《VPS的三种虚拟技术OpenVZ、Xen、KVM优缺点比较》</a></li></ul><h3 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h3><ul><li><a href="http://blog.chinaunix.net/uid-20201831-id-5775661.html" target="_blank" rel="external">《KVM详解，太详细太深入了，经典》</a></li><li><a href="https://www.coderxing.com/kvm-install.html" target="_blank" rel="external">《【图文】KVM 虚拟机安装详解》</a></li></ul><h3 id="Xen"><a href="#Xen" class="headerlink" title="Xen"></a>Xen</h3><ul><li><a href="https://www.cnblogs.com/sddai/p/5931201.html" target="_blank" rel="external">《Xen虚拟化基本原理详解》</a></li></ul><h3 id="OpenVZ"><a href="#OpenVZ" class="headerlink" title="OpenVZ"></a>OpenVZ</h3><ul><li><a href="https://blog.csdn.net/longerzone/article/details/44829255" target="_blank" rel="external">《开源Linux容器 OpenVZ 快速上手指南》</a></li></ul><h2 id="容器技术"><a href="#容器技术" class="headerlink" title="容器技术"></a>容器技术</h2><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul><li><a href="https://www.cnblogs.com/SzeCheng/p/6822905.html" target="_blank" rel="external">《几张图帮你理解 docker 基本原理及快速入门》</a></li><li><a href="https://draveness.me/docker" target="_blank" rel="external">《Docker 核心技术与实现原理》</a></li><li><a href="http://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="external">《Docker 教程》</a></li></ul><h2 id="云技术"><a href="#云技术" class="headerlink" title="云技术"></a>云技术</h2><h3 id="OpenStack"><a href="#OpenStack" class="headerlink" title="OpenStack"></a>OpenStack</h3><ul><li><a href="https://www.cnblogs.com/klb561/p/8660264.html" target="_blank" rel="external">《OpenStack构架知识梳理》</a></li></ul><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><ul><li><a href="https://www.cnblogs.com/jetzhang/p/6068773.html" target="_blank" rel="external">《一分钟告诉你究竟DevOps是什么鬼？》</a></li><li><a href="http://www.infoq.com/cn/articles/detail-analysis-of-devops" target="_blank" rel="external">《DevOps详解》</a></li></ul><h2 id="文档管理"><a href="#文档管理" class="headerlink" title="文档管理"></a>文档管理</h2><ul><li><a href="http://www.confluence.cn/" target="_blank" rel="external">Confluence-收费文档管理系统</a></li><li>GitLab?</li><li>Wiki</li></ul><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><h2 id="Web-Server"><a href="#Web-Server" class="headerlink" title="Web Server"></a>Web Server</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul><li><p><a href="https://blog.csdn.net/qq_25797077/article/details/52200722" target="_blank" rel="external">《Ngnix的基本学习-多进程和Apache的比较》</a></p><ul><li>Nginx 通过异步非阻塞的事件处理机制实现高并发。Apache 每个请求独占一个线程，非常消耗系统资源。</li><li>事件驱动适合于IO密集型服务(Nginx)，多进程或线程适合于CPU密集型服务(Apache)，所以Nginx适合做反向代理，而非web服务器使用。  </li></ul></li><li><p><a href="https://www.cnblogs.com/cunkouzh/p/5410154.html" target="_blank" rel="external">《nginx与Apache的对比以及优缺点》</a></p><ul><li>nginx只适合静态和反向代理，不适合处理动态请求。</li></ul></li></ul><h3 id="OpenResty"><a href="#OpenResty" class="headerlink" title="OpenResty"></a>OpenResty</h3><ul><li><a href="http://openresty.org/cn/" target="_blank" rel="external">官方网站</a></li><li><a href="http://www.linkedkeeper.com/detail/blog.action?bid=1034" target="_blank" rel="external">《浅谈 OpenResty》</a><ul><li>通过 Lua 模块可以在Nginx上进行开发。   </li></ul></li><li><a href="https://openresty.org/download/agentzh-nginx-tutorials-zhcn.html" target="_blank" rel="external">agentzh 的 Nginx 教程</a>  </li></ul><h3 id="Tengine"><a href="#Tengine" class="headerlink" title="Tengine"></a>Tengine</h3><ul><li><a href="http://tengine.taobao.org/" target="_blank" rel="external">官方网站</a>  </li></ul><h3 id="Apache-Httpd"><a href="#Apache-Httpd" class="headerlink" title="Apache Httpd"></a>Apache Httpd</h3><ul><li><a href="http://httpd.apache.org/" target="_blank" rel="external">官方网站</a></li></ul><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><h4 id="架构原理"><a href="#架构原理" class="headerlink" title="架构原理"></a>架构原理</h4><ul><li><a href="https://www.cnblogs.com/hggen/p/6264475.html" target="_blank" rel="external">《TOMCAT原理详解及请求过程》</a></li><li><a href="https://www.cnblogs.com/crazylqy/p/4706223.html" target="_blank" rel="external">《Tomcat服务器原理详解》</a></li><li><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/" target="_blank" rel="external">《Tomcat 系统架构与设计模式,第 1 部分: 工作原理》</a></p></li><li><p><a href="https://blog.csdn.net/xlgen157387/article/details/79006434" target="_blank" rel="external">《四张图带你了解Tomcat系统架构》</a></p></li><li><p><a href="https://www.futurehosting.com/blog/jboss-vs-tomcat-choosing-a-java-application-server/" target="_blank" rel="external">《JBoss vs. Tomcat: Choosing A Java Application Server》</a></p><ul><li>Tomcat 是轻量级的 Serverlet 容器，没有实现全部 JEE 特性（比如持久化和事务处理），但可以通过其他组件代替，比如Spring。</li><li>Jboss 实现全部了JEE特性，软件开源免费、文档收费。</li></ul></li></ul><h4 id="调优方案"><a href="#调优方案" class="headerlink" title="调优方案"></a>调优方案</h4><ul><li><p><a href="https://www.cnblogs.com/sunfenqing/p/7339058.html" target="_blank" rel="external">《Tomcat 调优方案》</a></p><ul><li>启动NIO模式（或者APR）；调整线程池；禁用AJP连接器（Nginx+tomcat的架构，不需要AJP）； </li></ul></li><li><p><a href="http://blog.chinaunix.net/uid-20662363-id-3012760.html" target="_blank" rel="external">《tomcat http协议与ajp协议》</a></p></li><li><a href="http://dmouse.iteye.com/blog/1354527" target="_blank" rel="external">《AJP与HTTP比较和分析》</a><ul><li>AJP 协议（8009端口）用于降低和前端Server（如Apache，而且需要支持AJP协议）的连接数(前端)，通过长连接提高性能。</li><li>并发高时，AJP协议优于HTTP协议。</li></ul></li></ul><h3 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h3><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jetty/" target="_blank" rel="external">《Jetty 的工作原理以及与 Tomcat 的比较》</a></li><li><a href="https://blog.csdn.net/doutao6677/article/details/51957288" target="_blank" rel="external">《jetty和tomcat优势比较》</a><ul><li>架构比较:Jetty的架构比Tomcat的更为简单。</li><li>性能比较：Jetty和Tomcat性能方面差异不大，Jetty默认采用NIO结束在处理I/O请求上更占优势，Tomcat默认采用BIO处理I/O请求，Tomcat适合处理少数非常繁忙的链接，处理静态资源时性能较差。</li><li>其他方面：Jetty的应用更加快速，修改简单，对新的Servlet规范的支持较好;Tomcat 对JEE和Servlet 支持更加全面。 </li></ul></li></ul><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ul><li><a href="https://blog.csdn.net/clementad/article/details/48229243" target="_blank" rel="external">《缓存失效策略（FIFO 、LRU、LFU三种算法的区别）》</a></li></ul><h3 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h3><ul><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4211.html" target="_blank" rel="external">《HashMap本地缓存》</a></p></li><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4212-ehcache.html" target="_blank" rel="external">《EhCache本地缓存》</a></p><ul><li>堆内、堆外、磁盘三级缓存。</li><li>可按照缓存空间容量进行设置。</li><li>按照时间、次数等过期策略。</li></ul></li><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4213-guava-cache.html" target="_blank" rel="external">《Guava Cache》</a></p><ul><li>简单轻量、无堆外、磁盘缓存。</li></ul></li></ul><ul><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/422-fu-wu-duan-ben-di-huan-cun/nginx-ben-di-huan-cun.html" target="_blank" rel="external">《Nginx本地缓存》</a></p></li><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/422-fu-wu-duan-ben-di-huan-cun/4222-pagespeed.html" target="_blank" rel="external">《Pagespeed—懒人工具，服务器端加速》</a></p></li></ul><h2 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h2><ul><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/423-ke-hu-duan-huan-cun.html" target="_blank" rel="external">《浏览器端缓存》</a></p><ul><li>主要是利用 Cache-Control 参数。</li></ul></li><li><p><a href="https://mp.weixin.qq.com/s/qHm_dJBhVbv0pJs8Crp77w" target="_blank" rel="external">《H5 和移动端 WebView 缓存机制解析与实战》</a></p></li></ul><h2 id="服务端缓存"><a href="#服务端缓存" class="headerlink" title="服务端缓存"></a>服务端缓存</h2><h3 id="Web缓存"><a href="#Web缓存" class="headerlink" title="Web缓存"></a>Web缓存</h3><ul><li><a href="https://github.com/jiangwenyuan/nuster" target="_blank" rel="external">nuster</a> - nuster cache</li><li><a href="https://github.com/varnishcache/varnish-cache" target="_blank" rel="external">varnish</a> - varnish cache</li><li><a href="https://github.com/squid-cache/squid" target="_blank" rel="external">squid</a> - squid cache</li></ul><h3 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h3><ul><li><a href="http://www.runoob.com/Memcached/Memcached-tutorial.html" target="_blank" rel="external">《Memcached 教程》</a></li><li><a href="https://blog.csdn.net/chenleixing/article/details/47035453" target="_blank" rel="external">《深入理解Memcached原理》</a><ul><li>采用多路复用技术提高并发性。</li><li>slab分配算法： memcached给Slab分配内存空间，默认是1MB。分配给Slab之后 把slab的切分成大小相同的chunk，Chunk是用于缓存记录的内存空间，Chunk 的大小默认按照1.25倍的速度递增。好处是不会频繁申请内存，提高IO效率，坏处是会有一定的内存浪费。</li></ul></li><li><a href="https://www.jianshu.com/p/36e5cd400580" target="_blank" rel="external">《Memcached软件工作原理》</a></li><li><p><a href="http://zhihuzeye.com/archives/2361" target="_blank" rel="external">《Memcache技术分享：介绍、使用、存储、算法、优化、命中率》</a></p></li><li><p><a href="https://blog.csdn.net/liu251890347/article/details/37690045" target="_blank" rel="external">《memcache 中 add 、 set 、replace 的区别》</a></p><ul><li>区别在于当key存在还是不存在时，返回值是true和false的。</li></ul></li><li><p><a href="https://pan.baidu.com/s/1qX00Lti?errno=0&amp;errmsg=Auth%20Login%20Sucess&amp;&amp;bduss=&amp;ssnerror=0&amp;traceid=" target="_blank" rel="external"><strong>《memcached全面剖析》</strong></a></p></li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li><a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="external">《Redis 教程》</a></li><li><a href="https://blog.csdn.net/wcf373722432/article/details/78678504" target="_blank" rel="external">《redis底层原理》</a><ul><li>使用 ziplist 存储链表，ziplist是一种压缩链表，它的好处是更能节省内存空间，因为它所存储的内容都是在连续的内存区域当中的。</li><li>使用 skiplist(跳跃表)来存储有序集合对象、查找上先从高Level查起、时间复杂度和红黑树相当，实现容易，无锁、并发性好。</li></ul></li><li><p><a href="http://doc.redisfans.com/topic/persistence.html" target="_blank" rel="external">《Redis持久化方式》</a></p><ul><li>RDB方式：定期备份快照，常用于灾难恢复。优点：通过fork出的进程进行备份，不影响主进程、RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。缺点：会丢数据。</li><li>AOF方式：保存操作日志方式。优点：恢复时数据丢失少，缺点：文件大，回复慢。</li><li>也可以两者结合使用。</li></ul></li><li><p><a href="https://blog.csdn.net/chunlongyu/article/details/53346436" target="_blank" rel="external">《分布式缓存—序列3—原子操作与CAS乐观锁》</a></p></li></ul><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><ul><li><a href="https://blog.csdn.net/sunhuiliang85/article/details/73656830" target="_blank" rel="external">《Redis单线程架构》</a></li></ul><h4 id="回收策略"><a href="#回收策略" class="headerlink" title="回收策略"></a>回收策略</h4><ul><li><a href="https://blog.csdn.net/qq_29108585/article/details/63251491" target="_blank" rel="external">《redis的回收策略》</a></li></ul><h3 id="Tair"><a href="#Tair" class="headerlink" title="Tair"></a>Tair</h3><ul><li><a href="https://github.com/alibaba/tair" target="_blank" rel="external">官方网站</a></li><li><a href="http://blog.csdn.net/farphone/article/details/53522383" target="_blank" rel="external">《Tair和Redis的对比》</a></li><li>特点：可以配置备份节点数目，通过异步同步到备份节点</li><li>一致性Hash算法。</li><li>架构：和Hadoop 的设计思想类似，有Configserver，DataServer，Configserver 通过心跳来检测，Configserver也有主备关系。</li></ul><p>几种存储引擎:</p><ul><li>MDB，完全内存性，可以用来存储Session等数据。</li><li>Rdb（类似于Redis），轻量化，去除了aof之类的操作，支持Restfull操作</li><li>LDB（LevelDB存储引擎），持久化存储，LDB 作为rdb的持久化，google实现，比较高效，理论基础是LSM(Log-Structured-Merge Tree)算法，现在内存中修改数据，达到一定量时（和内存汇总的旧数据一同写入磁盘）再写入磁盘，存储更加高效，县比喻Hash算法。</li><li>Tair采用共享内存来存储数据，如果服务挂掉（非服务器），重启服务之后，数据亦然还在。</li></ul><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><ul><li><p><a href="https://www.cnblogs.com/charlesblc/p/6045238.html" target="_blank" rel="external">《消息队列-推/拉模式学习 &amp; ActiveMQ及JMS学习》</a></p><ul><li>RabbitMQ 消费者默认是推模式（也支持拉模式）。</li><li>Kafka 默认是拉模式。</li><li>Push方式：优点是可以尽可能快地将消息发送给消费者，缺点是如果消费者处理能力跟不上，消费者的缓冲区可能会溢出。</li><li>Pull方式：优点是消费端可以按处理能力进行拉去，缺点是会增加消息延迟。</li></ul></li><li><p><a href="https://blog.csdn.net/yunfeng482/article/details/72856762" target="_blank" rel="external">《Kafka、RabbitMQ、RocketMQ等消息中间件的对比 —— 消息发送性能和区别》</a></p></li></ul><h3 id="消息总线"><a href="#消息总线" class="headerlink" title="消息总线"></a>消息总线</h3><p>消息总线相当于在消息队列之上做了一层封装，统一入口，统一管控、简化接入成本。</p><ul><li><a href="https://blog.csdn.net/yanghua_kobe/article/details/43877281" target="_blank" rel="external">《消息总线VS消息队列》</a></li></ul><h3 id="消息的顺序"><a href="#消息的顺序" class="headerlink" title="消息的顺序"></a>消息的顺序</h3><ul><li><a href="https://www.cnblogs.com/cjsblog/p/8267892.html" target="_blank" rel="external">《如何保证消费者接收消息的顺序》</a></li></ul><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>支持事务，推拉模式都是支持、适合需要可靠性消息传输的场景。</p><ul><li><a href="https://blog.csdn.net/whoamiyang/article/details/54954780" target="_blank" rel="external">《RabbitMQ的应用场景以及基本原理介绍》</a></li><li><a href="https://www.jianshu.com/p/79ca08116d57" target="_blank" rel="external">《消息队列之 RabbitMQ》</a> </li><li><a href="https://blog.csdn.net/u013256816/article/details/55515234" target="_blank" rel="external">《RabbitMQ之消息确认机制（事务+Confirm）》</a></li></ul><h3 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><p>Java实现，推拉模式都是支持，吞吐量逊于Kafka。可以保证消息顺序。</p><ul><li><a href="https://www.jianshu.com/p/824066d70da8" target="_blank" rel="external">《RocketMQ 实战之快速入门》</a></li><li><a href="http://www.iocoder.cn/categories/RocketMQ/?vip&amp;architect-awesome" target="_blank" rel="external">《RocketMQ 源码解析》</a></li></ul><h3 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h3><p>纯Java实现，兼容JMS，可以内嵌于Java应用中。</p><ul><li><a href="https://www.cnblogs.com/wintersun/p/3962302.html" target="_blank" rel="external">《ActiveMQ消息队列介绍》</a></li></ul><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><p>高吞吐量、采用拉模式。适合高IO场景，比如日志同步。</p><ul><li><a href="http://kafka.apache.org/" target="_blank" rel="external">官方网站</a></li><li><a href="https://blog.csdn.net/allthesametome/article/details/47362451" target="_blank" rel="external">《各消息队列对比，Kafka深度解析，众人推荐，精彩好文！》</a></li><li><a href="http://lxw1234.com/archives/2015/10/538.htm" target="_blank" rel="external">《Kafka分区机制介绍与示例》</a></li></ul><h3 id="Redis-消息推送"><a href="#Redis-消息推送" class="headerlink" title="Redis 消息推送"></a>Redis 消息推送</h3><p>生产者、消费者模式完全是客户端行为，list 和 拉模式实现，阻塞等待采用 blpop 指令。</p><ul><li><a href="https://blog.csdn.net/qq_34212276/article/details/78455004" target="_blank" rel="external">《Redis学习笔记之十：Redis用作消息队列》</a></li></ul><h3 id="ZeroMQ"><a href="#ZeroMQ" class="headerlink" title="ZeroMQ"></a>ZeroMQ</h3><p> TODO</p><h2 id="定时调度"><a href="#定时调度" class="headerlink" title="定时调度"></a>定时调度</h2><h3 id="单机定时调度"><a href="#单机定时调度" class="headerlink" title="单机定时调度"></a>单机定时调度</h3><ul><li><p><a href="https://www.cnblogs.com/shuaiqing/p/7742382.html" target="_blank" rel="external">《linux定时任务cron配置》</a></p></li><li><p><a href="https://my.oschina.net/daquan/blog/483305" target="_blank" rel="external">《Linux cron运行原理》</a></p><ul><li>fork 进程 + sleep 轮询</li></ul></li><li><p><a href="https://www.cnblogs.com/drift-ice/p/3817269.html" target="_blank" rel="external">《Quartz使用总结》</a></p></li><li><a href="https://blog.csdn.net/wenniuwuren/article/details/42082981/" target="_blank" rel="external">《Quartz源码解析 —— 触发器按时启动原理》</a></li><li><a href="https://www.jianshu.com/p/bab8e4e32952" target="_blank" rel="external">《quartz原理揭秘和源码解读》</a><ul><li>定时调度在 QuartzSchedulerThread 代码中，while()无限循环，每次循环取出时间将到的trigger，触发对应的job，直到调度器线程被关闭。</li></ul></li></ul><h3 id="分布式定时调度"><a href="#分布式定时调度" class="headerlink" title="分布式定时调度"></a>分布式定时调度</h3><ul><li><p><a href="https://blog.csdn.net/qq_16216221/article/details/70314337" target="_blank" rel="external">《这些优秀的国产分布式任务调度系统，你用过几个？》</a></p><ul><li>opencron、LTS、XXL-JOB、Elastic-Job、Uncode-Schedule、Antares</li></ul></li><li><p><a href="https://www.cnblogs.com/zhenyuyaodidiao/p/4755649.html" target="_blank" rel="external">《Quartz任务调度的基本实现原理》</a></p><ul><li>Quartz集群中，独立的Quartz节点并不与另一其的节点或是管理节点通信，而是通过相同的数据库表来感知到另一Quartz应用的 </li></ul></li><li><a href="http://www.iocoder.cn/categories/Elastic-Job-Lite/?vip&amp;architect-awesome" target="_blank" rel="external">《Elastic-Job-Lite 源码解析》</a></li><li><a href="http://www.iocoder.cn/categories/Elastic-Job-Cloud/?vip&amp;architect-awesome" target="_blank" rel="external">《Elastic-Job-Cloud 源码解析》</a></li></ul><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><ul><li><p><a href="https://blog.csdn.net/top_code/article/details/54615853" target="_blank" rel="external">《从零开始实现RPC框架 - RPC原理及实现》</a></p><ul><li>核心角色：Server: 暴露服务的服务提供方、Client: 调用远程服务的服务消费方、Registry: 服务注册与发现的注册中心。</li></ul></li><li><p><a href="https://blog.csdn.net/testcs_dn/article/details/78050590" target="_blank" rel="external">《分布式RPC框架性能大比拼 dubbo、motan、rpcx、gRPC、thrift的性能比较》</a></p></li></ul><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><ul><li><a href="http://dubbo.apache.org/" target="_blank" rel="external">官方网站</a></li><li><a href="https://www.cnblogs.com/steven520213/p/7606598.html" target="_blank" rel="external">dubbo实现原理简单介绍</a></li></ul><p><strong> SPI </strong><br>TODO</p><h3 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a>Thrift</h3><ul><li><a href="http://thrift.apache.org/" target="_blank" rel="external">官方网站</a></li><li><a href="https://blog.csdn.net/kesonyk/article/details/50924489" target="_blank" rel="external">《Thrift RPC详解》</a><ul><li>支持多语言，通过中间语言定义接口。</li></ul></li></ul><h3 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h3><p>服务端可以认证加密，在外网环境下，可以保证数据安全。</p><ul><li><a href="https://grpc.io/" target="_blank" rel="external">官方网站</a></li><li><a href="https://www.cnblogs.com/LBSer/p/4853234.html" target="_blank" rel="external">《你应该知道的RPC原理》</a></li></ul><h2 id="数据库中间件"><a href="#数据库中间件" class="headerlink" title="数据库中间件"></a>数据库中间件</h2><h3 id="Sharding-Jdbc"><a href="#Sharding-Jdbc" class="headerlink" title="Sharding Jdbc"></a>Sharding Jdbc</h3><ul><li><a href="http://shardingjdbc.io/" target="_blank" rel="external">官网</a></li></ul><h2 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h2><h3 id="日志搜集"><a href="#日志搜集" class="headerlink" title="日志搜集"></a>日志搜集</h3><ul><li><a href="http://cjting.me/misc/build-log-system-with-elkb/" target="_blank" rel="external">《从零开始搭建一个ELKB日志收集系统》</a></li><li><a href="https://blog.csdn.net/lzw_2006/article/details/51280058" target="_blank" rel="external">《用ELK搭建简单的日志收集分析系统》</a></li><li><a href="https://www.cnblogs.com/beginmind/p/6058194.html" target="_blank" rel="external">《日志收集系统-探究》</a></li></ul><h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><ul><li><p><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="external">Apollo - 携程开源的配置中心应用</a></p><ul><li>Spring Boot 和 Spring Cloud</li><li>支持推、拉模式更新配置</li><li>支持多种语言 </li></ul></li><li><p><a href="https://blog.csdn.net/u011320740/article/details/78742625" target="_blank" rel="external">《基于zookeeper实现统一配置管理》</a></p></li><li><p><a href="https://www.cnblogs.com/shamo89/p/8016908.html" target="_blank" rel="external">《 Spring Cloud Config 分布式配置中心使用教程》</a></p></li></ul><p>servlet 3.0 异步特性可用于配置中心的客户端</p><ul><li><a href="https://www.cnblogs.com/dogdogwang/p/7151866.html" target="_blank" rel="external">《servlet3.0 新特性——异步处理》</a></li></ul><h2 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a>API 网关</h2><p>主要职责：请求转发、安全认证、协议转换、容灾。</p><ul><li><a href="http://yunlzheng.github.io/2017/03/14/the-things-about-api-gateway/" target="_blank" rel="external">《API网关那些儿》</a></li><li><p><a href="http://www.infoq.com/cn/news/2016/07/API-background-architecture-floo" target="_blank" rel="external">《谈API网关的背景、架构以及落地方案》</a></p></li><li><p><a href="https://blog.csdn.net/zhanglh046/article/details/78651993" target="_blank" rel="external">《使用Zuul构建API Gateway》</a></p></li><li><a href="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/?vip&amp;architect-awesome" target="_blank" rel="external">《Spring Cloud Gateway 源码解析》</a></li><li><a href="https://mp.weixin.qq.com/s/LIq2CiXJQmmjBC0yvYLY5A" target="_blank" rel="external">《HTTP API网关选择之一Kong介绍》</a></li></ul><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><h3 id="OSI-七层协议"><a href="#OSI-七层协议" class="headerlink" title="OSI 七层协议"></a>OSI 七层协议</h3><ul><li><a href="https://www.cnblogs.com/Robin-YB/p/6668762.html" target="_blank" rel="external">《OSI七层协议模型、TCP/IP四层模型学习笔记》</a></li></ul><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><ul><li><a href="https://www.cnblogs.com/onepixel/p/7092302.html" target="_blank" rel="external">《深入浅出 TCP/IP 协议》</a></li><li><a href="https://blog.csdn.net/whuslei/article/details/6667471/" target="_blank" rel="external">《TCP协议中的三次握手和四次挥手》</a></li></ul><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ul><li><a href="https://www.cnblogs.com/wangning528/p/6388464.html" target="_blank" rel="external">《http协议详解(超详细)》</a></li></ul><h3 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a>HTTP2.0</h3><ul><li><a href="https://blog.csdn.net/zhuyiquan/article/details/69257126" target="_blank" rel="external">《HTTP 2.0 原理详细分析》</a></li><li><a href="https://blog.csdn.net/u012657197/article/details/77877840" target="_blank" rel="external">《HTTP2.0的基本单位为二进制帧》</a><ul><li>利用二进制帧负责传输。</li><li>多路复用。</li></ul></li></ul><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><ul><li><p><a href="https://www.cnblogs.com/zhangshitong/p/6478721.html" target="_blank" rel="external">《https原理通俗了解》</a></p><ul><li>使用非对称加密协商加密算法</li><li>使用对称加密方式传输数据</li><li>使用第三方机构签发的证书，来加密公钥，用于公钥的安全传输、防止被中间人串改。</li></ul></li><li><p><a href="https://blog.csdn.net/enweitech/article/details/53213862" target="_blank" rel="external">《八大免费SSL证书-给你的网站免费添加Https安全加密》</a></p></li></ul><h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><ul><li><p><a href="http://blog.51cto.com/litaotao/1289790" target="_blank" rel="external">《web优化必须了解的原理之I/o的五种模型和web的三种工作模式》</a></p><ul><li>五种I/O模型：阻塞I/O，非阻塞I/O，I/O复用、事件(信号)驱动I/O、异步I/O，前四种I/O属于同步操作，I/O的第一阶段不同、第二阶段相同，最后的一种则属于异步操作。</li><li>三种 Web Server 工作方式：Prefork(多进程)、Worker方式(线程方式)、Event方式。</li></ul></li><li><p><a href="http://www.cnblogs.com/Anker/p/3265058.html" target="_blank" rel="external">《select、poll、epoll之间的区别总结》</a></p><ul><li>select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的。</li><li>select 有打开文件描述符数量限制，默认1024（2048 for x64），100万并发，就要用1000个进程、切换开销大；poll采用链表结构，没有数量限制。</li><li>select，poll “醒着”的时候要遍历整个fd集合，而epoll在“醒着”的时候只要判断一下就绪链表是否为空就行了，通过回调机制节省大量CPU时间；select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，而epoll只要一次拷贝。</li><li>poll会随着并发增加，性能逐渐下降，epoll采用红黑树结构，性能稳定，不会随着连接数增加而降低。</li></ul></li><li><p><a href="http://xingyunbaijunwei.blog.163.com/blog/static/76538067201241685556302/" target="_blank" rel="external">《select，poll，epoll比较  》</a></p><ul><li>在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。</li></ul></li><li><p><a href="https://www.cnblogs.com/geason/p/5774096.html" target="_blank" rel="external">《深入理解Java NIO》</a></p><ul><li>NIO 是一种同步非阻塞的 IO 模型。同步是指线程不断轮询 IO 事件是否就绪，非阻塞是指线程在等待 IO 的时候，可以同时做其他任务</li></ul></li><li><p><a href="https://blog.csdn.net/skiof007/article/details/52873421" target="_blank" rel="external">《BIO与NIO、AIO的区别》</a></p></li><li><p><a href="https://blog.csdn.net/u013074465/article/details/46276967" target="_blank" rel="external">《两种高效的服务器设计模型：Reactor和Proactor模型》</a></p></li></ul><h3 id="Epoll"><a href="#Epoll" class="headerlink" title="Epoll"></a>Epoll</h3><ul><li><a href="https://www.cnblogs.com/fnlingnzb-learner/p/5835573.html" target="_blank" rel="external">《epoll使用详解（精髓）》</a></li></ul><h3 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java NIO"></a>Java NIO</h3><ul><li><a href="https://www.cnblogs.com/geason/p/5774096.html" target="_blank" rel="external">《深入理解Java NIO》</a></li><li><a href="https://blog.csdn.net/xidianliuy/article/details/51612676" target="_blank" rel="external">《Java NIO编写Socket服务器的一个例子》</a></li></ul><h3 id="kqueue"><a href="#kqueue" class="headerlink" title="kqueue"></a>kqueue</h3><ul><li><a href="http://www.cnblogs.com/luminocean/p/5631336.html" target="_blank" rel="external">《kqueue用法简介》</a></li></ul><h2 id="连接和短连接"><a href="#连接和短连接" class="headerlink" title="连接和短连接"></a>连接和短连接</h2><ul><li><a href="https://www.cnblogs.com/pangguoping/p/5571422.html" target="_blank" rel="external">《TCP/IP系列——长连接与短连接的区别》</a></li></ul><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul><li><a href="https://blog.csdn.net/excellentyuxiao/article/details/53390408" target="_blank" rel="external">《Netty原理剖析》</a><ul><li>Reactor 模式介绍。</li><li>Netty 是 Reactor 模式的一种实现。</li></ul></li></ul><h2 id="零拷贝（Zero-copy）"><a href="#零拷贝（Zero-copy）" class="headerlink" title="零拷贝（Zero-copy）"></a>零拷贝（Zero-copy）</h2><ul><li><a href="https://www.cnblogs.com/xys1228/p/6088805.html" target="_blank" rel="external">《对于 Netty ByteBuf 的零拷贝(Zero Copy) 的理解》</a><ul><li>多个物理分离的buffer，通过逻辑上合并成为一个，从而避免了数据在内存之间的拷贝。</li></ul></li></ul><h2 id="序列化-二进制协议"><a href="#序列化-二进制协议" class="headerlink" title="序列化(二进制协议)"></a>序列化(二进制协议)</h2><h3 id="Hessian"><a href="#Hessian" class="headerlink" title="Hessian"></a>Hessian</h3><ul><li><a href="https://www.cnblogs.com/happyday56/p/4268249.html" target="_blank" rel="external">《Hessian原理分析》</a><br>Binary-RPC;不仅仅是序列化</li></ul><h3 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h3><ul><li><a href="https://blog.csdn.net/antgan/article/details/52103966" target="_blank" rel="external">《Protobuf协议的Java应用例子》</a><br>Goolge出品、占用空间和效率完胜其他序列化类库，如Hessian；需要编写  .proto 文件。</li><li><p><a href="https://worktile.com/tech/share/prototol-buffers" target="_blank" rel="external">《Protocol Buffers序列化协议及应用》</a></p><pre><code>* 关于协议的解释；缺点：可读性差;</code></pre></li><li><p><a href="https://blog.csdn.net/eric520zenobia/article/details/53766571" target="_blank" rel="external">《简单的使用 protobuf 和 protostuff》</a></p><ul><li>protostuff 的好处是不用写 .proto 文件，Java 对象直接就可以序列化。</li></ul></li></ul><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h2><h3 id="数据库设计的三大范式"><a href="#数据库设计的三大范式" class="headerlink" title="数据库设计的三大范式"></a>数据库设计的三大范式</h3><ul><li><a href="https://www.cnblogs.com/waj6511988/p/7027127.html" target="_blank" rel="external">《数据库的三大范式以及五大约束》</a><ul><li>第一范式：数据表中的每一列（每个字段）必须是不可拆分的最小单元，也就是确保每一列的原子性；</li><li>第二范式（2NF）：满足1NF后，要求表中的所有列，都必须依赖于主键，而不能有任何一列与主键没有关系，也就是说一个表只描述一件事情；</li><li>第三范式：必须先满足第二范式（2NF），要求：表中的每一列只与主键直接相关而不是间接相关，（表中的每一列只能依赖于主键）；</li></ul></li></ul><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li><p><a href="http://www.admin10000.com/document/5372.html" target="_blank" rel="external">《MySQL的InnoDB索引原理详解》</a></p></li><li><p><a href="https://blog.csdn.net/xifeijian/article/details/20316775" target="_blank" rel="external">《MySQL存储引擎－－MyISAM与InnoDB区别》</a></p><ul><li>两种类型最主要的差别就是Innodb 支持事务处理与外键和行级锁</li></ul></li><li><p><a href="https://www.2cto.com/database/201211/172380.html" target="_blank" rel="external">《myisam和innodb索引实现的不同》</a></p></li></ul><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><ul><li><a href="https://my.oschina.net/kailuncen/blog/1504217" target="_blank" rel="external">《一篇文章带你读懂Mysql和InnoDB》</a></li></ul><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li><p><a href="http://vdisk.weibo.com/s/muWOT" target="_blank" rel="external">《MySQL36条军规》</a></p></li><li><p><a href="https://www.cnblogs.com/zhouyusheng/p/8038224.html" target="_blank" rel="external">《MYSQL性能优化的最佳20+条经验》</a></p></li><li><a href="https://blog.csdn.net/when_less_is_more/article/details/70187459" target="_blank" rel="external">《SQL优化之道》</a></li><li><a href="https://www.cnblogs.com/sivkun/p/7518540.html" target="_blank" rel="external">《mysql数据库死锁的产生原因及解决办法》</a></li><li><a href="https://blog.csdn.net/monkey_d_feilong/article/details/52291556" target="_blank" rel="external">《导致索引失效的可能情况》</a></li><li><a href="https://blog.csdn.net/zy_281870667/article/details/51604540" target="_blank" rel="external">《 MYSQL分页limit速度太慢优化方法》</a><ul><li>原则上就是缩小扫描范围。</li></ul></li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="聚集索引-非聚集索引"><a href="#聚集索引-非聚集索引" class="headerlink" title="聚集索引, 非聚集索引"></a>聚集索引, 非聚集索引</h4><ul><li><a href="https://blog.csdn.net/no_endless/article/details/77073549" target="_blank" rel="external">《MySQL 聚集索引/非聚集索引简述》</a></li><li><a href="https://www.cnblogs.com/zlcxbb/p/5757245.html" target="_blank" rel="external">《MyISAM和InnoDB的索引实现》</a></li></ul><p>MyISAM 是非聚集，InnoDB 是聚集</p><h4 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h4><ul><li><a href="https://www.cnblogs.com/summer0space/p/7247778.html" target="_blank" rel="external">《复合索引的优点和注意事项》</a></li></ul><h4 id="自适应哈希索引-AHI"><a href="#自适应哈希索引-AHI" class="headerlink" title="自适应哈希索引(AHI)"></a>自适应哈希索引(AHI)</h4><ul><li><a href="https://blog.csdn.net/Linux_ever/article/details/62043708" target="_blank" rel="external">《InnoDB存储引擎——自适应哈希索引》</a></li></ul><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><ul><li><a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="external">《MySQL 性能优化神器 Explain 使用分析》</a></li></ul><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><ul><li><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="external">MongoDB 教程</a></li><li><a href="http://mxdxm.iteye.com/blog/2093603" target="_blank" rel="external">《Mongodb相对于关系型数据库的优缺点》</a><ul><li>优点：弱一致性（最终一致），更能保证用户的访问速度；内置GridFS，支持大容量的存储；Schema-less 数据库，不用预先定义结构；内置Sharding；相比于其他NoSQL，第三方支持丰富；性能优越；</li><li>缺点：mongodb不支持事务操作；mongodb占用空间过大；MongoDB没有如MySQL那样成熟的维护工具，这对于开发和IT运营都是个值得注意的地方；</li></ul></li></ul><h3 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h3><ul><li><a href="http://www.thebigdata.cn/HBase/35831.html" target="_blank" rel="external">《简明 HBase 入门教程（开篇）》</a></li><li><a href="https://www.cnblogs.com/qiaoyihang/p/6246424.html" target="_blank" rel="external">《深入学习HBase架构原理》</a></li><li><a href="https://blog.csdn.net/youzhouliu/article/details/67632882" target="_blank" rel="external">《传统的行存储和（HBase）列存储的区别》</a></li></ul><ul><li><p><a href="https://blog.csdn.net/lifuxiangcaohui/article/details/39891099" target="_blank" rel="external">《Hbase与传统数据库的区别》</a></p><ul><li>空数据不存储，节省空间，且适用于并发。</li></ul></li><li><p><a href="https://blog.csdn.net/u014091123/article/details/73163088" target="_blank" rel="external">《HBase Rowkey设计》</a></p><ul><li>rowkey 按照字典顺序排列，便于批量扫描。</li><li>通过散列可以避免热点。</li></ul></li></ul><h1 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h1><h2 id="搜索引擎原理"><a href="#搜索引擎原理" class="headerlink" title="搜索引擎原理"></a>搜索引擎原理</h2><ul><li><a href="https://www.jianshu.com/p/0193dc44135b" target="_blank" rel="external">《倒排索引—搜索引擎入门》</a></li></ul><h2 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h2><ul><li><a href="https://www.cnblogs.com/rodge-run/p/6551152.html" target="_blank" rel="external">《Lucene入门简介》</a></li></ul><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><ul><li><a href="https://blog.csdn.net/laoyang360/article/details/52244917" target="_blank" rel="external">《Elasticsearch学习，请先看这一篇！》</a></li><li><a href="https://blog.csdn.net/cyony/article/details/65437708" target="_blank" rel="external">《Elasticsearch索引原理》</a></li></ul><h2 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h2><ul><li><a href="https://blog.csdn.net/u011936655/article/details/51960005" target="_blank" rel="external">《 Apache Solr入门教程》</a></li><li><a href="https://blog.csdn.net/convict_eva/article/details/53537837" target="_blank" rel="external">《elasticsearch与solr比较》</a></li></ul><h2 id="sphinx"><a href="#sphinx" class="headerlink" title="sphinx"></a>sphinx</h2><ul><li><a href="http://blog.jobbole.com/101672/" target="_blank" rel="external">《Sphinx 的介绍和原理探索》</a></li></ul><h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><h2 id="性能优化方法论"><a href="#性能优化方法论" class="headerlink" title="性能优化方法论"></a>性能优化方法论</h2><ul><li><p><a href="https://blog.csdn.net/huangwenyi1010/article/details/72673447?ref=myread" target="_blank" rel="external">《15天的性能优化工作，5方面的调优经验》</a></p><ul><li>代码层面、业务层面、数据库层面、服务器层面、前端优化。</li></ul></li><li><p><a href="https://blog.csdn.net/tenglizhe/article/details/44563135" target="_blank" rel="external">《系统性能优化的几个方面》</a></p></li></ul><h2 id="容量评估"><a href="#容量评估" class="headerlink" title="容量评估"></a>容量评估</h2><ul><li><a href="https://blog.csdn.net/u012528360/article/details/70054156" target="_blank" rel="external">《联网性能与容量评估的方法论和典型案例》</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651959542&amp;idx=1&amp;sn=2494bbea9a855e0e1c3ccd6d2562a600&amp;scene=21#wechat_redirect" target="_blank" rel="external">《互联网架构，如何进行容量设计？》</a><ul><li>评估总访问量、评估平均访问量QPS、评估高峰QPS、评估系统、单机极限QPS</li></ul></li></ul><h2 id="CDN-网络"><a href="#CDN-网络" class="headerlink" title="CDN 网络"></a>CDN 网络</h2><ul><li><a href="https://www.cnblogs.com/wxiaona/p/5867685.html" target="_blank" rel="external">《CDN加速原理》</a></li><li><a href="https://www.zhihu.com/question/20536932" target="_blank" rel="external">《国内有哪些比较好的 CDN？》</a></li></ul><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><ul><li><a href="https://blog.csdn.net/fysuccess/article/details/66972554" target="_blank" rel="external">《主流Java数据库连接池比较与开发配置实战》</a></li></ul><h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><ul><li><a href="https://blog.csdn.net/yethyeth/article/details/73266455" target="_blank" rel="external">《九大Java性能调试工具，必备至少一款》</a></li></ul><h1 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h1><h2 id="流式计算"><a href="#流式计算" class="headerlink" title="流式计算"></a>流式计算</h2><h3 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h3><ul><li><a href="http://storm.apache.org/" target="_blank" rel="external">官方网站</a></li><li><a href="https://blog.csdn.net/uisoul/article/details/77989927" target="_blank" rel="external">《最详细的Storm入门教程》</a></li></ul><h3 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h3><ul><li><a href="https://blog.csdn.net/lisi1129/article/details/54844919" target="_blank" rel="external">《Flink之一 Flink基本原理介绍》</a></li></ul><h3 id="Kafka-Stream"><a href="#Kafka-Stream" class="headerlink" title="Kafka Stream"></a>Kafka Stream</h3><ul><li><a href="https://yq.aliyun.com/articles/58382" target="_blank" rel="external">《Kafka Stream调研：一种轻量级流计算模式》</a></li></ul><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>例如：</p><ul><li>广告相关实时统计；</li><li>推荐系统用户画像标签实时更新；</li><li>线上服务健康状况实时监测；</li><li>实时榜单；</li><li>实时数据统计。</li></ul><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><ul><li><a href="https://blog.csdn.net/houbin0912/article/details/72967178" target="_blank" rel="external">《用通俗易懂的话说下hadoop是什么,能做什么》</a></li><li><a href="http://gitbook.cn/books/5954c9600326c7705af8a92a/index.html" target="_blank" rel="external">《史上最详细的Hadoop环境搭建》</a></li></ul><h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><ul><li><a href="https://segmentfault.com/a/1190000011575458" target="_blank" rel="external">《【Hadoop学习】HDFS基本原理》</a></li></ul><h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><ul><li><a href="https://blog.csdn.net/oppo62258801/article/details/72884633" target="_blank" rel="external">《用通俗易懂的大白话讲解Map/Reduce原理》</a></li><li><a href="https://blog.csdn.net/foye12/article/details/78358292" target="_blank" rel="external">《 简单的map-reduce的java例子》</a></li></ul><h3 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h3><ul><li><a href="http://www.cnblogs.com/codeOfLife/p/5492740.html" target="_blank" rel="external">《初步掌握Yarn的架构及原理》</a></li></ul><h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><ul><li><a href="http://www.cnblogs.com/tgzhu/p/5818374.html" target="_blank" rel="external">《Spark(一): 基本架构及原理》</a></li></ul><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><h2 id="web-安全"><a href="#web-安全" class="headerlink" title="web 安全"></a>web 安全</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><ul><li><a href="https://blog.csdn.net/qq_21956483/article/details/54377947" target="_blank" rel="external">《xss攻击原理与解决方法》</a><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3></li><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6412-csrf.html" target="_blank" rel="external">《CSRF原理及防范》</a></li></ul><h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><ul><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6413-sql-zhu-ru.html" target="_blank" rel="external">《SQL注入》</a></li></ul><h3 id="Hash-Dos"><a href="#Hash-Dos" class="headerlink" title="Hash Dos"></a>Hash Dos</h3><ul><li><a href="http://www.freebuf.com/articles/web/14199.html" target="_blank" rel="external">《邪恶的JAVA HASH DOS攻击》</a><ul><li>利用JsonObject 上传大Json，JsonObject 底层使用HashMap；不同的数据产生相同的hash值，使得构建Hash速度变慢，耗尽CPU。</li></ul></li><li><a href="http://blog.it2048.cn/article_hash-collision.html" target="_blank" rel="external">《一种高级的DoS攻击-Hash碰撞攻击》</a></li><li><a href="http://www.iteye.com/news/23939/" target="_blank" rel="external">《关于Hash Collision DoS漏洞：解析与解决方案》</a></li></ul><h3 id="脚本注入"><a href="#脚本注入" class="headerlink" title="脚本注入"></a>脚本注入</h3><ul><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6414-shang-chuan-wen-jian-guo-lv.html" target="_blank" rel="external">《上传文件漏洞原理及防范》</a></li></ul><h3 id="漏洞扫描工具"><a href="#漏洞扫描工具" class="headerlink" title="漏洞扫描工具"></a>漏洞扫描工具</h3><ul><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/6421-dvwa.html" target="_blank" rel="external">《DVWA》</a></li><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/w3af.html" target="_blank" rel="external">W3af</a></li><li><a href="https://blog.csdn.net/xygg0801/article/details/53610640" target="_blank" rel="external">OpenVAS详解</a></li></ul><h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><ul><li><p><a href="https://blog.csdn.net/niaonao/article/details/51112686" target="_blank" rel="external">《验证码原理分析及实现》</a></p></li><li><p><a href="https://my.oschina.net/jiangbianwanghai/blog/1031031" target="_blank" rel="external">《详解滑动验证码的实现原理》</a></p><ul><li>滑动验证码是根据人在滑动滑块的响应时间，拖拽速度，时间，位置，轨迹，重试次数等来评估风险。</li></ul></li><li><p><a href="https://www.cnblogs.com/xcj26/p/5242758.html" target="_blank" rel="external">《淘宝滑动验证码研究》</a></p></li></ul><h2 id="DDoS-防范"><a href="#DDoS-防范" class="headerlink" title="DDoS 防范"></a>DDoS 防范</h2><ul><li><a href="http://netsecurity.51cto.com/art/201601/503799.htm" target="_blank" rel="external">《学习手册：DDoS的攻击方式及防御手段》</a></li><li><a href="http://netsecurity.51cto.com/art/201406/442756.htm" target="_blank" rel="external">《免费DDoS攻击测试工具大合集》</a></li></ul><h2 id="用户隐私信息保护"><a href="#用户隐私信息保护" class="headerlink" title="用户隐私信息保护"></a>用户隐私信息保护</h2><ol><li>用户密码非明文保存，加动态salt。</li><li>身份证号，手机号如果要显示，用 “*” 替代部分字符。</li><li>联系方式在的显示与否由用户自己控制。</li><li>TODO</li></ol><ul><li><a href="https://zhidao.baidu.com/question/1988017976673661587.html" target="_blank" rel="external">《个人隐私包括哪些》</a></li><li><p><a href="https://www.zhihu.com/question/20137108" target="_blank" rel="external">《在互联网上，隐私的范围包括哪些？》</a></p></li><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6425-jia-mi-chang-jing-ff1a-yong-hu-mi-ma-bao-cun.html" target="_blank" rel="external">《用户密码保存》</a></p></li></ul><h2 id="序列化漏洞"><a href="#序列化漏洞" class="headerlink" title="序列化漏洞"></a>序列化漏洞</h2><ul><li><a href="https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/" target="_blank" rel="external">《Lib之过？Java反序列化漏洞通用利用分析》</a></li></ul><h2 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h2><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><ul><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6421-chang-jian-dui-cheng-jia-mi-suan-fa.html" target="_blank" rel="external">《常见对称加密算法》</a><ul><li>DES、3DES、Blowfish、AES</li><li>DES 采用 56位秘钥，Blowfish 采用1到448位变长秘钥，AES 128，192和256位长度的秘钥。</li><li>DES 秘钥太短（只有56位）算法目前已经被 AES 取代，并且 AES 有硬件加速，性能很好。</li></ul></li></ul><h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><ul><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6422-chang-jian-ha-xi-suan-fa-and-hmac.html" target="_blank" rel="external">《常用的哈希算法》</a></p><ul><li>MD5 和 SHA-1 已经不再安全，已被弃用。</li><li>目前 SHA-256 是比较安全的。</li></ul></li><li><p><a href="https://blog.csdn.net/zhangruhong168/article/details/78033202" target="_blank" rel="external">《基于Hash摘要签名的公网URL签名验证设计方案》</a></p></li></ul><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><ul><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6424-chang-yong-fei-dui-cheng-jia-mi-suan-fa.html" target="_blank" rel="external">《常见非对称加密算法》</a></p><ul><li>RSA、DSA、ECDSA(螺旋曲线加密算法)</li><li>和 RSA 不同的是 DSA 仅能用于数字签名，不能进行数据加密解密，其安全性和RSA相当，但其性能要比RSA快。</li><li><p>256位的ECC秘钥的安全性等同于3072位的RSA秘钥。</p><p>  <a href="http://baijiahao.baidu.com/s?id=1578348858092033763&amp;wfr=spider&amp;for=pc" target="_blank" rel="external">《区块链的加密技术》</a>    </p></li></ul></li></ul><h2 id="服务器安全"><a href="#服务器安全" class="headerlink" title="服务器安全"></a>服务器安全</h2><ul><li><a href="http://www.freebuf.com/articles/system/121540.html" target="_blank" rel="external">《Linux强化论：15步打造一个安全的Linux服务器》</a></li></ul><h2 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h2><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><p>TODO</p><h2 id="网络隔离"><a href="#网络隔离" class="headerlink" title="网络隔离"></a>网络隔离</h2><h3 id="内外网分离"><a href="#内外网分离" class="headerlink" title="内外网分离"></a>内外网分离</h3><p>TODO</p><h3 id="登录跳板机"><a href="#登录跳板机" class="headerlink" title="登录跳板机"></a>登录跳板机</h3><p>在内外环境中通过跳板机登录到线上主机。</p><ul><li><a href="http://blog.51cto.com/zero01/2062618" target="_blank" rel="external">《搭建简易堡垒机》</a></li></ul><h2 id="授权、认证"><a href="#授权、认证" class="headerlink" title="授权、认证"></a>授权、认证</h2><h3 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h3><ul><li><a href="https://www.cnblogs.com/zq8024/p/5003050.html" target="_blank" rel="external">《基于组织角色的权限设计》</a></li><li><a href="https://www.cnblogs.com/shijiaqi1066/p/3793894.html" target="_blank" rel="external">《权限系统与RBAC模型概述》</a></li><li><a href="https://blog.csdn.net/he90227/article/details/38663553" target="_blank" rel="external">《Spring整合Shiro做权限控制模块详细案例分析》</a></li></ul><h3 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="external">《理解OAuth 2.0》</a></li><li><a href="https://www.cnblogs.com/flashsun/p/7424071.html" target="_blank" rel="external">《一张图搞定OAuth2.0》</a></li></ul><h3 id="双因素认证（2FA）"><a href="#双因素认证（2FA）" class="headerlink" title="双因素认证（2FA）"></a>双因素认证（2FA）</h3><p>2FA - Two-factor authentication，用于加强登录验证</p><p>常用做法是 登录密码 + 手机验证码（或者令牌Key，类似于与网银的 USB key）</p><ul><li>【《双因素认证（2FA）教程》】(<a href="http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html</a>)</li></ul><h3 id="单点登录-SSO"><a href="#单点登录-SSO" class="headerlink" title="单点登录(SSO)"></a>单点登录(SSO)</h3><ul><li><p><a href="https://www.cnblogs.com/ywlaker/p/6113927.html" target="_blank" rel="external">《单点登录原理与简单实现》</a></p></li><li><p><a href="https://github.com/apereo/cas" target="_blank" rel="external">CAS单点登录框架</a></p></li></ul><h1 id="常用开源框架"><a href="#常用开源框架" class="headerlink" title="常用开源框架"></a>常用开源框架</h1><h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h2><ul><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/chapter1/di-yi-zhang-ff1a-zhun-bei-qi-cheng/12-guan-yu-kai-yuan/123-kai-yuan-xie-yi-de-xuan-ze.html" target="_blank" rel="external">《开源协议的选择》</a></p></li><li><p><a href="http://choosealicense.online/" target="_blank" rel="external">如何选择一个开源软件协议</a></p></li></ul><h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><h3 id="Log4j、Log4j2"><a href="#Log4j、Log4j2" class="headerlink" title="Log4j、Log4j2"></a>Log4j、Log4j2</h3><ul><li><a href="https://blog.csdn.net/u012422446/article/details/51199724" target="_blank" rel="external">《log4j 详细讲解》</a></li><li><a href="https://blog.csdn.net/vbirdbest/article/details/71751835" target="_blank" rel="external">《log4j2 实际使用详解》</a></li><li><a href="https://my.oschina.net/OutOfMemory/blog/789267" target="_blank" rel="external">《Log4j1,Logback以及Log4j2性能测试对比》</a><ul><li>Log4J 异步日志性能优异。 </li></ul></li></ul><h3 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h3><ul><li><a href="https://blog.csdn.net/rulon147/article/details/52620541" target="_blank" rel="external">《最全LogBack 详解、含java案例和配置说明》</a></li></ul><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><ul><li><a href="https://blog.csdn.net/sinat_34093604/article/details/53082000" target="_blank" rel="external">《ORM框架使用优缺点》</a><ul><li>主要目的是为了提高开发效率。 </li></ul></li></ul><p><strong>MyBatis：</strong></p><ul><li><p><a href="https://www.cnblogs.com/winclpt/articles/7511672.html" target="_blank" rel="external">《mybatis缓存机制详解》</a></p><ul><li>一级缓存是SqlSession级别的缓存，缓存的数据只在SqlSession内有效</li><li>二级缓存是mapper级别的缓存，同一个namespace公用这一个缓存，所以对SqlSession是共享的；使用 LRU 机制清理缓存，通过 cacheEnabled 参数开启。  </li></ul></li><li><p><a href="https://blog.csdn.net/baidu_32877851/article/details/53959268" target="_blank" rel="external">《MyBatis学习之代码生成器Generator》</a></p></li></ul><h2 id="网络框架"><a href="#网络框架" class="headerlink" title="网络框架"></a>网络框架</h2><p>TODO</p><h2 id="Web-框架"><a href="#Web-框架" class="headerlink" title="Web 框架"></a>Web 框架</h2><h3 id="Spring-家族"><a href="#Spring-家族" class="headerlink" title="Spring 家族"></a>Spring 家族</h3><p><strong>Spring</strong></p><ul><li><a href="https://www.w3cschool.cn/wkspring/" target="_blank" rel="external">Spring 简明教程</a></li></ul><p><strong>Spring Boot</strong></p><ul><li><a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external">官方网站</a></li><li><a href="http://blog.didispace.com/Spring-Boot%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/" target="_blank" rel="external">《Spring Boot基础教程》</a></li></ul><p><strong>Spring Cloud</strong></p><ul><li><a href="http://springboot.fun/" target="_blank" rel="external">Spring Boot 中文索引站</a></li><li><a href="https://springcloud.cc/" target="_blank" rel="external">Spring Cloud 中文文档</a></li><li><a href="http://blog.didispace.com/Spring-Cloud%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/" target="_blank" rel="external">《Spring Cloud基础教程》</a></li></ul><h2 id="工具框架"><a href="#工具框架" class="headerlink" title="工具框架"></a>工具框架</h2><ul><li><a href="https://www.cnblogs.com/crazylqy/p/4872236.html" target="_blank" rel="external">《Apache Commons 工具类介绍及简单使用》</a></li><li><a href="http://ifeve.com/google-guava/" target="_blank" rel="external">《Google guava 中文教程》</a></li></ul><h1 id="分布式设计"><a href="#分布式设计" class="headerlink" title="分布式设计"></a>分布式设计</h1><h2 id="扩展性设计"><a href="#扩展性设计" class="headerlink" title="扩展性设计"></a>扩展性设计</h2><ul><li><p><a href="https://blog.csdn.net/hemin1003/article/details/53633926" target="_blank" rel="external">《架构师不可不知的十大可扩展架构》</a></p><ul><li>总结下来，通用的套路就是分布、缓存及异步处理。 </li></ul></li><li><p><a href="https://yq.aliyun.com/articles/38119" target="_blank" rel="external">《可扩展性设计之数据切分》</a></p><ul><li>水平切分+垂直切分</li><li>利用中间件进行分片如，MySQL Proxy。</li><li>利用分片策略进行切分，如按照ID取模。 </li></ul></li><li><p><a href="https://blog.csdn.net/deniro_li/article/details/78458306" target="_blank" rel="external">《说说如何实现可扩展性的大型网站架构》</a></p><ul><li>分布式服务+消息队列。</li></ul></li><li><p><a href="https://blog.csdn.net/chaofanwei/article/details/29191073" target="_blank" rel="external">《大型网站技术架构（七）—网站的可扩展性架构》</a></p></li></ul><h2 id="稳定性-amp-高可用"><a href="#稳定性-amp-高可用" class="headerlink" title="稳定性 &amp; 高可用"></a>稳定性 &amp; 高可用</h2><ul><li><a href="https://blog.csdn.net/hustspy1990/article/details/78008324" target="_blank" rel="external">《系统设计：关于高可用系统的一些技术方案》</a><ul><li>可扩展：水平扩展、垂直扩展。 通过冗余部署，避免单点故障。</li><li>隔离：避免单一业务占用全部资源。避免业务之间的相互影响 2. 机房隔离避免单点故障。</li><li>解耦：降低维护成本，降低耦合风险。减少依赖，减少相互间的影响。</li><li>限流：滑动窗口计数法、漏桶算法、令牌桶算法等算法。遇到突发流量时，保证系统稳定。</li><li>降级：紧急情况下释放非核心功能的资源。牺牲非核心业务，保证核心业务的高可用。</li><li>熔断：异常情况超出阈值进入熔断状态，快速失败。减少不稳定的外部依赖对核心服务的影响。</li><li>自动化测试：通过完善的测试，减少发布引起的故障。</li><li>灰度发布：灰度发布是速度与安全性作为妥协，能够有效减少发布故障。</li></ul></li></ul><ul><li><a href="https://coolshell.cn/articles/17459.html" target="_blank" rel="external">《关于高可用的系统》</a><ul><li>设计原则：数据不丢(持久化)；服务高可用(服务副本)；绝对的100%高可用很难，目标是做到尽可能多的9，如99.999%（全年累计只有5分钟）。     </li></ul></li></ul><h3 id="硬件负载均衡"><a href="#硬件负载均衡" class="headerlink" title="硬件负载均衡"></a>硬件负载均衡</h3><ul><li><p><a href="https://www.cnblogs.com/wuyun-blog/p/6186198.html" target="_blank" rel="external">《转！！负载均衡器技术Nginx和F5的优缺点对比》</a></p><ul><li>主要是和F5对比。</li></ul></li><li><p><a href="https://www.cnblogs.com/lcword/p/5773296.html" target="_blank" rel="external">《软/硬件负载均衡产品 你知多少？》</a></p></li></ul><h3 id="软件负载均衡"><a href="#软件负载均衡" class="headerlink" title="软件负载均衡"></a>软件负载均衡</h3><ul><li><a href="https://www.cnblogs.com/tianzhiliang/articles/2317808.html" target="_blank" rel="external">《几种负载均衡算法》</a><br>  轮寻、权重、负载、最少连接、QoS</li><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/611-dns-fang-shi.html" target="_blank" rel="external">《DNS负载均衡》</a><ul><li>配置简单，更新速度慢。 </li></ul></li><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/613-nginx-fu-zai-jun-heng.html" target="_blank" rel="external">《Nginx负载均衡》</a></p><ul><li>简单轻量、学习成本低；主要适用于web应用。</li></ul></li><li><p><a href="https://www.cnblogs.com/edisonchou/p/4281978.html" target="_blank" rel="external">《借助LVS+Keepalived实现负载均衡 》</a></p><ul><li>配置比较负载、只支持到4层，性能较高。</li></ul></li><li><p><a href="http://www.ttlsa.com/linux/haproxy-study-tutorial/" target="_blank" rel="external">《HAProxy用法详解 全网最详细中文文档》</a></p><ul><li>支持到七层（比如HTTP）、功能比较全面，性能也不错。</li></ul></li><li><p><a href="http://blog.itpub.net/25704976/viewspace-1319781/" target="_blank" rel="external">《Haproxy+Keepalived+MySQL实现读均衡负载》</a></p><ul><li>主要是用户读请求的负载均衡。</li></ul></li><li><p><a href="https://www.cnblogs.com/lylife/p/5584019.html" target="_blank" rel="external">《rabbitmq+haproxy+keepalived实现高可用集群搭建》</a></p></li></ul><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><ul><li><a href="https://www.cnblogs.com/haoxinyue/p/6792309.html" target="_blank" rel="external">《谈谈高并发系统的限流》</a><ul><li>计数器：通过滑动窗口计数器，控制单位时间内的请求次数，简单粗暴。</li><li>漏桶算法：固定容量的漏桶，漏桶满了就丢弃请求，比较常用。</li><li>令牌桶算法：固定容量的令牌桶，按照一定速率添加令牌，处理请求前需要拿到令牌，拿不到令牌则丢弃请求，或进入丢队列，可以通过控制添加令牌的速率，来控制整体速度。Guava 中的 RateLimiter 是令牌桶的实现。</li><li>Nginx 限流：通过 <code>limit_req</code> 等模块限制并发连接数。</li></ul></li></ul><h3 id="应用层容灾"><a href="#应用层容灾" class="headerlink" title="应用层容灾"></a>应用层容灾</h3><ul><li><p><a href="https://segmentfault.com/a/1190000005988895" target="_blank" rel="external">《防雪崩利器：熔断器 Hystrix 的原理与使用》</a></p><ul><li>雪崩效应原因：硬件故障、硬件故障、程序Bug、重试加大流量、用户大量请求。 </li><li>雪崩的对策：限流、改进缓存模式(缓存预加载、同步调用改异步)、自动扩容、降级。</li><li>Hystrix设计原则：<ul><li>资源隔离：Hystrix通过将每个依赖服务分配独立的线程池进行资源隔离, 从而避免服务雪崩。</li><li>熔断开关：服务的健康状况 = 请求失败数 / 请求总数，通过阈值设定和滑动窗口控制开关。</li><li>命令模式：通过继承 HystrixCommand 来包装服务调用逻辑。 </li></ul></li></ul></li><li><p><a href="https://blog.csdn.net/zeb_perfect/article/details/54135506" target="_blank" rel="external">《缓存穿透，缓存击穿，缓存雪崩解决方案分析》</a></p></li><li><a href="https://blog.csdn.net/zeb_perfect/article/details/54135506" target="_blank" rel="external">《缓存击穿、失效以及热点key问题》</a> <ul><li>主要策略：失效瞬间：单机使用锁；使用分布式锁；不过期；</li><li>热点数据：热点数据单独存储；使用本地缓存；分成多个子key；</li></ul></li></ul><h3 id="跨机房容灾"><a href="#跨机房容灾" class="headerlink" title="跨机房容灾"></a>跨机房容灾</h3><ul><li><p><a href="http://dc.idcquan.com/ywgl/71559.shtml" target="_blank" rel="external">《“异地多活”多机房部署经验谈》</a></p><ul><li>通过自研中间件进行数据同步。 </li></ul></li><li><p><a href="https://blog.csdn.net/jeffreynicole/article/details/48135093" target="_blank" rel="external">《异地多活（异地双活）实践经验》</a></p><ul><li>注意延迟问题，多次跨机房调用会将延时放大数倍。</li><li>建房间专线很大概率会出现问题，做好运维和程序层面的容错。</li><li>不能依赖于程序端数据双写，要有自动同步方案。 </li><li>数据永不在高延迟和较差网络质量下，考虑同步质量问题。</li><li>核心业务和次要业务分而治之，甚至只考虑核心业务。</li><li>异地多活监控部署、测试也要跟上。</li><li>业务允许的情况下考虑用户分区，尤其是游戏、邮箱业务。</li><li>控制跨机房消息体大小，越小越好。</li><li>考虑使用docker容器虚拟化技术，提高动态调度能力。</li></ul></li><li><p><a href="https://blog.csdn.net/yoara/article/details/38013751" target="_blank" rel="external">容灾技术及建设经验介绍</a></p></li></ul><h3 id="容灾演练流程"><a href="#容灾演练流程" class="headerlink" title="容灾演练流程"></a>容灾演练流程</h3><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650996320&amp;idx=1&amp;sn=0ed3be190bbee4a9277886ef88cbb2e5" target="_blank" rel="external">《依赖治理、灰度发布、故障演练，阿里电商故障演练系统的设计与实战经验》</a><ul><li>常见故障画像</li><li>案例：预案有效性、预案有效性、故障复现、架构容灾测试、参数调优、参数调优、故障突袭、联合演练。</li></ul></li></ul><h3 id="平滑启动"><a href="#平滑启动" class="headerlink" title="平滑启动"></a>平滑启动</h3><ul><li><p>平滑重启应用思路<br>1.端流量（如vip层）、2. flush 数据(如果有)、3, 重启应用</p></li><li><p><a href="https://blog.csdn.net/u011001084/article/details/73480432" target="_blank" rel="external">《JVM安全退出（如何优雅的关闭java服务）》</a><br>推荐推出方式：System.exit，Kill SIGTERM；不推荐 kill-9；用 Runtime.addShutdownHook 注册钩子。</p></li><li><a href="http://ju.outofmemory.cn/entry/337235" target="_blank" rel="external">《常见Java应用如何优雅关闭》</a><br>Java、Spring、Dubbo 优雅关闭方式。</li></ul><h2 id="数据库扩展"><a href="#数据库扩展" class="headerlink" title="数据库扩展"></a>数据库扩展</h2><h3 id="读写分离模式"><a href="#读写分离模式" class="headerlink" title="读写分离模式"></a>读写分离模式</h3><ul><li><a href="https://www.cnblogs.com/houdj/p/6563771.html" target="_blank" rel="external">《Mysql主从方案的实现》</a></li><li><a href="https://www.cnblogs.com/edisonchou/p/4133148.html" target="_blank" rel="external">《搭建MySQL主从复制经典架构》</a></li><li><p><a href="https://blog.csdn.net/nimasike/article/details/48048341" target="_blank" rel="external">《Haproxy+多台MySQL从服务器(Slave) 实现负载均衡》</a></p></li><li><p><a href="https://www.cnblogs.com/zhangsubai/p/6801764.html" target="_blank" rel="external">《DRBD+Heartbeat+Mysql高可用读写分离架构》</a></p><ul><li>DRDB 进行磁盘复制，避免单点问题。</li></ul></li><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/62-ke-kuo-zhan-de-shu-ju-ku-jia-gou/621-gao-ke-yong-mysql-de-ji-zhong-fang-an/6214-mysql-cluster-fang-an.html" target="_blank" rel="external">《MySQL Cluster 方式》</a></p></li></ul><h3 id="分片模式"><a href="#分片模式" class="headerlink" title="分片模式"></a>分片模式</h3><ul><li><p><a href="https://www.jianshu.com/p/32b3e91aa22c" target="_blank" rel="external">《分库分表需要考虑的问题及方案》</a></p><ul><li>中间件： 轻量级：sharding-jdbc、TSharding；重量级：Atlas、MyCAT、Vitess等。</li><li>问题：事务、Join、迁移、扩容、ID、分页等。</li><li>事务补偿：对数据进行对帐检查;基于日志进行比对;定期同标准数据来源进行同步等。</li><li>分库策略：数值范围；取模；日期等。</li><li>分库数量：通常 MySQL 单库 5千万条、Oracle 单库一亿条需要分库。 </li></ul></li><li><p><a href="https://www.2cto.com/database/201503/380348.html" target="_blank" rel="external">《MySql分表和表分区详解》</a></p><ul><li>分区：是MySQL内部机制，对客户端透明，数据存储在不同文件中，表面上看是同一个表。</li><li>分表：物理上创建不同的表、客户端需要管理分表路由。</li></ul></li></ul><h2 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h2><h3 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h3><ul><li><a href="https://blog.csdn.net/jiaolongdy/article/details/51188798" target="_blank" rel="external">《永不失联！如何实现微服务架构中的服务发现？》</a><ul><li>客户端服务发现模式：客户端直接查询注册表，同时自己负责负载均衡。Eureka 采用这种方式。</li><li>服务器端服务发现模式：客户端通过负载均衡查询服务实例。</li></ul></li><li><p><a href="https://blog.csdn.net/u010963948/article/details/71730165" target="_blank" rel="external">《SpringCloud服务注册中心比较:Consul vs Zookeeper vs Etcd vs Eureka》</a></p><ul><li>CAP支持：Consul（CA）、zookeeper（cp）、etcd（cp） 、euerka（ap）</li><li>作者认为目前 Consul 对 Spring cloud 的支持比较好。</li></ul></li><li><p><a href="http://mobile.51cto.com/news-502394.htm" target="_blank" rel="external">《基于Zookeeper的服务注册与发现》</a></p><ul><li>优点：API简单、Pinterest，Airbnb 在用、多语言、通过watcher机制来实现配置PUSH，能快速响应配置变化。 </li></ul></li></ul><h3 id="服务路由控制"><a href="#服务路由控制" class="headerlink" title="服务路由控制"></a>服务路由控制</h3><ul><li><a href="https://blog.csdn.net/xundh/article/details/59492750" target="_blank" rel="external">《分布式服务框架学习笔记4 服务路由》</a><ul><li>原则：透明化路由</li><li>负载均衡策略：随机、轮询、服务调用延迟、一致性哈希、粘滞连接</li><li>本地路由有限策略：injvm(优先调用jvm内部的服务)，innative(优先使用相同物理机的服务),原则上找距离最近的服务。</li><li>配置方式：统一注册表；本地配置；动态下发。</li></ul></li></ul><h2 id="分布式一致"><a href="#分布式一致" class="headerlink" title="分布式一致"></a>分布式一致</h2><h3 id="CAP-与-BASE-理论"><a href="#CAP-与-BASE-理论" class="headerlink" title="CAP 与 BASE 理论"></a>CAP 与 BASE 理论</h3><ul><li><a href="http://www.cnblogs.com/szlbm/p/5588543.html" target="_blank" rel="external">《从分布式一致性谈到CAP理论、BASE理论》</a><ul><li>一致性分类：强一致(立即一致)；弱一致(可在单位时间内实现一致，比如秒级)；最终一致(弱一致的一种，一定时间内最终一致)</li><li>CAP：一致性、可用性、分区容错性(网络故障引起)</li><li>BASE：Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）</li><li>BASE理论的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</li></ul></li></ul><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><ul><li><a href="http://www.hollischuang.com/archives/1716" target="_blank" rel="external">《分布式锁的几种实现方式》</a><ul><li>基于数据库的分布式锁：优点：操作简单、容易理解。缺点：存在单点问题、数据库性能够开销较大、不可重入；</li><li>基于缓存的分布式锁：优点：非阻塞、性能好。缺点：操作不好容易造成锁无法释放的情况。</li><li>Zookeeper 分布式锁：通过有序临时节点实现锁机制，自己对应的节点需要最小，则被认为是获得了锁。优点：集群可以透明解决单点问题，避免锁不被释放问题，同时锁可以重入。缺点：性能不如缓存方式，吞吐量会随着zk集群规模变大而下降。</li></ul></li><li><p><a href="https://www.tuicool.com/articles/VZJr6fY" target="_blank" rel="external">《基于Zookeeper的分布式锁》</a></p><ul><li>清楚的原理描述 + Java 代码示例。 </li></ul></li><li><p><a href="https://www.cnblogs.com/0201zcr/p/5942748.html" target="_blank" rel="external">《jedisLock—redis分布式锁实现》</a></p><ul><li>基于 setnx(set if ont exists)，有则返回false，否则返回true。并支持过期时间。</li></ul></li><li><p><a href="https://blog.csdn.net/albertfly/article/details/77412333" target="_blank" rel="external">《Memcached 和 Redis 分布式锁方案》</a></p><ul><li>利用 memcached 的 add（有别于set）操作，当key存在时，返回false。</li></ul></li></ul><h3 id="分布式一致性算法"><a href="#分布式一致性算法" class="headerlink" title="分布式一致性算法"></a>分布式一致性算法</h3><h4 id="PAXOS"><a href="#PAXOS" class="headerlink" title="PAXOS"></a>PAXOS</h4><ul><li><a href="https://www.cnblogs.com/linbingdong/p/6253479.html" target="_blank" rel="external">《分布式系列文章——Paxos算法原理与推导》</a></li><li><a href="https://blog.csdn.net/u010039929/article/details/70171672" target="_blank" rel="external">《Paxos—&gt;Fast Paxos—&gt;Zookeeper分析》</a></li><li><a href="https://www.cnblogs.com/leesf456/p/6012777.html" target="_blank" rel="external">《【分布式】Zookeeper与Paxos》</a></li></ul><h4 id="Zab"><a href="#Zab" class="headerlink" title="Zab"></a>Zab</h4><ul><li><a href="https://www.jianshu.com/p/fb527a64deee" target="_blank" rel="external">《Zab：Zookeeper 中的分布式一致性协议介绍》</a></li></ul><h4 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a>Raft</h4><ul><li><a href="http://www.cnblogs.com/mindwind/p/5231986.html" target="_blank" rel="external">《Raft 为什么是更易理解的分布式一致性算法》</a><ul><li>三种角色：Leader（领袖）、Follower（群众）、Candidate（候选人）</li><li>通过随机等待的方式发出投票，得票多的获胜。</li></ul></li></ul><h4 id="Gossip"><a href="#Gossip" class="headerlink" title="Gossip"></a>Gossip</h4><ul><li><a href="http://blog.51cto.com/tianya23/530743" target="_blank" rel="external">《Gossip算法》</a></li></ul><h4 id="两阶段提交、多阶段提交"><a href="#两阶段提交、多阶段提交" class="headerlink" title="两阶段提交、多阶段提交"></a>两阶段提交、多阶段提交</h4><ul><li><a href="http://blog.jobbole.com/95632/" target="_blank" rel="external">《关于分布式事务、两阶段提交协议、三阶提交协议》</a></li></ul><h3 id="幂等"><a href="#幂等" class="headerlink" title="幂等"></a>幂等</h3><ul><li><a href="https://www.cnblogs.com/wxgblogs/p/6639272.html" target="_blank" rel="external">《分布式系统—-幂等性设计》</a><ul><li>幂等特性的作用：该资源具备幂等性，请求方无需担心重复调用会产生错误。</li><li>常见保证幂等的手段：MVCC（类似于乐观锁）、去重表(唯一索引)、悲观锁、一次性token、序列号方式。 </li></ul></li></ul><h3 id="分布式一致方案"><a href="#分布式一致方案" class="headerlink" title="分布式一致方案"></a>分布式一致方案</h3><ul><li><a href="http://www.infoq.com/cn/articles/solution-of-distributed-system-transaction-consistency" target="_blank" rel="external">《分布式系统事务一致性解决方案》</a></li><li><a href="https://weibo.com/ttarticle/p/show?id=2309403965965003062676" target="_blank" rel="external">《保证分布式系统数据一致性的6种方案》</a></li></ul><h3 id="分布式-Leader-节点选举"><a href="#分布式-Leader-节点选举" class="headerlink" title="分布式 Leader 节点选举"></a>分布式 Leader 节点选举</h3><ul><li><a href="https://blog.csdn.net/johnson_moon/article/details/78809995" target="_blank" rel="external">《利用zookeeper实现分布式leader节点选举》</a></li></ul><h3 id="TCC-Try-Confirm-Cancel-柔性事务"><a href="#TCC-Try-Confirm-Cancel-柔性事务" class="headerlink" title="TCC(Try/Confirm/Cancel) 柔性事务"></a>TCC(Try/Confirm/Cancel) 柔性事务</h3><ul><li><a href="https://www.jianshu.com/p/ab1a1c6b08a1" target="_blank" rel="external">《传统事务与柔性事务》</a><ul><li>基于BASE理论：基本可用、柔性状态、最终一致。</li><li>解决方案：记录日志+补偿（正向补充或者回滚）、消息重试(要求程序要幂等)；“无锁设计”、采用乐观锁机制。</li></ul></li></ul><h2 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/27666295" target="_blank" rel="external">说说分布式文件存储系统-基本架构</a> ？</li><li><a href="https://blog.csdn.net/gatieme/article/details/44982961" target="_blank" rel="external">《各种分布式文件系统的比较》</a> ？<ul><li>HDFS：大批量数据读写，用于高吞吐量的场景，不适合小文件。</li><li>FastDFS：轻量级、适合小文件。</li></ul></li></ul><h2 id="唯一ID-生成"><a href="#唯一ID-生成" class="headerlink" title="唯一ID 生成"></a>唯一ID 生成</h2><h3 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h3><ul><li><p><a href="https://www.cnblogs.com/baiwa/p/5318432.html" target="_blank" rel="external">《高并发分布式系统中生成全局唯一Id汇总》</a></p><ul><li>Twitter 方案（Snowflake 算法）：41位时间戳+10位机器标识（比如IP，服务器名称等）+12位序列号(本地计数器)</li><li>Flicker 方案：MySQL自增ID + “REPLACE INTO XXX:SELECT LAST_INSERT_ID();” </li><li>UUID：缺点，无序，字符串过长，占用空间，影响检索性能。</li><li>MongoDB 方案：利用 ObjectId。缺点：不能自增。</li></ul></li><li><p><a href="https://blog.csdn.net/hdu09075340/article/details/79103851" target="_blank" rel="external">《TDDL 在分布式下的SEQUENCE原理》</a></p><ul><li>在数据库中创建 sequence 表，用于记录，当前已被占用的id最大值。</li><li>每台客户端主机取一个id区间（比如 1000~2000）缓存在本地，并更新 sequence 表中的id最大值记录。</li><li>客户端主机之间取不同的id区间，用完再取，使用乐观锁机制控制并发。</li></ul></li></ul><h2 id="一致性Hash算法"><a href="#一致性Hash算法" class="headerlink" title="一致性Hash算法"></a>一致性Hash算法</h2><ul><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/631-yi-zhi-xing-ha-xi.html" target="_blank" rel="external">《一致性哈希算法》</a></li></ul><h1 id="设计思想-amp-开发模式"><a href="#设计思想-amp-开发模式" class="headerlink" title="设计思想 &amp; 开发模式"></a>设计思想 &amp; 开发模式</h1><h2 id="DDD-Domain-driven-Design-领域驱动设计"><a href="#DDD-Domain-driven-Design-领域驱动设计" class="headerlink" title="DDD(Domain-driven Design - 领域驱动设计)"></a>DDD(Domain-driven Design - 领域驱动设计)</h2><ul><li><p><a href="https://www.cnblogs.com/netfocus/p/5548025.html" target="_blank" rel="external">《浅谈我对DDD领域驱动设计的理解》</a></p><ul><li>概念：DDD 主要对传统软件开发流程(分析-设计-编码)中各阶段的割裂问题而提出，避免由于一开始分析不明或在软件开发过程中的信息流转不一致而造成软件无法交付（和需求方设想不一致）的问题。DDD 强调一切以领域（Domain）为中心，强调领域专家（Domain Expert）的作用，强调先定义好领域模型之后在进行开发，并且领域模型可以指导开发（所谓的驱动）。</li><li>过程：理解领域、拆分领域、细化领域，模型的准确性取决于模型的理解深度。</li><li>设计：DDD 中提出了建模工具，比如聚合、实体、值对象、工厂、仓储、领域服务、领域事件来帮助领域建模。</li></ul></li><li><p><a href="https://www.cnblogs.com/butterfly100/p/7827870.html" target="_blank" rel="external">《领域驱动设计的基础知识总结》</a></p><ul><li>领域（Doamin）本质上就是问题域，比如一个电商系统，一个论坛系统等。</li><li>界限上下文（Bounded Context）：阐述子域之间的关系，可以简单理解成一个子系统或组件模块。</li><li>领域模型（Domain Model）：DDD的核心是建立（用通用描述语言、工具—领域通用语言）正确的领域模型；反应业务需求的本质，包括实体和过程；其贯穿软件分析、设计、开发 的整个过程；常用表达领域模型的方式：图、代码或文字；</li><li>领域通用语言：领域专家、开发设计人员都能立即的语言或工具。</li><li>经典分层架构：用户界面/展示层、应用层、领域层、基础设施层，是四层架构模式。</li><li>使用的模式：<ul><li>关联尽量少，尽量单项，尽量降低整体复杂度。</li><li>实体（Entity）：领域中的唯一标示，一个实体的属性尽量少，少则清晰。</li><li>值对象（Value Object）：没有唯一标识，且属性值不可变，小二简单的对象，比如Date。</li><li>领域服务（Domain Service）： 协调多个领域对象，只有方法没有状态(不存数据)；可以分为应用层服务，领域层服务、基础层服务。</li><li>聚合及聚合根（Aggregate，Aggregate Root）：聚合定义了一组具有内聚关系的相关对象的集合；聚合根是对聚合引用的唯一元素；当修改一个聚合时，必须在事务级别；大部分领域模型中，有70%的聚合通常只有一个实体，30%只有2~3个实体；如果一个聚合只有一个实体，那么这个实体就是聚合根；如果有多个实体，那么我们可以思考聚合内哪个对象有独立存在的意义并且可以和外部直接进行交互；</li><li>工厂（Factory）：类似于设计模式中的工厂模式。</li><li>仓储（Repository）：持久化到DB，管理对象，且只对聚合设计仓储。</li></ul></li></ul></li><li><p><a href="http://www.cnblogs.com/Leo_wl/p/3866629.html" target="_blank" rel="external">《领域驱动设计(DDD)实现之路》</a></p><ul><li>聚合：比如一辆汽车（Car）包含了引擎（Engine）、车轮（Wheel）和油箱（Tank）等组件，缺一不可。</li></ul></li><li><p><a href="http://www.hollischuang.com/archives/553" target="_blank" rel="external">《领域驱动设计系列（2）浅析VO、DTO、DO、PO的概念、区别和用处》</a></p></li></ul><h3 id="命令查询职责分离-CQRS"><a href="#命令查询职责分离-CQRS" class="headerlink" title="命令查询职责分离(CQRS)"></a>命令查询职责分离(CQRS)</h3><p>CQRS — Command Query Responsibility Seperation</p><ul><li><p><a href="https://www.cnblogs.com/cnblogsfans/p/4551990.html" target="_blank" rel="external">《领域驱动设计系列 (六)：CQRS》</a></p><ul><li>核心思想：读写分离（查询和更新在不同的方法中），不同的流程只是不同的设计方式，CQ代码分离，分布式环境中会有明显体现（有冗余数据的情况下），目的是为了高性能。</li></ul></li><li><p><a href="http://www.techweb.com.cn/network/system/2017-07-07/2553563.shtml" target="_blank" rel="external">《DDD CQRS架构和传统架构的优缺点比较》</a></p><ul><li>最终一致的设计理念；依赖于高可用消息中间件。</li></ul></li><li><p><a href="http://www.cnblogs.com/netfocus/p/4055346.html" target="_blank" rel="external">《CQRS架构简介》</a></p><ul><li>一个实现 CQRS 的抽象案例。</li></ul></li><li><p><a href="http://www.uml.org.cn/zjjs/201609221.asp" target="_blank" rel="external">《深度长文：我对CQRS/EventSourcing架构的思考》</a></p><ul><li>CQRS 模式分析 + 12306 抢票案例</li></ul></li></ul><h3 id="贫血，充血模型"><a href="#贫血，充血模型" class="headerlink" title="贫血，充血模型"></a>贫血，充血模型</h3><ul><li><a href="https://kb.cnblogs.com/page/520743/" target="_blank" rel="external">《贫血，充血模型的解释以及一些经验》</a><ul><li>失血模型：老子和儿子分别定义，相互不知道，二者实体定义中完全没有业务逻辑，通过外部Service进行关联。</li><li>贫血模型：老子知道儿子，儿子也知道老子；部分业务逻辑放到实体中；优点：各层单项依赖，结构清楚，易于维护；缺点：不符合OO思想，相比于充血模式，Service层较为厚重；</li><li>充血模型：和贫血模型类似，区别在于如何划分业务逻辑。优点：Service层比较薄，只充当Facade的角色，不和DAO打交道、复合OO思想；缺点：非单项依赖，DO和DAO之间双向依赖、和Service层的逻辑划分容易造成混乱。</li><li>肿胀模式：是一种极端情况，取消Service层、全部业务逻辑放在DO中；优点：符合OO思想、简化了分层；缺点：暴露信息过多、很多非DO逻辑也会强行并入DO。这种模式应该避免。</li><li>作者主张使用贫血模式。</li></ul></li></ul><h2 id="Actor-模式"><a href="#Actor-模式" class="headerlink" title="Actor 模式"></a>Actor 模式</h2><p>TODO</p><h2 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h2><h3 id="Reactor"><a href="#Reactor" class="headerlink" title="Reactor"></a>Reactor</h3><p>TODO</p><h3 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h3><p>TODO</p><h3 id="Vert-x"><a href="#Vert-x" class="headerlink" title="Vert.x"></a>Vert.x</h3><p>TODO</p><h2 id="DODAF2-0"><a href="#DODAF2-0" class="headerlink" title="DODAF2.0"></a>DODAF2.0</h2><ul><li><a href="http://www.360doc.com/content/16/0627/19/33945750_571201779.shtml" target="_blank" rel="external">《DODAF2.0方法论》</a></li><li><a href="http://blog.51cto.com/xiaoyong/1553164" target="_blank" rel="external">《DODAF2.0之能力视角如何落地》</a></li></ul><h2 id="Serverless"><a href="#Serverless" class="headerlink" title="Serverless"></a>Serverless</h2><p>无需过多关系服务器的服务架构理念。</p><ul><li><p><a href="http://www.jdon.com/soa/serverless.html" target="_blank" rel="external">《什么是Serverless无服务器架构？》</a></p><ul><li>Serverless 不代表出去服务器，而是去除对服务器运行状态的关心。</li><li>Serverless 代表一思维方式的转变，从“构建一套服务在一台服务器上，对对个事件进行响应转变为构建一个为服务器，来响应一个事件”。</li><li>Serverless 不代表某个具体的框架。</li></ul></li><li><p><a href="http://www.infoq.com/cn/news/2017/10/how-to-understand-serverless" target="_blank" rel="external">《如何理解Serverless？》</a></p><ul><li>依赖于 Baas （(Mobile) Backend as a Service） 和 Faas （Functions as a service）</li></ul></li></ul><h2 id="Service-Mesh"><a href="#Service-Mesh" class="headerlink" title="Service Mesh"></a>Service Mesh</h2><ul><li><a href="https://time.geekbang.org/article/2355" target="_blank" rel="external">《什么是Service Mesh？》</a></li><li><p><a href="https://www.jianshu.com/p/e23e3e74538e" target="_blank" rel="external">《初识 Service Mesh》</a></p></li><li><p><a href="https://time.geekbang.org/article/2355" target="_blank" rel="external">《什么是Service Mesh？》</a></p></li></ul><h1 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h1><h2 id="架构评审"><a href="#架构评审" class="headerlink" title="架构评审"></a>架构评审</h2><ul><li><a href="http://developer.51cto.com/art/201506/478486.htm" target="_blank" rel="external">《架构设计之如何评审架构设计说明书》</a></li><li><a href="https://blog.csdn.net/wireless_com/article/details/45935591" target="_blank" rel="external">《人人都是架构师：非功能性需求》</a></li></ul><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><ul><li><a href="http://www.infoq.com/cn/articles/architect-12-rules-complete/" target="_blank" rel="external">《架构之重构的12条军规》</a></li></ul><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ul><li><a href="https://github.com/alibaba/p3c" target="_blank" rel="external">《阿里巴巴Java开发手册》</a></li></ul><h2 id="代码-Review"><a href="#代码-Review" class="headerlink" title="代码 Review"></a>代码 Review</h2><p>制度还是制度!<br>另外，每个公司需要根据自己的需求和目标制定自己的 check list</p><ul><li><p><a href="http://www.sohu.com/a/229745352_181657" target="_blank" rel="external">《为什么你做不好 Code Review？》</a></p><ul><li>代码 review 做的好，在于制度建设。</li></ul></li><li><p><a href="https://blog.csdn.net/uxyheaven/article/details/49773619" target="_blank" rel="external">《从零开始Code Review》</a></p></li><li><p><a href="https://www.cnblogs.com/zuoping/p/5477047.html" target="_blank" rel="external">《Code Review Checklist》</a></p></li><li><p><a href="https://dzone.com/articles/java-code-review-checklist" target="_blank" rel="external">《Java Code Review Checklist》</a></p></li><li><p><a href="https://blog.csdn.net/legend0011/article/details/45585575" target="_blank" rel="external">《如何用 gitlab 做 code review》</a></p></li></ul><h2 id="RUP"><a href="#RUP" class="headerlink" title="RUP"></a>RUP</h2><ul><li><a href="https://blog.csdn.net/apanious/article/details/51011946" target="_blank" rel="external">《运用RUP 4+1视图方法进行软件架构设计》</a></li></ul><h2 id="看板管理"><a href="#看板管理" class="headerlink" title="看板管理"></a>看板管理</h2><ul><li><a href="https://blog.csdn.net/tkchen/article/details/51637643" target="_blank" rel="external">《说说看板在项目中的应用》</a></li></ul><h2 id="SCRUM"><a href="#SCRUM" class="headerlink" title="SCRUM"></a>SCRUM</h2><p>SCRUM - 争球</p><ul><li>3个角色:Product Owner(PO) 产品负责人;Scrum Master（SM），推动Scrum执行;Team 开发团队。</li><li>3个工件：Product Backlog 产品TODOLIST，含优先级;Sprint Backlog 功能开发 TODO LIST；燃尽图；</li><li>五个价值观：专注、勇气、公开、承诺、尊重。</li></ul><ul><li><p><a href="https://blog.csdn.net/inny100_100/article/details/54633757" target="_blank" rel="external">《敏捷项目管理流程-Scrum框架最全总结！》</a></p></li><li><p><a href="https://blog.csdn.net/superkunkun/article/details/52951142" target="_blank" rel="external">《敏捷其实很简单3—-敏捷方法之scrum》</a></p></li></ul><h2 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h2><p>TODO</p><h2 id="极限编程（XP）"><a href="#极限编程（XP）" class="headerlink" title="极限编程（XP）"></a>极限编程（XP）</h2><p>XP - eXtreme Programming</p><ul><li><p><a href="http://www.woshipm.com/pmd/406917.html" target="_blank" rel="external">《主流敏捷开发方法：极限编程XP》</a></p><ul><li>是一种指导开发人员的方法论。</li><li><p>4大价值：</p><ul><li>沟通：鼓励口头沟通，提高效率。</li><li>简单：够用就好。</li><li>反馈：及时反馈、通知相关人。</li><li>勇气：提倡拥抱变化，敢于重构。</li></ul></li><li><p>5个原则：快速反馈、简单性假设、逐步修改、提倡更改（小步快跑）、优质工作（保证质量的前提下保证小步快跑）。</p></li><li>5个工作：阶段性冲刺；冲刺计划会议；每日站立会议；冲刺后review；回顾会议。</li></ul></li></ul><h2 id="结对编程"><a href="#结对编程" class="headerlink" title="结对编程"></a>结对编程</h2><p>边写码，边review。能够增强代码质量、减少bug。</p><ul><li><a href="http://www.baike.com/wiki/%E7%BB%93%E5%AF%B9%E7%BC%96%E7%A8%8B" target="_blank" rel="external">《结对编程》</a></li></ul><h2 id="PDCA-循环质量管理"><a href="#PDCA-循环质量管理" class="headerlink" title="PDCA 循环质量管理"></a>PDCA 循环质量管理</h2><p>P——PLAN 策划，D——DO 实施，C——CHECK 检查，A——ACT 改进</p><ul><li><a href="http://www.baike.com/wiki/PDCA" target="_blank" rel="external">《PDCA》</a></li></ul><h2 id="FMEA管理模式"><a href="#FMEA管理模式" class="headerlink" title="FMEA管理模式"></a>FMEA管理模式</h2><p>TODO</p><h1 id="通用业务术语"><a href="#通用业务术语" class="headerlink" title="通用业务术语"></a>通用业务术语</h1><p>TODO</p><h1 id="技术趋势"><a href="#技术趋势" class="headerlink" title="技术趋势"></a>技术趋势</h1><p>TODO</p><h1 id="政策、法规"><a href="#政策、法规" class="headerlink" title="政策、法规"></a>政策、法规</h1><p>TODO</p><h2 id="法律"><a href="#法律" class="headerlink" title="法律"></a>法律</h2><h3 id="严格遵守刑法253法条"><a href="#严格遵守刑法253法条" class="headerlink" title="严格遵守刑法253法条"></a>严格遵守刑法253法条</h3><p>我国刑法第253条之一规定：</p><blockquote><ul><li>国家机关或者金融、电信、交通、教育、医疗等单位的工作人员，违反国家规定，将本单位在履行职责或者提供服务过程中获得的公民个人信息，出售或者非法提供给他人，情节严重的，处3年以下有期徒刑或者拘役，并处或者单处罚金。</li><li>窃取或者以其他方法非法获取上述信息，情节严重的，依照前款的规定处罚。 </li><li>单位犯前两款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照各该款的规定处罚。</li></ul></blockquote><p>最高人民法院、最高人民检察院关于执行《中华人民共和国刑法》确定罪名的补充规定（四）规定：触犯刑法第253条之一第1款之规定，构成“出售、非法提供公民个人信息罪”；触犯刑法第253条之一第2款之规定，构成“非法获取公民个人信息罪”</p><ul><li><a href="https://baike.baidu.com/item/%E9%9D%9E%E6%B3%95%E8%8E%B7%E5%8F%96%E5%85%AC%E6%B0%91%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%BD%AA" target="_blank" rel="external">《非法获取公民个人信息罪》</a></li></ul><h1 id="架构师素质"><a href="#架构师素质" class="headerlink" title="架构师素质"></a>架构师素质</h1><ul><li><p><a href="http://hellojava.info/?p=430" target="_blank" rel="external">《架构师画像》</a></p><ul><li>业务理解和抽象能力</li><li>NB的代码能力</li><li>全面：1. 在面对业务问题上，架构师脑海里是否会浮现出多种技术方案；2. 在做系统设计时是否考虑到了足够多的方方面面；3. 在做系统设计时是否考虑到了足够多的方方面面； </li><li>全局：是否考虑到了对上下游的系统的影响。</li><li>权衡：权衡投入产出比；优先级和节奏控制；</li></ul></li><li><p><a href="http://www.infoq.com/cn/articles/architecture-optimization-and-design-the-architect-must-know" target="_blank" rel="external">《关于架构优化和设计，架构师必须知道的事情》</a></p><ul><li>要去考虑的细节：模块化、轻耦合、无共享架构；减少各个组件之前的依赖、注意服务之间依赖所有造成的链式失败及影响等。</li><li>基础设施、配置、测试、开发、运维综合考虑。</li><li>考虑人、团队、和组织的影响。 </li></ul></li><li><p><a href="https://www.zhihu.com/question/19841397" target="_blank" rel="external">《如何才能真正的提高自己，成为一名出色的架构师？》</a> </p></li><li><p><a href="https://blog.csdn.net/sanbingyutuoniao123/article/details/54144129" target="_blank" rel="external">《架构师的必备素质和成长途径》</a></p><ul><li>素质：业务理解、技术广度、技术深度、丰富经验、沟通能力、动手能力、美学素养。</li><li>成长路径：2年积累知识、4年积累技能和组内影响力、7年积累部门内影响力、7年以上积累跨部门影响力。 </li></ul></li><li><p><a href="http://blog.51cto.com/frankfan/1248401" target="_blank" rel="external">《架构设计师—你在哪层楼？》</a></p><ul><li>第一层的架构师看到的只是产品本身</li><li>第二层的架构师不仅看到自己的产品，还看到了整体的方案</li><li>第三层的架构师看到的是商业价值 </li></ul></li></ul><h1 id="团队管理"><a href="#团队管理" class="headerlink" title="团队管理"></a>团队管理</h1><p>TODO</p><h2 id="招聘"><a href="#招聘" class="headerlink" title="招聘"></a>招聘</h2><h1 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h1><h2 id="行业资讯"><a href="#行业资讯" class="headerlink" title="行业资讯"></a>行业资讯</h2><ul><li><a href="http://36kr.com/" target="_blank" rel="external">36kr</a></li><li><a href="http://www.techweb.com.cn/" target="_blank" rel="external">Techweb</a></li></ul><h2 id="公众号列表"><a href="#公众号列表" class="headerlink" title="公众号列表"></a>公众号列表</h2><p>TODO</p><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><h3 id="团队博客"><a href="#团队博客" class="headerlink" title="团队博客"></a>团队博客</h3><ul><li><a href="http://jm.taobao.org/" target="_blank" rel="external">阿里中间件博客</a></li><li><a href="https://tech.meituan.com" target="_blank" rel="external">美团点评技术团队博客</a></li></ul><h3 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h3><ul><li><a href="http://www.ruanyifeng.com/" target="_blank" rel="external">阮一峰的网络日志</a></li><li><a href="https://coolshell.cn/" target="_blank" rel="external">酷壳 - COOLSHELL-陈皓</a></li><li><a href="http://hellojava.info/" target="_blank" rel="external">hellojava-阿里毕玄</a></li><li><a href="http://cmsblogs.com/" target="_blank" rel="external">Cm’s Blog</a></li><li><a href="http://blog.didispace.com/" target="_blank" rel="external">程序猿DD-翟永超-《Spring Cloud微服务实战》作者</a></li></ul><h2 id="综合门户、社区"><a href="#综合门户、社区" class="headerlink" title="综合门户、社区"></a>综合门户、社区</h2><p><strong>国内：</strong></p><ul><li><a href="http://csdn.net" target="_blank" rel="external">CSDN</a><br>   老牌技术社区、不必解释。</li><li><a href="http://www.51cto.com/" target="_blank" rel="external">51cto.com</a></li><li><a href="http://www.iteye.com/" target="_blank" rel="external">ITeye</a><ul><li>偏 Java 方向 </li></ul></li><li><a href="https://www.cnblogs.com" target="_blank" rel="external">博客园</a></li><li><a href="http://www.tom.net/" target="_blank" rel="external">ChinaUnix</a><ul><li>偏 Linux 方向 </li></ul></li><li><a href="https://www.oschina.net/" target="_blank" rel="external">开源中国社区</a></li><li><a href="http://www.open-open.com/" target="_blank" rel="external">深度开源</a></li><li><p><a href="http://www.jobbole.com/" target="_blank" rel="external">伯乐在线</a></p><ul><li>涵盖 IT职场、Web前端、后端、移动端、数据库等方面内容，偏技术端。</li></ul></li><li><p><a href="http://www.itpub.net/" target="_blank" rel="external">ITPUB</a></p></li><li><a href="https://cloud.tencent.com/developer/column" target="_blank" rel="external">腾讯云— 云+社区</a></li><li><a href="https://yq.aliyun.com/" target="_blank" rel="external">阿里云— 云栖社区</a></li><li><a href="https://www.ibm.com/developerworks/cn/" target="_blank" rel="external">IBM DeveloperWorks</a></li><li><a href="https://toutiao.io/" target="_blank" rel="external">开发者头条</a></li><li><a href="http://www.linkedkeeper.com" target="_blank" rel="external">LinkedKeeper</a></li></ul><p><strong>国外：</strong></p><ul><li><a href="https://dzone.com" target="_blank" rel="external">DZone</a></li><li><a href="https://www.reddit.com" target="_blank" rel="external">Reddit</a></li></ul><h2 id="问答、讨论类社区"><a href="#问答、讨论类社区" class="headerlink" title="问答、讨论类社区"></a>问答、讨论类社区</h2><ul><li><a href="https://segmentfault.com" target="_blank" rel="external">segmentfault</a><ul><li>问答+专栏 </li></ul></li><li><a href="https://www.zhihu.com/" target="_blank" rel="external">知乎</a></li><li><a href="https://stackoverflow.com/" target="_blank" rel="external">stackoverflow</a></li></ul><h2 id="行业数据分析"><a href="#行业数据分析" class="headerlink" title="行业数据分析"></a>行业数据分析</h2><ul><li><a href="http://report.iresearch.cn/" target="_blank" rel="external">艾瑞网</a></li><li><p><a href="https://www.questmobile.com.cn" target="_blank" rel="external">QUEST MOBILE</a></p></li><li><p><a href="http://data.stats.gov.cn/" target="_blank" rel="external">国家数据</a></p></li><li><p><a href="http://www.talkingdata.com/" target="_blank" rel="external">TalkingData</a></p></li></ul><h2 id="专项网站"><a href="#专项网站" class="headerlink" title="专项网站"></a>专项网站</h2><ul><li><p>测试:</p><ul><li><a href="http://www.ltesting.net/" target="_blank" rel="external">领测国际</a> </li><li><a href="https://www.testwo.com/" target="_blank" rel="external">测试窝</a></li><li><a href="https://testerhome.com" target="_blank" rel="external">TesterHome</a></li></ul></li><li><p>运维:</p><pre><code>* [运维派](http://www.yunweipai.com/) * [Abcdocker](https://www.abcdocker.com/)</code></pre></li><li><p>Java:</p><ul><li><a href="http://www.importnew.com/" target="_blank" rel="external">ImportNew</a><ul><li>专注于 Java 技术分享</li></ul></li><li><a href="https://howtodoinjava.com/" target="_blank" rel="external">HowToDoInJava</a><ul><li>英文博客</li></ul></li></ul></li><li><p>安全</p><ul><li><a href="https://www.2cto.com/" target="_blank" rel="external">红黑联盟</a> </li><li><a href="http://www.freebuf.com/" target="_blank" rel="external">FreeBuf</a></li></ul></li><li><p>大数据</p><ul><li><a href="http://www.thebigdata.cn/" target="_blank" rel="external">中国大数据</a> </li></ul></li><li><p>其他专题网站：</p><ul><li><a href="http://www.infoq.com/cn/" target="_blank" rel="external">InfoQ</a><ul><li>偏重于基础架构、运维方向</li></ul></li><li><a href="http://www.dockerinfo.net/" target="_blank" rel="external">DockerInfo</a><ul><li>专注于 Docker 应用及咨询、教程的网站</li></ul></li><li><a href="https://www.linuxidc.com/" target="_blank" rel="external">Linux公社</a><ul><li>Linux 主题社区</li></ul></li></ul></li></ul><h2 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h2><ul><li><a href="https://github.com/TeamStuQ/skill-map" target="_blank" rel="external">程序员技能图谱</a></li></ul><h2 id="推荐参考书"><a href="#推荐参考书" class="headerlink" title="推荐参考书"></a>推荐参考书</h2><h3 id="在线电子书"><a href="#在线电子书" class="headerlink" title="在线电子书"></a>在线电子书</h3><ul><li><a href="https://github.com/forezp/SpringCloudLearning" target="_blank" rel="external">《深入理解Spring Cloud与微服务构建》</a></li></ul><ul><li><a href="http://techforum-img.cn-hangzhou.oss-pub.aliyun-inc.com/1523849261680/AliTech101_RD.pdf" target="_blank" rel="external">《阿里技术参考图册-研发篇》</a></li><li><p><a href="http://techforum-img.cn-hangzhou.oss-pub.aliyun-inc.com/1523848064814/AliTech101_Algorithms.pdf" target="_blank" rel="external">《阿里技术参考图册-算法篇》</a></p></li><li><p><a href="http://dpurl.cn/n/1lqcX" target="_blank" rel="external">《2018美团点评技术年货（合辑）》70M</a></p></li><li><p><a href="http://www.infoq.com/cn/architect/" target="_blank" rel="external">InfoQ《架构师》月刊</a></p></li><li><p><a href="https://www.w3cschool.cn/architectroad/" target="_blank" rel="external">《架构师之路》</a></p></li></ul><h3 id="纸质书"><a href="#纸质书" class="headerlink" title="纸质书"></a>纸质书</h3><h4 id="开发方面"><a href="#开发方面" class="headerlink" title="开发方面"></a>开发方面</h4><ul><li>《阿里巴巴Java开发手册》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=BfL5CR" target="_blank" rel="external">详情</a></li></ul><h4 id="架构方面"><a href="#架构方面" class="headerlink" title="架构方面"></a>架构方面</h4><ul><li>《软件架构师的12项修炼：技术技能篇》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=rTlo0m" target="_blank" rel="external">详情</a></li><li>《架构之美》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=1KECBZ" target="_blank" rel="external">详情</a> </li><li>《分布式服务架构》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=hkzqtK" target="_blank" rel="external">详情</a> </li><li>《聊聊架构》 <a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=A8Nd6Z" target="_blank" rel="external">详情</a> </li><li>《云原生应用架构实践》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=D4WCpd" target="_blank" rel="external">详情</a> </li><li>《亿级流量网站架构核心技术》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=Rdmd21" target="_blank" rel="external">详情</a></li><li>《淘宝技术这十年》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=CoUdGG" target="_blank" rel="external">详情</a></li><li><p>《企业IT架构转型之道-中台战略思想与架构实战》 <a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=BxS6eI" target="_blank" rel="external">详情</a> </p></li><li><p>《高可用架构（第1卷）》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=BcjUwS" target="_blank" rel="external">详情</a> </p></li></ul><h4 id="技术管理方面"><a href="#技术管理方面" class="headerlink" title="技术管理方面"></a>技术管理方面</h4><ul><li>《CTO说》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=Gl3QAo" target="_blank" rel="external">详情</a> </li><li>《技术管理之巅》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=MeloLt" target="_blank" rel="external">详情</a></li><li>《网易一千零一夜：互联网产品项目管理实战》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=qPuqMg" target="_blank" rel="external">详情</a> </li></ul><h4 id="基础理论-1"><a href="#基础理论-1" class="headerlink" title="基础理论"></a>基础理论</h4><ul><li>《数学之美》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=0seUpO" target="_blank" rel="external">详情</a> </li><li>《编程珠玑》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=I7jj9r" target="_blank" rel="external">详情</a> </li></ul><h4 id="工具方面"><a href="#工具方面" class="headerlink" title="工具方面"></a>工具方面</h4><p>TODO</p><h4 id="大数据方面"><a href="#大数据方面" class="headerlink" title="大数据方面"></a>大数据方面</h4><h1 id="技术资源"><a href="#技术资源" class="headerlink" title="技术资源"></a>技术资源</h1><h2 id="开源资源"><a href="#开源资源" class="headerlink" title="开源资源"></a>开源资源</h2><ul><li><p><a href="https://github.com" target="_blank" rel="external">github</a></p></li><li><p><a href="https://www.apache.org/index.html" target="_blank" rel="external">Apache 软件基金会</a></p></li></ul><h2 id="手册、文档、教程"><a href="#手册、文档、教程" class="headerlink" title="手册、文档、教程"></a>手册、文档、教程</h2><p><strong>国内：</strong></p><ul><li><a href="http://w3cschool.cn" target="_blank" rel="external">W3Cschool</a> </li><li><p><a href="http://www.runoob.com/" target="_blank" rel="external">Runoob.com</a></p><ul><li>HTML 、 CSS、XML、Java、Python、PHP、设计模式等入门手册。</li></ul></li><li><p><a href="https://love2.io/" target="_blank" rel="external">Love2.io</a></p><ul><li>很多很多中文在线电子书，是一个全新的开源技术文档分享平台。</li></ul></li><li><a href="http://gitbook.cn/" target="_blank" rel="external">gitbook.cn</a><ul><li>付费电子书。 </li></ul></li><li><a href="http://www.apachecn.org/" target="_blank" rel="external">ApacheCN</a><ul><li>AI、大数据方面系列中文文档。</li></ul></li></ul><p><strong>国外：</strong></p><ul><li><a href="http://www.quickcode.co/" target="_blank" rel="external">Quick Code</a><ul><li>免费在线技术教程。</li></ul></li><li><a href="http://gitbook.com" target="_blank" rel="external">gitbook.com</a><ul><li>有部分中文电子书。</li></ul></li><li><a href="https://www.cheatography.com/" target="_blank" rel="external">Cheatography</a><ul><li>Cheat Sheets 大全，单页文档网站。</li></ul></li><li><a href="https://www.tutorialspoint.com/index.htm" target="_blank" rel="external">Tutorialspoint</a><ul><li>知名教程网站，提供Java、Python、JS、SQL、大数据等高质量入门教程。</li></ul></li></ul><h2 id="在线课堂"><a href="#在线课堂" class="headerlink" title="在线课堂"></a>在线课堂</h2><ul><li><a href="http://www.xuetuwuyou.com/" target="_blank" rel="external">学徒无忧</a></li><li><a href="https://time.geekbang.org/" target="_blank" rel="external">极客时间</a></li><li><a href="https://segmentfault.com/lives" target="_blank" rel="external">segmentfault</a></li><li><a href="https://new.stuq.org/course/explore" target="_blank" rel="external">斯达克学院</a></li><li><a href="http://nowcoder.com" target="_blank" rel="external">牛客网</a></li><li><a href="https://www.jikexueyuan.com/" target="_blank" rel="external">极客学院</a></li><li><a href="http://edu.51cto.com/" target="_blank" rel="external">51CTO学院</a></li></ul><h2 id="会议、活动"><a href="#会议、活动" class="headerlink" title="会议、活动"></a>会议、活动</h2><ul><li><a href="http://www.infoq.com/cn/qcon/" target="_blank" rel="external">QCon</a></li><li><a href="https://archsummit.com" target="_blank" rel="external">ArchSummit</a></li><li><a href="http://www.thegitc.com/" target="_blank" rel="external">GITC全球互联网技术大会</a></li></ul><p><strong>活动发布平台:</strong> </p><ul><li><a href="http://www.huodongxing.com/" target="_blank" rel="external">活动行</a></li></ul><h2 id="常用APP"><a href="#常用APP" class="headerlink" title="常用APP"></a>常用APP</h2><ul><li><a href="https://time.geekbang.org" target="_blank" rel="external">极客时间</a></li><li><a href="https://www.igetget.com" target="_blank" rel="external">得到</a></li></ul><h2 id="找工作"><a href="#找工作" class="headerlink" title="找工作"></a>找工作</h2><ul><li><a href="https://www.zhipin.com" target="_blank" rel="external">Boss直聘</a></li><li><a href="https://www.lagou.com" target="_blank" rel="external">拉勾网</a></li><li><a href="https://www.liepin.com" target="_blank" rel="external">猎聘</a></li><li><a href="https://cn.100offer.com/" target="_blank" rel="external">100Offer</a></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://s.geekbang.org/" target="_blank" rel="external">极客搜索</a><ul><li>技术文章搜索引擎。</li></ul></li></ul><h2 id="代码托管"><a href="#代码托管" class="headerlink" title="代码托管"></a>代码托管</h2><ul><li><a href="https://coding.net" target="_blank" rel="external">Coding</a></li><li><a href="https://gitee.com/" target="_blank" rel="external">码云</a></li></ul><h2 id="文件服务"><a href="#文件服务" class="headerlink" title="文件服务"></a>文件服务</h2><ul><li>七牛</li><li>又拍云</li></ul><h2 id="综合云服务商"><a href="#综合云服务商" class="headerlink" title="综合云服务商"></a>综合云服务商</h2><ul><li>阿里云</li><li><a href="https://cloud.tencent.com/redirect.php?redirect=1012&amp;cps_key=c2665015d90871c0cb20fef91b7afc3c" target="_blank" rel="external">腾讯云</a></li><li>百度云</li><li>新浪云</li><li>金山云</li><li><a href="https://amazonaws-china.com/cn/" target="_blank" rel="external">亚马逊云(AWS)</a></li><li><a href="https://cloud.google.com/?hl=zh-cn" target="_blank" rel="external">谷歌云</a></li><li><a href="https://azure.microsoft.com/zh-cn/" target="_blank" rel="external">微软云</a></li></ul><h3 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h3><ul><li><a href="http://linode.com" target="_blank" rel="external">Linode</a></li><li><a href="https://www.digitalocean.com" target="_blank" rel="external">DigitalOcean</a></li><li><a href="https://www.vultr.com/" target="_blank" rel="external">Vultr</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;原文地址&lt;/code&gt;&lt;a href=&quot;https://github.com/xingshaocheng/architect-awesome&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/xingshaoc
      
    
    </summary>
    
    
      <category term="学习资料" scheme="lovemefan.win/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>Python小实践   微博爬虫之数据分析</title>
    <link href="lovemefan.win/post/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python%20%E8%AF%8D%E4%BA%91/index.html%20%202018/06/20/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python%20%E8%AF%8D%E4%BA%91/"/>
    <id>lovemefan.win/post/Python学习笔记/python 词云/index.html  2018/06/20/Python学习笔记/python 词云/</id>
    <published>2018-06-20T03:39:00.000Z</published>
    <updated>2018-09-05T01:34:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-词云"><a href="#python-词云" class="headerlink" title="python 词云"></a>python 词云</h1><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h2><h3 id="1-1-下载相关库"><a href="#1-1-下载相关库" class="headerlink" title="1.1 下载相关库"></a>1.1 下载相关库</h3><ul><li>jieba (用于分词)</li><li>matplotlib</li><li>wordcloud<br><code>注意事项:</code><br>如果相关库安装失败,请到<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a>下载相应包手动安装,注意python版本号与操作系统位数,如下图,例如python3.6,64位操作系统则选择<code>cp36-win_amd64.whl</code>文件下载<br><img src="http://oskhhyaq3.bkt.clouddn.com/img/180905/6Ch55mcee6.png?imageslim" alt="mark"><h3 id="使用命令行安装相关库"><a href="#使用命令行安装相关库" class="headerlink" title="使用命令行安装相关库"></a>使用命令行安装相关库</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install 包名或本地包路径</div></pre></td></tr></table></figure></li></ul><h2 id="2-wordcloud"><a href="#2-wordcloud" class="headerlink" title="2. wordcloud"></a>2. wordcloud</h2><blockquote><p>wordcloud基于Python的词云生成类库,很好用,而且功能强大<br><a href="https://github.com/amueller/word_cloud" target="_blank" rel="external">Github</a><br><a href="https://amueller.github.io/word_cloud" target="_blank" rel="external">官方文档</a><br><a href="https://blog.csdn.net/fly910905/article/details/77763086" target="_blank" rel="external">参考博文</a></p><h2 id="3-小试牛刀"><a href="#3-小试牛刀" class="headerlink" title="3. 小试牛刀"></a>3. 小试牛刀</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="keyword">import</span> jieba.analyse</div><div class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</div><div class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread</div><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</div><div class="line"></div><div class="line"><span class="comment"># mpl.use('TkAgg')</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">keywords</span><span class="params">(mblogs)</span>:</span></div><div class="line">    text = []</div><div class="line">    <span class="keyword">for</span> blog <span class="keyword">in</span> mblogs:</div><div class="line">        keyword = jieba.analyse.extract_tags(blog[<span class="string">'text'</span>])</div><div class="line">        text.extend(keyword)</div><div class="line">    <span class="keyword">return</span> text</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_img</span><span class="params">(texts, img_file)</span>:</span></div><div class="line">    data = <span class="string">' '</span>.join(text <span class="keyword">for</span> text <span class="keyword">in</span> texts)</div><div class="line">    image_coloring = imread(img_file)</div><div class="line">    wc = WordCloud(</div><div class="line">        background_color=<span class="string">'white'</span>,</div><div class="line">        mask=image_coloring,</div><div class="line">        max_font_size=<span class="number">500</span>,  <span class="comment"># 设置字体最大值</span></div><div class="line">        font_path=<span class="string">'Fonts/HYC6GFM.TTF'</span>,</div><div class="line">        random_state = <span class="number">30</span>  <span class="comment"># 设置有多少种随机生成状态，即有多少种配色方案</span></div><div class="line">    )</div><div class="line">    wc.generate(data)</div><div class="line">    <span class="comment"># plt.figure()</span></div><div class="line">    <span class="comment"># plt.imshow(wc, interpolation="bilinear")</span></div><div class="line">    <span class="comment"># plt.axis("off")</span></div><div class="line">    <span class="comment"># plt.show()</span></div><div class="line"></div><div class="line">    wc.to_file(img_file.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'_wc.png'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    keyword = <span class="string">'shida'</span></div><div class="line">    mblogs = json.loads(open(<span class="string">'result_&#123;&#125;.json'</span>.format(keyword), <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>).read())</div><div class="line">    print(<span class="string">'微博总数：'</span>, len(mblogs))</div><div class="line"></div><div class="line">    words = []</div><div class="line">    <span class="keyword">for</span> blog <span class="keyword">in</span> mblogs:</div><div class="line">        words.extend(jieba.analyse.extract_tags(blog[<span class="string">'text'</span>]))</div><div class="line"></div><div class="line">    print(<span class="string">"总词数："</span>, len(words))</div><div class="line">    print(words)</div><div class="line">    gen_img(words, <span class="string">'love.jpg'</span>)</div></pre></td></tr></table></figure></blockquote><p>效果图</p><p><img src="http://oskhhyaq3.bkt.clouddn.com/img/180905/EhLH9dKA6g.png?imageslim" alt="mark"><br><img src="http://oskhhyaq3.bkt.clouddn.com/img/180905/02i70841eb.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-词云&quot;&gt;&lt;a href=&quot;#python-词云&quot; class=&quot;headerlink&quot; title=&quot;python 词云&quot;&gt;&lt;/a&gt;python 词云&lt;/h1&gt;&lt;h2 id=&quot;1-前期准备&quot;&gt;&lt;a href=&quot;#1-前期准备&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="lovemefan.win/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="编程语言" scheme="lovemefan.win/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="lovemefan.win/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python小实践   下载漫画</title>
    <link href="lovemefan.win/post/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E5%8F%96%E5%89%8D%E5%87%86%E5%A4%87/index.html%20%202018/06/12/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E5%8F%96%E5%89%8D%E5%87%86%E5%A4%87/"/>
    <id>lovemefan.win/post/Python学习笔记/爬取前准备/index.html  2018/06/12/Python学习笔记/爬取前准备/</id>
    <published>2018-06-12T12:49:00.000Z</published>
    <updated>2018-09-04T03:06:25.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬取前准备"><a href="#爬取前准备" class="headerlink" title="爬取前准备"></a>爬取前准备</h1><p><a href="https://github.com/lovemefan/python_tools" target="_blank" rel="external">GitHub项目</a><br>目标网站:<a href="http://www.omanhua.com/comic/17521/" target="_blank" rel="external">http://www.omanhua.com/comic/17521/</a><br><img src="http://oskhhyaq3.bkt.clouddn.com/img/180612/jm0j3bkaiB.png?imageslim" alt="mark"></p><h2 id="分析网页"><a href="#分析网页" class="headerlink" title="分析网页"></a>分析网页</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"subBookList"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'/comic/17521/366691/'</span> <span class="attr">title</span>=<span class="string">'332'</span> <span class="attr">target</span>=<span class="string">'_blank'</span> <span class="attr">class</span>=<span class="string">'new'</span>&gt;</span>332<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'/comic/17521/364901/'</span> <span class="attr">title</span>=<span class="string">'331'</span> <span class="attr">target</span>=<span class="string">'_blank'</span> <span class="attr">class</span>=<span class="string">'new'</span>&gt;</span>331<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'/comic/17521/364900/'</span> <span class="attr">title</span>=<span class="string">'腾讯动漫6周年福利活动！'</span> <span class="attr">target</span>=<span class="string">'_blank'</span> <span class="attr">class</span>=<span class="string">'new'</span>&gt;</span>腾讯动漫6周年福利活动！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'/comic/17521/364899/'</span> <span class="attr">title</span>=<span class="string">'330。他们也是我们'</span> <span class="attr">target</span>=<span class="string">'_blank'</span> <span class="attr">class</span>=<span class="string">'new'</span>&gt;</span>330。他们也是我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'/comic/17521/364730/'</span> <span class="attr">title</span>=<span class="string">'329'</span> <span class="attr">target</span>=<span class="string">'_blank'</span> <span class="attr">class</span>=<span class="string">'new'</span>&gt;</span>329<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><p>这里很明显 每个&amp;lta&amp;gt标签的href属性的值就是具体每一话的url<br>先点进一话的页面看看<br><a href="http://www.omanhua.com/comic/17521/366691/" target="_blank" rel="external">http://www.omanhua.com/comic/17521/366691/</a></p><h2 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h2><p><img src="http://oskhhyaq3.bkt.clouddn.com/img/180612/aJDLmKLIc8.png?imageslim" alt="mark"><br>哈哈,没错这个,这是当前显示的一张漫画.但是只有一张.再看看下一张<br><img src="http://oskhhyaq3.bkt.clouddn.com/img/180612/iij3m7cKh7.png?imageslim" alt="mark"><br>对比URL路径,我特么..,没有丝毫规律,陷入了僵局…,于是没有了后文.</p><p>我就像看个漫画嘛,要不是腾讯收费,我&amp;<em>%^</em>&amp;%.<br>但我还没有放弃,我打算看看js代码里有没有请求什么的痕迹<br>就在我垂头顿足的时候,我发现了再网页里的一段神奇的代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="xml">  var pVars = pVars || &#123;&#125;; var uzmh = uzmh || &#123;&#125;;eval(function(p,a,c,k,e,d)</span></div><div class="line">&#123;</div><div class="line">e=function(c)&#123;return(c</div><div class="line">    <span class="tag">&lt;<span class="name">a?"":e(parseInt(c</span>/<span class="attr">a</span>)))+((<span class="attr">c</span>=<span class="string">c%a)</span>&gt;</span>35?String.fromCharCode(c+29):c.toString(36))&#125;;</div><div class="line">if(!''.replace(/^/,String))&#123;while(c--)d[e(c)]=k[c]||e(c);k=[function(e)&#123;return d[e]&#125;];</div><div class="line">e=function()&#123;return'\\w+'&#125;;c=1;&#125;;</div><div class="line">while(c--)</div><div class="line">if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);</div><div class="line">return p;</div><div class="line">&#125;('h i=&#123;"g":1,"e":"4","f":"1.0","m":"/n/1/2/l.j","k":2,"6":"3","7":["8.0","c.0","5.0","b.0","9.0","a.0","d.0","o.0","D.0","E.0","C.0","A.0","B.0","I.0","J.0","H.0","F.0","G.0","z.0","s.0","t.0","r.0"],"p":q,"x":y,"w":"/u/v/4/3/"&#125;||&#123;&#125;;</div><div class="line">',46,46,'jpg|17521|366691|332|一人之下|388594b38e|cname|files|38ba1443ba|38f89724c3|381bce4fb2|3886aef5b2|38b823d13d|3857d21ce5|bname|bpic|bid|var|cInfo|html|cid|index|burl|comic|38779d6852|finished|false|3971856aff|399a8af80e|39cc4b3915|tu|undefined|path|len|22|39f92a9dae|387ed1275c|38e5f2512a|385573db27|387ab75347|3866af1df0|38d7d1fc53|382c0123f1|386a165c3e|3859ad824b|38e85b3b5a'.split('|'),0,&#123;&#125;))</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="小有成就"><a href="#小有成就" class="headerlink" title="小有成就"></a>小有成就</h2><p><img src="http://oskhhyaq3.bkt.clouddn.com/img/180612/G5L5cHjgFf.png?imageslim" alt="mark"><br>通过一比对<br>哇!!!我抑制不住内心的激动,这不就是图片名吗?<br>以上代码为例,包含了漫画编号(17521),漫画集数编号(36691),漫画集数(332),漫画名(一人之下),当前集的漫画图片数(len=22),以及每张图片的文件名(比如38ba1443ba.jpg)<br>大功告成!!!</p><h1 id="爬取图片"><a href="#爬取图片" class="headerlink" title="爬取图片"></a>爬取图片</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>有之前准备已经可以再页面上得到每一话的URL,每一话中的图片URL,剩下的就是对页面里的数据提取,分别下载了</p><h2 id="python-代码"><a href="#python-代码" class="headerlink" title="python 代码"></a>python 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- codeing: utf-8 -*-</span></div><div class="line"><span class="comment"># @Time:2018/3/13 22:20</span></div><div class="line"><span class="comment"># @Author:lovemefan</span></div><div class="line"><span class="comment"># @File:一人之下漫画爬虫.py</span></div><div class="line"><span class="comment"># @Software:PyCharm</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> imp <span class="keyword">import</span> reload</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> requests</div><div class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</div><div class="line"></div><div class="line">requestSession = requests.session()</div><div class="line"><span class="comment"># 保存一张图片</span></div><div class="line"><span class="comment"># 输入参数imgUrl 图片路径,imgPath 保存路径</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">savePicture</span><span class="params">(imgUrl, imgPath)</span>:</span></div><div class="line">    response = requests.get(imgUrl)</div><div class="line">    codimg = response.content</div><div class="line">    fn = open(imgPath, <span class="string">'wb'</span>)</div><div class="line">    fn.write(codimg)</div><div class="line">    fn.close()</div><div class="line"></div><div class="line"><span class="comment"># 一人之下的漫画路径</span></div><div class="line">url = <span class="string">"http://www.omanhua.com/comic/17521/"</span></div><div class="line">html = requests.get(url)</div><div class="line">html.encoding = <span class="string">'UTF-8'</span></div><div class="line"><span class="comment"># print(html.text)</span></div><div class="line"><span class="comment"># 先获取每一话</span></div><div class="line"><span class="comment"># 先将数据块取出</span></div><div class="line">bookListBlock = re.findall(<span class="string">r'&lt;div class="subBookList"&gt;(.*?)&lt;/div&gt;&lt;/div&gt;'</span>, html.text, re.S)</div><div class="line"><span class="comment"># booklist 为每一话的URL的列表</span></div><div class="line">bookList = re.findall(<span class="string">"&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='(.*?)' title='(.*?)'"</span>, bookListBlock[<span class="number">0</span>],re.S)</div><div class="line"></div><div class="line"><span class="comment"># 逐话操作</span></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> bookList:</div><div class="line">    indexUrl = <span class="string">"http://www.omanhua.com/"</span>+index[<span class="number">0</span>]+<span class="string">'index.html'</span></div><div class="line">    indexHtml = requests.get(indexUrl)</div><div class="line">    indexHtml.encoding = <span class="string">'UTF-8'</span></div><div class="line">    print(indexHtml.url)</div><div class="line">    <span class="comment"># 获得当前话的每张图片路径</span></div><div class="line">    picList = re.findall(<span class="string">"一人之下\|(.*?)'\."</span>, indexHtml.text)[<span class="number">0</span>].split(<span class="string">'|'</span>)</div><div class="line">    <span class="comment">#删去piclist无用的信息</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> picList[:]:</div><div class="line">        <span class="keyword">if</span> item.__len__() != <span class="number">10</span>:</div><div class="line">            picList.remove(item)</div><div class="line"></div><div class="line">    print(index[<span class="number">1</span>]+<span class="string">'共有%d页'</span>%picList.__len__())</div><div class="line">    picUrlRoot = <span class="string">u'http://pic.fxdm.cc/tu/undefined/一人之下/'</span></div><div class="line">    <span class="comment"># 指定存储位置</span></div><div class="line">    location = <span class="string">"J:/一人之下"</span></div><div class="line">    <span class="comment"># 分开放图片</span></div><div class="line">    <span class="comment"># for page in range(len(picList)):</span></div><div class="line">    <span class="comment">#     if not os.path.exists("%s/%s/"%(location,index[1])):</span></div><div class="line">    <span class="comment">#         os.makedirs("%s/%s/"%(location,index[1]))</span></div><div class="line">    <span class="comment">#     picUrl = picUrlRoot+ index[1]+'/'+picList[page]+'.jpg'</span></div><div class="line">    <span class="comment">#     path = "%s/%s/%d.jpg"%(location,index[1],page)</span></div><div class="line">    <span class="comment">#     picUrl.encode('UTF-8')</span></div><div class="line">    <span class="comment">#     #不下载已经下载过的图片,便于更新</span></div><div class="line">    <span class="comment">#     if not os.path.exists(path):</span></div><div class="line">    <span class="comment">#         savePicture(picUrl,path)</span></div><div class="line">    <span class="comment">#         print(picUrl + ' 保存到了 ' + path)</span></div><div class="line">    <span class="comment">#</span></div><div class="line"></div><div class="line">    <span class="comment"># 一起放图片</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(location):</div><div class="line">        os.makedirs(location)</div><div class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(len(picList)):</div><div class="line">        picUrl = picUrlRoot+ index[<span class="number">1</span>]+<span class="string">'/'</span>+picList[page]+<span class="string">'.jpg'</span></div><div class="line">        path = <span class="string">"%s/%s_%d.jpg"</span>%(location,index[<span class="number">1</span>],page)</div><div class="line">        picUrl.encode(<span class="string">'UTF-8'</span>)</div><div class="line">        <span class="comment"># 不下载已经下载过的图片,便于更新</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</div><div class="line">            savePicture(picUrl,path)</div><div class="line">            print(picUrl + <span class="string">' 保存到了 '</span> + path)</div></pre></td></tr></table></figure><p>如果想要图片分开放,取消掉注释的代码,注释掉后面一段代码</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="http://oskhhyaq3.bkt.clouddn.com/img/180612/idJgkeGKgi.png?imageslim" alt="mark"></p><h3 id="分开放"><a href="#分开放" class="headerlink" title="分开放"></a>分开放</h3><p><img src="http://oskhhyaq3.bkt.clouddn.com/img/180612/8iDf2611JC.png?imageslim" alt="mark"></p><h3 id="一起放"><a href="#一起放" class="headerlink" title="一起放"></a>一起放</h3><p><img src="http://oskhhyaq3.bkt.clouddn.com/img/180612/J4gh2Gb514.png?imageslim" alt="mark"></p><p>我要去看漫画了,不要打扰我(/≧▽≦)/~┴┴ </p><h2 id="源码在这"><a href="#源码在这" class="headerlink" title="源码在这"></a><a href="https://github.com/lovemefan/python_tools/blob/master/%E6%BC%AB%E7%94%BB/%E4%B8%80%E4%BA%BA%E4%B9%8B%E4%B8%8B%E6%BC%AB%E7%94%BB%E7%88%AC%E8%99%AB.py" target="_blank" rel="external"><code>源码在这</code></a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;爬取前准备&quot;&gt;&lt;a href=&quot;#爬取前准备&quot; class=&quot;headerlink&quot; title=&quot;爬取前准备&quot;&gt;&lt;/a&gt;爬取前准备&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/lovemefan/python_tools&quot; target
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="lovemefan.win/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="编程语言" scheme="lovemefan.win/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="lovemefan.win/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python小实践   微博爬虫</title>
    <link href="lovemefan.win/post/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8A%93%E5%8F%96%E5%A5%B3%E7%A5%9E%E5%BE%AE%E5%8D%9A%E5%8A%A8%E6%80%81%E5%B9%B6%E4%BF%9D%E5%AD%98%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93/index.html%20%202018/05/28/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8A%93%E5%8F%96%E5%A5%B3%E7%A5%9E%E5%BE%AE%E5%8D%9A%E5%8A%A8%E6%80%81%E5%B9%B6%E4%BF%9D%E5%AD%98%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>lovemefan.win/post/Python学习笔记/抓取女神微博动态并保存到数据库/index.html  2018/05/28/Python学习笔记/抓取女神微博动态并保存到数据库/</id>
    <published>2018-05-28T10:25:00.000Z</published>
    <updated>2018-09-04T02:39:21.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抓取女神微博动态并保存到数据库"><a href="#抓取女神微博动态并保存到数据库" class="headerlink" title="抓取女神微博动态并保存到数据库"></a>抓取女神微博动态并保存到数据库</h1><p>偶少有刷微博,常常错过女神的动态.微博客户端也常常不给我推送动态,于是我想自己给自己推送,而且还想把数据保存到自己的数据库里,于是有了接下来的尝试</p><h2 id="使用chrome浏览器抓包"><a href="#使用chrome浏览器抓包" class="headerlink" title="使用chrome浏览器抓包"></a>使用chrome浏览器抓包</h2><p>这里随便用什么软件都可以,目的只是抓包.本人使用chrome抓包<br>按下F12,查看这两个getindex的数据包<br>需要获得两个参数<code>uid</code>和<code>containerid</code><br><img src="http://oskhhyaq3.bkt.clouddn.com/img/180528/7HhB9BliF2.png?imageslim" alt="mark"><br>这里需要通过手机版weibo <a href="http://m.weibo.com来进行模拟请求，不是通过分析html代码再通过筛选来完成数据抓取。" target="_blank" rel="external">http://m.weibo.com来进行模拟请求，不是通过分析html代码再通过筛选来完成数据抓取。</a><br>笔者先用postmen软件模拟一次post请求,返回结果如下<br><img src="http://oskhhyaq3.bkt.clouddn.com/img/180528/8c54K4H2E1.png?imageslim" alt="mark"><br>返回的是json数据,接下来就是处理数据了</p><h2 id="模拟请求"><a href="#模拟请求" class="headerlink" title="模拟请求"></a>模拟请求</h2><p>以下是python模拟的post请求<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line">cursor = db.cursor()</div><div class="line">url=<span class="string">"https://m.weibo.cn/api/container/getIndex"</span></div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    <span class="comment"># 用户的uid,containerid,以及页数.每页最多为十条记录</span></div><div class="line">    payload=&#123;<span class="string">'type'</span>:<span class="string">'uid'</span>,<span class="string">'value'</span>:<span class="string">'56xxxxxx00'</span>,<span class="string">'containerid'</span>:<span class="string">'1076xxxxxxxx5400'</span>,<span class="string">'page'</span>: <span class="string">'%d'</span>%page&#125;</div><div class="line">    r=requests.post(url,data=payload)</div><div class="line">    raw_text=r.text</div><div class="line">    d=json.loads(raw_text)</div><div class="line">``` </div><div class="line">由于每页只有最新的十条记录,所以需要把每一页的数据都存起来</div><div class="line"></div><div class="line"><span class="comment">## 数据库建表</span></div><div class="line">笔者选择了一些基本信息存储,并没有保存评论信息.其中包括</div><div class="line">* itemid 每条微博的ID</div><div class="line">* scheme 每条微博的跳转链接(方便查看)</div><div class="line">* id 也是用于表示每条微博的ID,具体与itemid的区别笔者未深究</div><div class="line">* created_at 发微博的时间,精确到天</div><div class="line">* text 微博内容</div><div class="line">* source 微博来源,比如手机型号</div><div class="line">* user_id 发微博的用户ID </div><div class="line">``` sql</div><div class="line">SET FOREIGN_KEY_CHECKS=<span class="number">0</span>;</div><div class="line"></div><div class="line">-- ----------------------------</div><div class="line">-- Table structure <span class="keyword">for</span> mblog</div><div class="line">-- ----------------------------</div><div class="line">DROP TABLE IF EXISTS `mblog`;</div><div class="line">CREATE TABLE `mblog` (</div><div class="line">  `itemid` varchar(<span class="number">40</span>) NOT NULL,</div><div class="line">  `scheme` varchar(<span class="number">100</span>) DEFAULT NULL,</div><div class="line">  `id` varchar(<span class="number">20</span>) DEFAULT NULL,</div><div class="line">  `created_at` varchar(<span class="number">10</span>) DEFAULT NULL,</div><div class="line">  `text` text,</div><div class="line">  `source` varchar(<span class="number">20</span>) DEFAULT NULL,</div><div class="line">  `user_id` varchar(<span class="number">20</span>) DEFAULT NULL,</div><div class="line">  PRIMARY KEY (`itemid`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure></p><h2 id="分析数据并插入表中"><a href="#分析数据并插入表中" class="headerlink" title="分析数据并插入表中"></a>分析数据并插入表中</h2><p>这里直接贴代码了,代码有详细注释<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- codeing: utf-8 -*-</span></div><div class="line"><span class="comment"># @Time:2018/5/28 14:31</span></div><div class="line"><span class="comment"># @Author:lovemefan</span></div><div class="line"><span class="comment"># @File:抓取女神微博动态保存到数据库.py</span></div><div class="line"><span class="comment"># @Software:PyCharm</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#原始URL:https://m.weibo.cn/p/100xxxxxxxx15400</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="comment"># 打开数据库连接</span></div><div class="line">db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"账号"</span>, <span class="string">"密码"</span>, <span class="string">"数据库名"</span>, charset=<span class="string">'utf8'</span>)</div><div class="line"><span class="comment"># 使用cursor()方法获取操作游标</span></div><div class="line">cursor = db.cursor()</div><div class="line">url=<span class="string">"https://m.weibo.cn/api/container/getIndex"</span></div><div class="line">page = <span class="number">1</span></div><div class="line">sum = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">35</span>):</div><div class="line">    <span class="comment"># 用户的uid,containerid,以及页数.每页最多为十条记录</span></div><div class="line">    payload=&#123;<span class="string">'type'</span>:<span class="string">'uid'</span>,<span class="string">'value'</span>:<span class="string">'56xxxxxx00'</span>,<span class="string">'containerid'</span>:<span class="string">'10760xxxxxxxx400'</span>,<span class="string">'page'</span>: <span class="string">'%d'</span>%page&#125;</div><div class="line">    r=requests.post(url,data=payload)</div><div class="line">    raw_text=r.text</div><div class="line">    d=json.loads(raw_text)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">            print(<span class="string">"第%d页第%d条"</span>% (page,i))</div><div class="line">            print(d[<span class="string">"data"</span>][<span class="string">"cards"</span>])</div><div class="line">            itemid = str(d[<span class="string">"data"</span>][<span class="string">"cards"</span>][i][<span class="string">"itemid"</span>])</div><div class="line">            scheme = str(d[<span class="string">"data"</span>][<span class="string">"cards"</span>][i][<span class="string">"scheme"</span>])</div><div class="line">            id = str(d[<span class="string">"data"</span>][<span class="string">"cards"</span>][i][<span class="string">"mblog"</span>][<span class="string">"id"</span>])</div><div class="line">            create_at = str(d[<span class="string">"data"</span>][<span class="string">"cards"</span>][i][<span class="string">"mblog"</span>][<span class="string">"created_at"</span>])</div><div class="line">            <span class="comment">#将内容中的单引号换成双引号,否则插入数据库中会报错</span></div><div class="line">            text = str(d[<span class="string">"data"</span>][<span class="string">"cards"</span>][i][<span class="string">"mblog"</span>][<span class="string">"text"</span>]).replace(<span class="string">"'"</span>,<span class="string">"\""</span>)</div><div class="line">            source = str(d[<span class="string">"data"</span>][<span class="string">"cards"</span>][i][<span class="string">"mblog"</span>][<span class="string">"source"</span>])</div><div class="line">            user_id = str(d[<span class="string">"data"</span>][<span class="string">"cards"</span>][i][<span class="string">"mblog"</span>][<span class="string">"user"</span>][<span class="string">"id"</span>])</div><div class="line">            <span class="comment"># sql插入语句</span></div><div class="line">            sql = <span class="string">"insert ignore into mblog(itemid,scheme,id,created_at,text,source,user_id) VALUES('%s','%s','%s','%s','%s','%s','%s')"</span> % (itemid,scheme,id,create_at,text,source,user_id)</div><div class="line">            print(sql)</div><div class="line">            <span class="comment"># 执行sql语句</span></div><div class="line">            cursor.execute(sql)</div><div class="line">            <span class="comment"># 执行sql语句</span></div><div class="line">            db.commit()</div><div class="line">            sum = sum + <span class="number">1</span></div><div class="line">    <span class="keyword">except</span> IndexError:</div><div class="line">        <span class="comment"># 但记录不满10条的时候,捕获list越界异常,自动跳过</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    page = page + <span class="number">1</span></div><div class="line">    print(<span class="string">"第%d页执行成功"</span>%page)</div><div class="line">        <span class="comment"># print(["text"])</span></div><div class="line">db.close()</div><div class="line">print(<span class="string">"一共插入了%d的条记录"</span>% sum)</div></pre></td></tr></table></figure></p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="http://oskhhyaq3.bkt.clouddn.com/img/180528/ICjHHa2I31.png?imageslim" alt="mark"><br>保存成功,然后就可以去翻数据库里的数据了.</p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><ul><li>只能一次性的保存至今的记录,后续添加监听并邮箱推送</li><li>后续可以添加数据分析,关键子词云</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;抓取女神微博动态并保存到数据库&quot;&gt;&lt;a href=&quot;#抓取女神微博动态并保存到数据库&quot; class=&quot;headerlink&quot; title=&quot;抓取女神微博动态并保存到数据库&quot;&gt;&lt;/a&gt;抓取女神微博动态并保存到数据库&lt;/h1&gt;&lt;p&gt;偶少有刷微博,常常错过女神的动态.微
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="lovemefan.win/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="编程语言" scheme="lovemefan.win/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="lovemefan.win/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Android学习笔记 (三)   MP3播放器</title>
    <link href="lovemefan.win/post/Android/MP3%E6%92%AD%E6%94%BE%E5%99%A8/index.html%20%202017/11/12/Android/MP3%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>lovemefan.win/post/Android/MP3播放器/index.html  2017/11/12/Android/MP3播放器/</id>
    <published>2017-11-12T05:58:00.000Z</published>
    <updated>2017-11-16T04:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Android学习笔记 (三)   MP3播放器：</strong> <excerpt in="" index="" |="" 首页摘要=""><br> 利用Intent 唤醒其他Activity或其他APP<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h1 id="MP3播放器"><a href="#MP3播放器" class="headerlink" title="MP3播放器"></a>MP3播放器</h1><p>整个音乐播放器设计模仿网易云音乐风格<br>工程源代码已上传至Github: <a href="https://github.com/lovemefan/MP3Player" target="_blank" rel="external">源码下载</a></p><p><strong>实现的功能</strong>:</p><ul><li><strong>1.</strong>暂停,开始音乐,后台播放</li><li><strong>2.</strong>进度条可拖动,能实现音乐跳转</li><li><strong>3.</strong>能够循环切换上一曲和下一曲</li><li><strong>4.</strong>播放完毕后自动下一曲</li><li><strong>5.</strong>歌曲封面有旋转的动画</li><li><strong>6.</strong>背景图片毛玻璃美化</li></ul><p><strong>待实现的功能</strong></p><ul><li>音乐列表</li><li>本地音乐读取播放</li><li>网络音乐播放</li></ul><h2 id="Music-java设计"><a href="#Music-java设计" class="headerlink" title="Music.java设计"></a>Music.java设计</h2><p>要播放多首音乐,首先设计一个音乐类用于存放歌曲信息,如歌曲名,封面图片的ID,音乐文件的ID<br><code>Music.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lovemefan.mp3player;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.os.Parcel;</div><div class="line"><span class="keyword">import</span> android.os.Parcelable;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Lovemefan on 2017/11/7.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Music</span> <span class="keyword">implements</span> <span class="title">Parcelable</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;<span class="comment">//歌曲名</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> coverId;<span class="comment">//封面的ID</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> resourceId;<span class="comment">//资源路径ID</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Music</span><span class="params">(String name, <span class="keyword">int</span> coverId, <span class="keyword">int</span> resourceId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.coverId = coverId;</div><div class="line">        <span class="keyword">this</span>.resourceId = resourceId;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCoverId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> coverId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCoverId</span><span class="params">(<span class="keyword">int</span> coverId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.coverId = coverId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getResourceId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> resourceId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceId</span><span class="params">(<span class="keyword">int</span> resourceId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.resourceId = resourceId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//    实现接口Parcelable需要重写下面两个方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel parcel, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        parcel.writeString(getName());</div><div class="line">        Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">        bundle.putInt(<span class="string">"coverId"</span>,getCoverId());</div><div class="line">        bundle.putInt(<span class="string">"resourceId"</span>,getResourceId());</div><div class="line">        parcel.writeBundle(bundle);</div><div class="line">    &#125;<span class="comment">//将成员变量一一写入Parcel中</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Music&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Music&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Music <span class="title">createFromParcel</span><span class="params">(Parcel parcel)</span> </span>&#123;</div><div class="line">            Bundle bundle = parcel.readBundle();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Music(parcel.readString(), bundle.getInt(<span class="string">"coverId"</span>), bundle.getInt(<span class="string">"resourceId"</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Music[] newArray(<span class="keyword">int</span> i) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Music[i];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="后台服务类"><a href="#后台服务类" class="headerlink" title="后台服务类"></a>后台服务类</h2><p>为了让音乐能够在app后台运行,就要设计一个Service.<br><code>MusicPlayService.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lovemefan.mp3player;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Service;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.media.MediaPlayer;</div><div class="line"><span class="keyword">import</span> android.os.Binder;</div><div class="line"><span class="keyword">import</span> android.os.IBinder;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicPlayService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MediaPlayer mediaPlayer = <span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MusicPlayService</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> MediaPlayer <span class="title">getMediaPlayer</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> mediaPlayer;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> Return the communication channel to the service.</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyBinder();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        mediaPlayer = MediaPlayer.create(<span class="keyword">this</span>,R.raw.aimer_ninelie);<span class="comment">//设置初始值</span></div><div class="line"><span class="comment">//        mediaPlayer.start();</span></div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h2><p>由MainActivity绑定MusicPlayService服务,让音乐在服务中运行.另外还要创建一个线程来更新进度条和当前时间.<br><code>MainActivity.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lovemefan.mp3player;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.ComponentName;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.content.ServiceConnection;</div><div class="line"><span class="keyword">import</span> android.content.res.AssetFileDescriptor;</div><div class="line"><span class="keyword">import</span> android.content.res.Resources;</div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.BitmapDrawable;</div><div class="line"><span class="keyword">import</span> android.media.AudioAttributes;</div><div class="line"><span class="keyword">import</span> android.media.MediaPlayer;</div><div class="line"><span class="keyword">import</span> android.os.Build;</div><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"><span class="keyword">import</span> android.os.IBinder;</div><div class="line"><span class="keyword">import</span> android.os.Message;</div><div class="line"><span class="keyword">import</span> android.support.annotation.RequiresApi;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.Window;</div><div class="line"><span class="keyword">import</span> android.view.WindowManager;</div><div class="line"><span class="keyword">import</span> android.view.animation.Animation;</div><div class="line"><span class="keyword">import</span> android.view.animation.AnimationUtils;</div><div class="line"><span class="keyword">import</span> android.view.animation.LinearInterpolator;</div><div class="line"><span class="keyword">import</span> android.view.animation.RotateAnimation;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout;</div><div class="line"><span class="keyword">import</span> android.widget.ProgressBar;</div><div class="line"><span class="keyword">import</span> android.widget.SeekBar;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>&#123;</div><div class="line">    ArrayList&lt;Music&gt; musics = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    MediaPlayer mediaPlayer;<span class="comment">//媒体播放器</span></div><div class="line">    ImageView playButton;<span class="comment">//播放按钮</span></div><div class="line">    SeekBar progressBar ;<span class="comment">//进度条</span></div><div class="line">    TextView title;<span class="comment">//标题,用于显示歌名</span></div><div class="line">    TextView currentTime;<span class="comment">//显示当前播放的时间</span></div><div class="line">    TextView duration;<span class="comment">//显示歌曲时长</span></div><div class="line">    Handler handler ;<span class="comment">//用于其他线程更新</span></div><div class="line">    CircleImageView cover;<span class="comment">//显示歌曲的封面</span></div><div class="line">    LinearLayout root;<span class="comment">//根面板</span></div><div class="line">    <span class="keyword">int</span> musicProcess=<span class="number">0</span>;<span class="comment">//歌曲的进度;</span></div><div class="line">    <span class="keyword">int</span> musicCurIndex = <span class="number">0</span>;<span class="comment">//当前播放的歌曲的下标</span></div><div class="line">    Animation rotateAnimation ;</div><div class="line"></div><div class="line">    <span class="comment">//用于handle的handleMessage处理不同的事件</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UpdateCurrentTime=<span class="number">0</span>;<span class="comment">//刷新当前播放时间标识符</span></div><div class="line">    <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.LOLLIPOP)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);;<span class="comment">//去掉标题栏</span></div><div class="line">        <span class="keyword">this</span>.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);<span class="comment">//去掉信息栏</span></div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        activityInit();<span class="comment">//相关控件初始化</span></div><div class="line">        bindService(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,MusicPlayService.class), MainActivity.<span class="keyword">this</span>, Context.BIND_AUTO_CREATE);<span class="comment">//绑定服务</span></div><div class="line"></div><div class="line">        musics.add(<span class="keyword">new</span> Music(<span class="string">"ninelie"</span>,R.drawable.nineliecover,R.raw.aimer_ninelie));</div><div class="line">        musics.add(<span class="keyword">new</span> Music(<span class="string">"像风一样"</span>,R.drawable.linkwinds,R.raw.like_winds));</div><div class="line">        musics.add(<span class="keyword">new</span> Music(<span class="string">"Let It Out"</span>,R.drawable.let_it_out,R.raw.let_it_out));</div><div class="line">        refreshMusicInfo(musics.get(<span class="number">0</span>));</div><div class="line">        <span class="comment">//</span></div><div class="line">        progressBar.setOnSeekBarChangeListener(<span class="keyword">new</span> SeekBar.OnSeekBarChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> i, <span class="keyword">boolean</span> b)</span> </span>&#123;</div><div class="line">                musicProcess = i;</div><div class="line">                <span class="comment">//自动播放下一曲</span></div><div class="line">                <span class="keyword">if</span>(mediaPlayer.getDuration() - musicProcess &lt; <span class="number">500</span>)&#123;</div><div class="line">                    musicCurIndex = (musicCurIndex + <span class="number">1</span>) % musics.size();</div><div class="line">                    refreshMusicInfo(musics.get(musicCurIndex));</div><div class="line">                    play();<span class="comment">//播放音乐</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line">                mediaPlayer.seekTo(musicProcess);<span class="comment">//跳转到</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        handler = <span class="keyword">new</span> Handler(<span class="keyword">new</span> Handler.Callback()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (message.what)&#123;</div><div class="line">                <span class="keyword">case</span> UpdateCurrentTime:currentTime.setText(secondsToMinutes(mediaPlayer.getCurrentPosition()));<span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        &#125;);</div><div class="line">        findViewById(R.id.playButton).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                play();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activityInit</span><span class="params">()</span></span>&#123;</div><div class="line">        playButton = (ImageView) findViewById(R.id.playButton);</div><div class="line">        progressBar = ( SeekBar) <span class="keyword">this</span>.findViewById(R.id.progressBar);</div><div class="line">        currentTime = (TextView) findViewById(R.id.curTime);</div><div class="line">        duration = (TextView) findViewById(R.id.duration);</div><div class="line">        title = (TextView) findViewById(R.id.musicName);</div><div class="line">        cover = (CircleImageView) findViewById(R.id.musicCover);</div><div class="line">        root = (LinearLayout) findViewById(R.id.root);</div><div class="line">        rotateAnimation =  AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.rotation);</div><div class="line">        rotateAnimation.setFillEnabled(<span class="keyword">true</span>);</div><div class="line">        rotateAnimation.setFillAfter(<span class="keyword">true</span>);</div><div class="line">        rotateAnimation.setInterpolator(<span class="keyword">new</span> LinearInterpolator());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        unbindService(MainActivity.<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"绑定成功"</span>);</div><div class="line">        mediaPlayer = ((MusicPlayService.MyBinder)iBinder).getMediaPlayer();</div><div class="line">        progressBar.setMax(mediaPlayer.getDuration());<span class="comment">//设置进度条</span></div><div class="line">        duration.setText(<span class="string">""</span>+secondsToMinutes(mediaPlayer.getDuration()));</div><div class="line">        currentTime.setText(<span class="string">"00:00"</span>);</div><div class="line">        System.out.println(mediaPlayer.getDuration());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">secondsToMinutes</span><span class="params">(<span class="keyword">int</span> seconds)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> minute = seconds/<span class="number">60000</span>;</div><div class="line">        <span class="keyword">int</span> second = (seconds/<span class="number">1000</span>)%<span class="number">60</span>;</div><div class="line">        String  m = <span class="string">""</span>+ minute;</div><div class="line">        String  s = <span class="string">""</span> + second;</div><div class="line">        <span class="keyword">if</span> (minute&lt;<span class="number">10</span>)&#123;</div><div class="line">            m = <span class="string">"0"</span> + minute;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(second&lt;<span class="number">10</span>)&#123;</div><div class="line">           s = <span class="string">"0"</span> + second;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> m + <span class="string">":"</span> + s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(mediaPlayer == <span class="keyword">null</span> )&#123;</div><div class="line">            System.out.println(<span class="string">"mediaplayer初始化失败"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(mediaPlayer.isPlaying())&#123;</div><div class="line">                mediaPlayer.pause();</div><div class="line">                cover.clearAnimation();</div><div class="line">                playButton.setImageResource(R.drawable.play);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                mediaPlayer.start();</div><div class="line"></div><div class="line">                cover.startAnimation(rotateAnimation);</div><div class="line">                playButton.setImageResource(R.drawable.pause);</div><div class="line">            &#125;</div><div class="line">            System.out.println(mediaPlayer.isPlaying());</div><div class="line">            <span class="keyword">new</span> MyThread().start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.LOLLIPOP)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshMusicInfo</span><span class="params">(Music curMusic)</span></span>&#123;</div><div class="line">        title.setText(curMusic.getName());<span class="comment">//设置歌曲名</span></div><div class="line">        <span class="comment">//        获取需要被模糊的原图bitmap</span></div><div class="line">        Resources res = getResources();</div><div class="line">        Bitmap scaledBitmap = BitmapFactory.decodeResource(res, curMusic.getCoverId());</div><div class="line">        <span class="comment">//        scaledBitmap为目标图像，25是缩放的倍数（越大模糊效果越高）</span></div><div class="line">        Bitmap blurBitmap = BlurImage.toBlur(scaledBitmap, <span class="number">50</span>);</div><div class="line">        root.setBackground(<span class="keyword">new</span> BitmapDrawable(blurBitmap));<span class="comment">//设置根面板背景</span></div><div class="line">        cover.setImageResource(curMusic.getCoverId());<span class="comment">//设置封面</span></div><div class="line">        <span class="keyword">if</span>(mediaPlayer == <span class="keyword">null</span>)&#123;</div><div class="line">            System.out.println(<span class="string">"mediaplayer初始化失败"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                AssetFileDescriptor afd = <span class="keyword">this</span>.getResources().openRawResourceFd(curMusic.getResourceId());</div><div class="line">                <span class="keyword">if</span> (afd == <span class="keyword">null</span>) &#123;</div><div class="line">                    Toast.makeText(<span class="keyword">this</span>,<span class="string">"音乐打开失败"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    mediaPlayer.stop();</div><div class="line">                    <span class="keyword">final</span> AudioAttributes aa = <span class="keyword">new</span> AudioAttributes.Builder().build();</div><div class="line">                    mediaPlayer.setAudioAttributes(aa);</div><div class="line">                    mediaPlayer.setAudioSessionId(mediaPlayer.getAudioSessionId() + <span class="number">1</span>);</div><div class="line">                    mediaPlayer.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength());<span class="comment">//设置音乐源</span></div><div class="line">                    afd.close();<span class="comment">//关闭文件</span></div><div class="line">                    mediaPlayer.prepare();<span class="comment">//音乐准备</span></div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"音乐播放失败"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">                currentTime.setText(<span class="string">"00:00"</span>);<span class="comment">//设置开始时间</span></div><div class="line">                duration.setText(secondsToMinutes(mediaPlayer.getDuration()));<span class="comment">//获取音乐时长,并设置时间</span></div><div class="line">                progressBar.setProgress(<span class="number">0</span>);<span class="comment">//将播放进度条清零</span></div><div class="line">                playButton.setImageResource(R.drawable.play);<span class="comment">//重新将按钮设置为播放</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.LOLLIPOP)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">previouMusic</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="comment">//可实现循环切换</span></div><div class="line">        musicCurIndex = (musicCurIndex + musics.size() -<span class="number">1</span>) % musics.size() ;<span class="comment">//加上music.size()防止出现负数</span></div><div class="line">        refreshMusicInfo(musics.get(musicCurIndex));</div><div class="line">        play();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.LOLLIPOP)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextMusic</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="comment">//可实现循环切换</span></div><div class="line">        musicCurIndex = (musicCurIndex + <span class="number">1</span>) % musics.size();</div><div class="line">        refreshMusicInfo(musics.get(musicCurIndex));</div><div class="line">        play();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">while</span>(mediaPlayer.isPlaying())&#123;</div><div class="line">                progressBar.setMax(mediaPlayer.getDuration());</div><div class="line">                progressBar.setProgress(mediaPlayer.getCurrentPosition());</div><div class="line">                handler.sendMessage(Message.obtain());</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.lovemefan.mp3player.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/root"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">            <span class="attr">android:alpha</span>=<span class="string">"0.4"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#3c3c3c"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/musicName"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">                <span class="attr">android:textAlignment</span>=<span class="string">"center"</span></div><div class="line">                <span class="attr">android:textColorHighlight</span>=<span class="string">"@color/colorAccent"</span></div><div class="line">                <span class="attr">android:textStyle</span>=<span class="string">"bold"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"#fff"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"18pt"</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/centerArea"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">            <span class="attr">android:layout_weight</span>=<span class="string">"7.5"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span></div><div class="line">                <span class="attr">android:layout_marginBottom</span>=<span class="string">"20dp"</span>&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">                    <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">                    <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">                    <span class="attr">android:src</span>=<span class="string">"@drawable/record"</span> /&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">com.lovemefan.mp3player.CircleImageView</span> <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/musicCover"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"225dp"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"225dp"</span></div><div class="line">                    <span class="attr">android:src</span>=<span class="string">"@drawable/nineliecover"</span></div><div class="line">                    <span class="attr">app:civ_border_color</span>=<span class="string">"#3c3c3c"</span></div><div class="line">                    <span class="attr">app:civ_border_width</span>=<span class="string">"2dp"</span></div><div class="line">                    <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">                    <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">                    <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">                    /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"20dp"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"-20dp"</span></div><div class="line">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/curTime"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"0pt"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                    <span class="attr">android:textAlignment</span>=<span class="string">"center"</span></div><div class="line">                    <span class="attr">android:layout_weight</span>=<span class="string">"1.2"</span> /&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">SeekBar</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/progressBar"</span></div><div class="line">                    <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleHorizontal"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                    <span class="attr">android:layout_weight</span>=<span class="string">"7.6"</span> /&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/duration"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                    <span class="attr">android:layout_weight</span>=<span class="string">"1.2"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/playBar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">            <span class="attr">android:layout_weight</span>=<span class="string">"1.5"</span></div><div class="line">            <span class="attr">android:alpha</span>=<span class="string">"0.4"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#3c3c3c"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/previouButton"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"60dp"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"2"</span></div><div class="line">                <span class="attr">android:onClick</span>=<span class="string">"previouMusic"</span></div><div class="line">                <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/previous"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/playButton"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"60dp"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"2"</span></div><div class="line">                <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/play"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/nextButton"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"60dp"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"2"</span></div><div class="line">                <span class="attr">android:onClick</span>=<span class="string">"nextMusic"</span></div><div class="line">                <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/next"</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="界面效果"><a href="#界面效果" class="headerlink" title="界面效果"></a>界面效果</h2><p><img src="http://oskhhyaq3.bkt.clouddn.com/blog/171116/dlca6h3hAD.png?imageslim" alt="mark"><br><img src="http://oskhhyaq3.bkt.clouddn.com/blog/171116/0GCA5kkBc2.png?imageslim" alt="mark"><br><img src="http://oskhhyaq3.bkt.clouddn.com/blog/171116/hKd52055A0.png?imageslim" alt="mark"><br><img src="http://oskhhyaq3.bkt.clouddn.com/blog/171116/jbaI2K4LC3.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Android学习笔记 (三)   MP3播放器：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt; 利用Intent 唤醒其他Activity或其他APP&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="lovemefan.win/tags/Android/"/>
    
      <category term="APP开发" scheme="lovemefan.win/tags/APP%E5%BC%80%E5%8F%91/"/>
    
      <category term="学习笔记" scheme="lovemefan.win/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
